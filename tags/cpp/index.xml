<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cpp on I'm OWenT</title><link>//owent.net/tags/cpp.html</link><description>Recent content in Cpp on I'm OWenT</description><generator>Hugo</generator><language>zh-cn</language><copyright>&lt;a rel="license" href="https://github.com/owent/blog-hugo/blob/master/LICENSE.md">&lt;img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/80x15.png" />&lt;/a></copyright><lastBuildDate>Tue, 08 Oct 2024 20:45:45 +0000</lastBuildDate><atom:link href="//owent.net/tags/cpp/index.xml" rel="self" type="application/rss+xml"/><item><title>实现一个strong_rc_ptr(非线程安全版本的std::shared_ptr)</title><link>//owent.net/2024/2405.html</link><pubDate>Tue, 08 Oct 2024 20:45:45 +0000</pubDate><guid>//owent.net/2024/2405.html</guid><description>&lt;h2 id="背景">背景&lt;/h2>
&lt;p>我们的新项目有个比较复杂的全区全服交易行系统，其中搜索和推荐是高实时性全区服多维度排序的，并且要支持比较复杂的标签交集查询和属性范围查询的自由组合。
当有订单发生变化时，它不仅仅会影响全服状态下搜索和推荐条件的结果变化，也会同时影响商品维度的聚合，交易行层面的数据聚合。&lt;/p></description></item><item><title>手夯一个STL allocator和对象内存分析组件</title><link>//owent.net/2024/2404.html</link><pubDate>Wed, 21 Aug 2024 23:51:45 +0000</pubDate><guid>//owent.net/2024/2404.html</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>我们项目组前段时间排查和分析压测环境下的某些业务模块大量索引结构的内存问题。通用的工具比如 &lt;a href="https://github.com/jemalloc/jemalloc">jemalloc+jeperf&lt;/a> 或者 &lt;a href="https://github.com/google/tcmalloc">tcmalloc+gperf&lt;/a> 的组合过于底层，一方面开启跟踪开销较高，另一方面也是会产生过多噪音数据影响判断。所以我针对我们的智能指针（包含 &lt;code>std::shared_ptr&lt;/code> 和我最近写了个非线程安全的版本的 &lt;code>strong_rc_ptr&lt;/code> ， 这个后面有空再分享）和STL容器实现了allocator来帮助动态的手动插桩来分析问题。
最终的效果是可以通过一键替换类型申明的Allocator来插入动态控制和插桩统计的能力，这里分享一下手夯标准STL allocator的一些实现细节，方便其他小伙伴如果需要做类似的实现来参考。&lt;/p></description></item><item><title>std::condition_variable 的信号丢失问题</title><link>//owent.net/2024/2403.html</link><pubDate>Fri, 02 Aug 2024 15:30:45 +0000</pubDate><guid>//owent.net/2024/2403.html</guid><description>&lt;h2 id="背景">背景&lt;/h2>
&lt;p>这篇分享拖更了好久了。问题起源于去年我们项目组接入 &lt;a href="https://github.com/open-telemetry/opentelemetry-cpp">opentelemetry-cpp&lt;/a> 的时候，在进程优雅退出的时候偶现超时，虽然可以直接kill进程没啥影响但是退出不“优雅”的话总归会破坏发布流程，增加人工介入的成本。这里记录一下问题可能其他的组件有类似的用法也会有相似的问题。&lt;/p></description></item><item><title>踩坑一处（GCC）STL `std::async` 实现BUG导致的crash问题</title><link>//owent.net/2024/2402.html</link><pubDate>Sun, 21 Jul 2024 02:32:45 +0000</pubDate><guid>//owent.net/2024/2402.html</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>近期发现项目组使用新版本的 &lt;a href="https://github.com/open-telemetry/opentelemetry-cpp">opentelemetry-cpp&lt;/a> 的时候偶现崩溃。崩溃的位置在STL的 &lt;code>std::future&lt;/code> 析构的地方，而这个 &lt;code>std::future&lt;/code> 由 &lt;code>std::async&lt;/code>创建。
比较违反直觉，这里记录分享一下分析和解决过程方面其他碰到的小伙伴们。&lt;/p></description></item><item><title>Opentelemetry-cpp的Logs模块标准更新(涉及近期版本:1.8-1.9的BREAK CHANGES)</title><link>//owent.net/2023/2302.html</link><pubDate>Sat, 25 Feb 2023 11:39:45 +0000</pubDate><guid>//owent.net/2023/2302.html</guid><description>&lt;h2 id="背景">背景&lt;/h2>
&lt;p>&lt;a href="https://github.com/open-telemetry/opentelemetry-cpp">Opentelemetry-cpp&lt;/a> 是可观测领域，&lt;a href="https://opentelemetry.io/">opentelemetry&lt;/a> (CNCF基金会孵化项目)的&lt;a href="https://github.com/open-telemetry/opentelemetry-cpp">C++ SDK接入层&lt;/a>。
&lt;a href="https://opentelemetry.io/">opentelemetry&lt;/a> 里面主要是分链路跟踪(Trace)、指标(Metrics)、日志(Logs)三大块。
同时 &lt;a href="https://opentelemetry.io/">opentelemetry&lt;/a> 有一个标准规范文档 &lt;a href="https://github.com/open-telemetry/opentelemetry-specification">opentelemetry-specification&lt;/a> ，而SDK实现主要就是来对这个标准规范文档的特定语言实现。
由于日志(Logs)这一块一直处于Experimental阶段，所以很长时间以来 &lt;a href="https://github.com/open-telemetry/opentelemetry-cpp">C++ SDK接入层&lt;/a> 都没有及时更新跟进规范的变化。&lt;/p></description></item><item><title>记录一些bazel适配用编译选项</title><link>//owent.net/2022/2202.html</link><pubDate>Mon, 14 Feb 2022 20:36:45 +0000</pubDate><guid>//owent.net/2022/2202.html</guid><description>&lt;p>之前搞 &lt;a href="https://github.com/open-telemetry/opentelemetry-cpp">opentelemetry-cpp&lt;/a> 的时候接触了下 &lt;a href="https://bazel.build/">bazel&lt;/a> 构建系统。这玩意儿用起来有一点坑，特别是使用自定义编译环境的时候。&lt;/p>
&lt;p>在使用我自己编译的很新版本的 &lt;a href="https://github.com/owent-utils/bash-shell/tree/main/GCC%20Installer">GCC&lt;/a> 和 &lt;a href="https://github.com/owent-utils/bash-shell/tree/main/LLVM%26Clang%20Installer">clang+libc++&lt;/a> 的时候，涉及对libssp的检测和 &lt;code>LD_LIBRARY_PATH&lt;/code> 环境变量在 &lt;a href="https://bazel.build/">bazel&lt;/a> 中各个步骤中的传递，这里记录一下适配脚本。&lt;/p></description></item><item><title>测试现代化硬件C++浮点数性能和一致性</title><link>//owent.net/2022/2201.html</link><pubDate>Thu, 27 Jan 2022 11:39:45 +0000</pubDate><guid>//owent.net/2022/2201.html</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>很久很久以前，浮点数的性能和跨平台跨硬件架构一致性是无法获得保证的，所以我们一般在需要强一致性和高性能的游戏服务器中会禁用浮点数，转而使用自己实现的定点数。
这么多年过去了，前段时间想看看现代化硬件下是否仍然有性能问题和是否能够保证一致性，做了些简单的测试，这里记录一下。&lt;/p></description></item><item><title>[C++20] Module partitions和符号交叉引用（声明和实现分离）</title><link>//owent.net/2021/2103.html</link><pubDate>Thu, 25 Mar 2021 22:38:52 +0000</pubDate><guid>//owent.net/2021/2103.html</guid><description>&lt;p>C++20 开始支持 &lt;strong>Module&lt;/strong> 了。在以前C++为了解决循环依赖问题，经常会把类或者函数声明写前面，实现写后面。然后中间的代码就可以实现内部模块的内聚而互相引用。比如:&lt;/p></description></item><item><title>跨平台协程库 - libcopp 简介</title><link>//owent.net/2019/1912.html</link><pubDate>Tue, 22 Oct 2019 21:53:00 +0000</pubDate><guid>//owent.net/2019/1912.html</guid><description>&lt;p>前段时间有同事联系我想看看可能推广我之前写的协程库 &lt;a href="https://github.com/owent/libcopp">libcopp&lt;/a>，虽然 &lt;a href="https://github.com/owent/libcopp">libcopp&lt;/a> 已经用到过好几个项目上，这几年也断断续续地写了一些实现细节的文章，但是也但确实需要系统、概览性地介绍下 &lt;a href="https://github.com/owent/libcopp">libcopp&lt;/a> ，所以就有了这篇文章。&lt;/p></description></item><item><title>C++20 Coroutine 性能测试 (附带和libcopp/libco/libgo/goroutine/linux ucontext对比)</title><link>//owent.net/2019/1911.html</link><pubDate>Sat, 05 Oct 2019 14:52:00 +0000</pubDate><guid>//owent.net/2019/1911.html</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>之前写了 &lt;a href="https://owent.net/2018/1806.html">《协程框架(libcopp)v2优化、自适应栈池和同类库的Benchmark对比》&lt;/a> 和 &lt;a href="https://owent.net/2019/1904.html">《C++20 Coroutine》&lt;/a> ，但是一直没写 &lt;a href="https://en.cppreference.com/w/cpp/language/coroutines">C++20 Coroutine&lt;/a> 的测试报告。&lt;/p>
&lt;p>现在的草案版本比我当时写 &lt;a href="https://owent.net/2019/1904.html">《C++20 Coroutine》&lt;/a> 的时候有了一点点更新，&lt;a href="https://en.cppreference.com/w/cpp/language/coroutines">cppreference&lt;/a> 上有文档了(&lt;a href="https://en.cppreference.com/w/cpp/language/coroutines">https://en.cppreference.com/w/cpp/language/coroutines&lt;/a>) 。里面列举的标准文档是&lt;a href="https://owent.net/2019/1904.html">P0912R5&lt;/a>，这个文档目前还没完工，详情可以看他的来源&lt;a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/n4775.pdf">N4775&lt;/a>。不过内容上暂时还没有太大的变化，今天我就照着之前的方式来benchmark一波 &lt;a href="https://en.cppreference.com/w/cpp/language/coroutines">C++20 Coroutine&lt;/a> 吧。&lt;/p></description></item><item><title>C++20 Coroutine</title><link>//owent.net/2019/1904.html</link><pubDate>Mon, 04 Mar 2019 20:38:00 +0000</pubDate><guid>//owent.net/2019/1904.html</guid><description>&lt;h1 id="前言">前言&lt;/h1>
&lt;p>最近的新闻里 C++20 已经确认的内容里已经有了协程组件，之前都是粗略看过这个协程草案。最近抽时间更加系统性的看了下接入和实现细节。&lt;/p>
&lt;p>我的测试代码都是在MSVC下开启 &lt;code>/await&lt;/code> 选项后测试的，在我本地的Linux clang环境中，可以通过 &lt;code>$LLVM_CLANG_PREFIX/bin/clang++ -std=c++2a -O0 -g -ggdb -stdlib=libc++ -fcoroutines-ts -lc++ -lc++abi -Wl,-rpath=$LLVM_CLANG_PREFIX/lib/ test.cpp&lt;/code> 编译和运行。&lt;/p></description></item><item><title>2018年的新通用伪随机数算法(xoshiro / xoroshiro)的C++(head only)实现</title><link>//owent.net/2018/1810.html</link><pubDate>Thu, 18 Oct 2018 13:43:31 +0000</pubDate><guid>//owent.net/2018/1810.html</guid><description>&lt;p>前段时间看到说&lt;a href="https://github.com/lua/lua/blob/f59e6a93c0ad38a27a420e51abf8f13d962446b5/lmathlib.c#L571">Lua 5.4&lt;/a>用了一种新的通用随机数算法，替换掉本来内部使用的CRT的随机数引擎。我看了一下大致的实现，CPU和空间复杂度任然保持了一个较低的水平，并且循环节和说是随机性都还不错。我们游戏项目中原本对大量随机数场景的随机数算法使用的是基于线性同余的TAUS88，但是使用过程中发现这个算法分布上还是有一些不是很理想，所以就想把这个新的科研成果也用进我们项目中试试看效果。&lt;/p></description></item><item><title>C++的backtrace</title><link>//owent.net/2018/1801.html</link><pubDate>Mon, 08 Jan 2018 17:55:00 +0000</pubDate><guid>//owent.net/2018/1801.html</guid><description>&lt;h1 id="开始之前">开始之前&lt;/h1>
&lt;p>很多语言的log模块都有一个功能，就是在打log的时候能够追溯调用栈，有的时候对查bug能有点帮助。之前我也想过给我们的log模块加上C++的backtrace的功能，迟迟一直没有做主要是两个原因：一是C++的backtrace在各个平台和编译器上都不太一样，比较冗杂；二是C/C++在编译优化之后，调用行之类的信息和甚至一些函数可能就被优化没了。所以能提供的信息就相当有限。前两天刚好有朋友问有没有提供这个，所以就花了点时间整理了下适配方案。&lt;/p></description></item><item><title>libcopp v2的第一波优化完成</title><link>//owent.net/2017/1466.html</link><pubDate>Sat, 01 Jul 2017 15:57:29 +0000</pubDate><guid>//owent.net/2017/1466.html</guid><description>&lt;p>之前测出来&lt;a href="https://github.com/owent/libcopp">libcopp&lt;/a>还有一些列优化点，但是要破坏之前的API，所以整理了一下优化的想法和方案。&lt;/p>
&lt;h2 id="预留空间和合并分配">预留空间和合并分配&lt;/h2>
&lt;p>之前有太多的堆内存分配了，导致很多碎片。那么第一个想法就是协程对象可以分配在栈上，runner也可以分配在栈上。然后还可以加一个自定义预留长度。每个对象对齐到sizeof(long)，总长度对齐到64 Bytes。&lt;/p></description></item><item><title>libcopp(v2) vs goroutine性能测试</title><link>//owent.net/2017/1465.html</link><pubDate>Sat, 10 Jun 2017 15:57:29 +0000</pubDate><guid>//owent.net/2017/1465.html</guid><description>&lt;p>本来是没想写这个对比。无奈之前和&lt;a href="https://github.com/yuanzhubi/call_in_stack">call_in_stack&lt;/a>的作者聊了一阵，发现了一些&lt;a href="https://github.com/owent/libcopp">libcopp&lt;/a>的改进空间。然后顺便看了新的boost.context的cc部分的代码，有所启发。想给&lt;a href="https://github.com/owent/libcopp">libcopp&lt;/a>做一些优化，主要集中在减少分配次数从而减少内存碎片；在支持的编译器里有些地方用右值引用来减少不必要的拷贝；减少原子操作和减少L1cache miss几个方面。&lt;/p>
&lt;p>之后改造了茫茫多流程和接口后出了v2版本，虽然没完全优化完，但是组织结构已经定型了，可以用来做压力测试。为了以后方便顺便还把cppcheck和clang-analyzer的静态分析工具写进了dev脚本。然后万万没想到的是，在大量协程的情况下，benchmark的结果性能居然比原来还下降了大约1/3。&lt;/p></description></item><item><title>libcopp的线程安全、栈池和merge boost.context 1.64.0</title><link>//owent.net/2017/1446.html</link><pubDate>Fri, 12 May 2017 19:45:17 +0000</pubDate><guid>//owent.net/2017/1446.html</guid><description>&lt;!-- raw HTML omitted -->
&lt;h2 id="线程安全">线程安全&lt;/h2>
&lt;p>前段时间看到了一个完成读比较高的协程库-&lt;a href="https://github.com/yyzybb537/libgo">libgo&lt;/a>，里面提供了线程安全的协程实现，并且也是使用锁。本来我并没有给&lt;a href="https://github.com/owent/libcopp">libcopp&lt;/a>里的功能加锁的打算，因为上层dispatcher还是比较容易做到安全分发的，所以原来并不保证线程安全。而且线程安全这种问题单元测试比较难写，可能还得碰点运气。但是思来想去，还是为线程安全做点什么吧。反正也不是很复杂。&lt;/p>
&lt;p>由于我并没有给utils加互斥锁的跨平台适配，所以先就直接用了自旋锁，来锁住需要考虑线程安全的地方。其实需要加锁的地方并不多，无非是管理器的增删查和task的next函数需要加锁。这些逻辑都很短，功能也很简单，并不会占用太多时间，所以自旋锁的问题也不大。而且以后真发现有问题，换掉也不是什么难事儿。&lt;/p></description></item><item><title>GCC 7和LLVM+Clang+libc++abi 4.0的构建脚本</title><link>//owent.net/2017/1431.html</link><pubDate>Tue, 09 May 2017 11:17:55 +0000</pubDate><guid>//owent.net/2017/1431.html</guid><description>&lt;p>之前的版本发完，有空来更新一下之前的gcc和llvm+clang工具链的编译脚本了。其实GCC 7是才release没多久但是llvm 4.0发布其实有一段时间了。&lt;/p></description></item><item><title>libatbus的几个藏得很深的bug</title><link>//owent.net/2017/1411.html</link><pubDate>Sun, 23 Apr 2017 23:48:54 +0000</pubDate><guid>//owent.net/2017/1411.html</guid><description>&lt;!-- raw HTML omitted -->
&lt;p>在写这篇文章前，我突然想到以前流行了一段时间的服务器面试题：当一个BUG只有几百万分之一的概率会出现，怎么办？这个问题在这个BUG里只是毛毛雨而已，因为这次的BUG的&lt;strong>出现概率是夸张的三亿分之一&lt;/strong>。&lt;/p></description></item><item><title>重写了llvm+clang+libc++和libc++abi的构建脚本</title><link>//owent.net/2016/1309.html</link><pubDate>Sat, 19 Nov 2016 15:42:21 +0000</pubDate><guid>//owent.net/2016/1309.html</guid><description>&lt;p>由于之前整理的服务器框架已经完成了，就需要用各种静态分析工具跑一遍。原来的llvm+clang的编译脚本是从GCC那个脚本copy过来然后改的，使用的时候各种问题。所以干醋重新折腾一遍，重写了。&lt;/p></description></item><item><title>atsf4g完整游戏工程示例</title><link>//owent.net/2016/1306.html</link><pubDate>Sun, 23 Oct 2016 12:31:14 +0000</pubDate><guid>//owent.net/2016/1306.html</guid><description>&lt;!-- raw HTML omitted -->
&lt;p>近期仍然在搭建完整的游戏服务器架构。基于&lt;a href="https://github.com/atframework/atsf4g-co/">atsf4g（asynchronously-tree server framework fo game）&lt;/a>的完整解决方案终于接近完成。基本框架之前其实已经做完了，但是之前解决的只是基本的框架层代码，不包含任何特定的交互模型、协议模型、配置服务等等。这回就整理了一个只包含登入登出逻辑的完整工程，另外优化了一些小细节和周边工具的支持。&lt;/p></description></item><item><title>atframework基本框架已经完成</title><link>//owent.net/2016/1301.html</link><pubDate>Thu, 22 Sep 2016 17:10:11 +0000</pubDate><guid>//owent.net/2016/1301.html</guid><description>&lt;p>好久没写blog了。最近空闲时间都在加紧完成&lt;a href="https://atframe.work">atframework&lt;/a>框架。总算是搞完了，并且搭建了一个静态介绍页。以后有空慢慢加文档进去。&lt;/p>
&lt;p>主页: &lt;a href="https://atframe.work/">https://atframe.work/&lt;/a>
Github: &lt;a href="https://github.com/atframework/">https://github.com/atframework/&lt;/a>&lt;/p>
&lt;p>目前这个项目已经是一个小型游戏服务器的完整框架，包括服务器间实例的管理、客户端和服务器的内部协议和通信机制。并且实现了纯C的port。
然后&lt;a href="https://github.com/atframework/atsf4g-co/tree/master/sample/atgw_cli_inner_hello">https://github.com/atframework/atsf4g-co/tree/master/sample/atgw_cli_inner_hello&lt;/a>里提供了c++的客户度端的代码示例，&lt;a href="https://github.com/atframework/AtgwInnerCli-CSharp">https://github.com/atframework/AtgwInnerCli-CSharp&lt;/a>里提供了C#的客户端代码示例。
使用的都是同一个纯C的协议porting。这样无论cocos还是unity框架接入都不困难了。其他的框架也可以直接用这个纯C的porting来接入。&lt;/p></description></item><item><title>游戏服务器的不停服更新</title><link>//owent.net/2016/1294.html</link><pubDate>Sun, 31 Jul 2016 17:23:34 +0000</pubDate><guid>//owent.net/2016/1294.html</guid><description>&lt;p>我们目前的游戏第一次测试的时候笔记送匆忙，导致上线之后频繁更新。
比如BOSS战由于大区的人数和预期不一样导致的难度调整，或者是任务链或者数值调整，再加上一些BUG。&lt;/p></description></item><item><title>boost.context-1.61版本的设计模型变化</title><link>//owent.net/2016/1270.html</link><pubDate>Tue, 14 Jun 2016 17:40:29 +0000</pubDate><guid>//owent.net/2016/1270.html</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>之前写了个C++的协程框架&lt;a href="https://github.com/owent/libcopp">libcopp&lt;/a>，底层使用的是boost.context实现，然后剥离了对boost的依赖。然而这样意味着我必须时常跟进&lt;a href="http://www.boost.org/doc/libs/1_61_0/libs/context/doc/html/index.html">boost.context&lt;/a>的更新。&lt;/p>
&lt;p>顺带提一下这个协程库已经在我们线上服务器版本中使用了。&lt;/p>
&lt;p>从最初的boost版本（我忘了从哪个版本开始了）一直到1.60版本，&lt;a href="http://www.boost.org/doc/libs/1_61_0/libs/context/doc/html/index.html">boost.context&lt;/a>的变化都不大，都只是补全一些新的架构和体系结构，还有就是修复一些小细节的BUG，再就是增加了对valgrind的支持（之前写过一个&lt;a href="//owent.net/2015/1194.html">Merge记录&lt;/a>提到过）。新增的功能也只有&lt;a href="http://www.boost.org/doc/libs/1_61_0/libs/context/doc/html/context/ecv1.html">execution_context&lt;/a>(现在叫execution_context_v1)，这个东西我的&lt;a href="https://github.com/owent/libcopp">libcopp&lt;/a>里其实包含了这个功能，并且本身做得比它要功能丰富，所以没有接入的必要。另外在1.60版本的时候尝试使用Windows里的fiber（当然默认是关闭的），在1.61版本里被移除了。这些细节都不是特别重要，主要还是1.61版本的变化。&lt;/p></description></item><item><title>libatbus基本功能及单元测试终于写完啦</title><link>//owent.net/2016/1214.html</link><pubDate>Fri, 19 Feb 2016 12:44:53 +0000</pubDate><guid>//owent.net/2016/1214.html</guid><description>&lt;h2 id="libatbushttpsgithubcomatframeworklibatbus">&lt;a href="https://github.com/atframework/libatbus">libatbus&lt;/a>&lt;/h2>
&lt;p>经过茫茫长时间的编写+过年在家无聊补充和修正单元测试，再加上这两天的整理，终于把以前的这个关于服务器通信中间件的基本功能和相应的单元测试完成啦。还是可以热烈庆祝一下的。&lt;/p></description></item><item><title>小记最近踩得两个C++坑</title><link>//owent.net/2015/1189.html</link><pubDate>Sat, 25 Jul 2015 14:53:44 +0000</pubDate><guid>//owent.net/2015/1189.html</guid><description>&lt;h1 id="小记最近踩得两个c坑">小记最近踩得两个C++坑&lt;/h1>
&lt;!-- raw HTML omitted -->
&lt;p>记一下最近踩得两个C++独有的暗坑，其中一个和ABI相关。第二个坑其实之前研究过，但是没有实例，这次算是碰到了个典型的实例。&lt;/p>
&lt;h2 id="坑一常量引用失效">坑一：常量引用失效&lt;/h2>
&lt;p>在项目中碰到的实例的大致流程是:&lt;/p></description></item><item><title>Android NDK undefined reference to ___tls_get_addr 错误</title><link>//owent.net/2015/1140.html</link><pubDate>Fri, 06 Feb 2015 20:27:16 +0000</pubDate><guid>//owent.net/2015/1140.html</guid><description>&lt;p>本来看到Android的ndk都开始用gcc4.8和gcc4.9了，而且gcc4.8.1开始支持全部的c++11的特性，我就很happy地用上了。结果出现这么个错误。&lt;/p></description></item><item><title>tolua++内存释放坑</title><link>//owent.net/2015/1133.html</link><pubDate>Thu, 08 Jan 2015 22:03:42 +0000</pubDate><guid>//owent.net/2015/1133.html</guid><description>&lt;!-- raw HTML omitted -->
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>本来想参考下tolua++的对象生命周期维护方式。一不小心发现了一个坑。&lt;/p>
&lt;h2 id="代码追踪">代码追踪&lt;/h2>
&lt;p>我这里用得是tolua++ 1.0.93版本。&lt;/p>
&lt;p>tolua++在new一个类的时候，会把类指针作为userdata传入lua，建立metatable并通过&lt;strong>tolua_classevents&lt;/strong>函数给metatable注册魔术方法。&lt;/p></description></item><item><title>LLVM + Clang + Libcxx + Libcxxabi 工具链编译</title><link>//owent.net/2014/1101.html</link><pubDate>Fri, 12 Sep 2014 19:07:03 +0000</pubDate><guid>//owent.net/2014/1101.html</guid><description>&lt;p>LLVM和Clang工具链的生成配置文件写得比较搓，所以略微麻烦，另外这个脚本没有经过多环境测试，不保证在其他Linux发行版里正常使用。&lt;/p>
&lt;p>&lt;strong>如果第一次执行出现安装失败，可以再执行一次。llvm的安装脚本问题多多&lt;/strong>&lt;/p></description></item><item><title>[libiniloader] Project</title><link>//owent.net/2014/1081.html</link><pubDate>Mon, 14 Jul 2014 19:28:49 +0000</pubDate><guid>//owent.net/2014/1081.html</guid><description>&lt;h2 id="ini-配置读取库发布">INI 配置读取库发布&lt;/h2>
&lt;p>Github地址: &lt;a href="https://github.com/owent/libiniloader">https://github.com/owent/libiniloader&lt;/a>&lt;/p>
&lt;p>OSChina镜像: &lt;a href="http://git.oschina.net/owent/libiniloader">http://git.oschina.net/owent/libiniloader&lt;/a>&lt;/p>
&lt;p>项目中经常会碰到需要读取配置的情况，而用ini配置最大的优势就是简单易懂。
但是现在很多的配置读取库都过于庞大了，比如Boost.PropertyTree，功能很强大，但是基本不会用到里面所有的东西。
另外微软的INI读取，功能不是很强不说，还限制在Windows上，更重要的是API设计得实在不优雅。
于是libiniloader就诞生啦。&lt;/p></description></item><item><title>再议 C++ 11 Lambda表达式</title><link>//owent.net/2014/1060.html</link><pubDate>Tue, 03 Jun 2014 20:55:44 +0000</pubDate><guid>//owent.net/2014/1060.html</guid><description>&lt;h2 id="目录">目录&lt;/h2>
&lt;!-- raw HTML omitted -->
&lt;h2 id="c-的lambda表达式">C++ 的Lambda表达式&lt;/h2>
&lt;p>C++ 11 标准发布，各大编译器都开始支持里面的各种新特性，其中一项比较有意思的就是lambda表达式。&lt;/p>
&lt;h2 id="语法规则">语法规则&lt;/h2>
&lt;p>C++ 11 Lambda表达式的四种声明方式&lt;/p></description></item><item><title>捣鼓一个协程库</title><link>//owent.net/2014/1000.html</link><pubDate>Wed, 05 Mar 2014 21:52:49 +0000</pubDate><guid>//owent.net/2014/1000.html</guid><description>&lt;p>今年准备安安心心写一个协程库。一方面是觉得协程挺有意思，另一方面也是因为C/C++在这方面没有一个非常权威的解决方案。
按照我自己风格还是喜欢C++，所以协程库定名为 libcopp 。
源码托管在 github: &lt;a href="https://github.com/owent/libcopp">https://github.com/owent/libcopp&lt;/a>
镜像托管 &lt;a href="http://git.oschina.net/owent/distinctionpp">http://git.oschina.net/owent/distinctionpp&lt;/a>&lt;/p></description></item><item><title>C++11动态模板参数和type_traits</title><link>//owent.net/2014/971.html</link><pubDate>Mon, 27 Jan 2014 16:27:46 +0000</pubDate><guid>//owent.net/2014/971.html</guid><description>&lt;p>C++11标准里有动态模板参数已经是众所周知的事儿了。但是当时还有个主流编译器还不支持。
但是现在，主要的编译器。VC(Windows),GCC(Windows,Linux),Clang(Mac,IOS)都已经支持了。所以就可以准备用于生产环境了。
type_traits没啥好说的。主要是一些静态检测。主要还是要看动态模板参数和他们两的结合使用上。
动态模版参数标准文档见:
&lt;a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2242.pdf">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2242.pdf&lt;/a>
和
&lt;a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2555.pdf">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2555.pdf&lt;/a>
虽然贴出来了。估计是没人看得。所以就直接说重点。&lt;/p></description></item><item><title>C++又一坑:动态链接库中的全局变量</title><link>//owent.net/2014/962.html</link><pubDate>Sat, 04 Jan 2014 17:30:32 +0000</pubDate><guid>//owent.net/2014/962.html</guid><description>&lt;p>前几天我们项目的日志系统出现了一点问题，但是一直没有时间去深究。
昨天在同事的帮助下，无意中猜了一种可能性，结果还真被我猜中了，于是今天就特别研究了一下，记录下来。&lt;/p></description></item><item><title>VC和GCC成员函数指针实现的研究(三)</title><link>//owent.net/2013/902.html</link><pubDate>Wed, 11 Sep 2013 14:57:15 +0000</pubDate><guid>//owent.net/2013/902.html</guid><description>&lt;p>接上一篇 &lt;a href="https://www.owent.net/2013/896.html">VC和GCC内成员函数指针实现的研究(二)&lt;/a>&lt;/p>
&lt;h2 id="虚继承">虚继承&lt;/h2>
&lt;p>终于到最后的虚继承了。&lt;/p>
&lt;p>测试代码如下:&lt;/p>
&lt;pre>&lt;code class="language-cpp">#include &amp;lt;ctime&amp;gt;
#include &amp;lt;vector&amp;gt;
#include &amp;lt;algorithm&amp;gt;
#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;stdint.h&amp;gt;
#include &amp;lt;cstddef&amp;gt;
#include &amp;lt;string&amp;gt;

class foo_a
{
public:
 virtual ~foo_a(){}
 virtual void info() {
 printf(&amp;quot;%s:%d\n&amp;quot;, __FUNCTION__, __LINE__);
 }

 void print(){
 printf(&amp;quot;%s:%d\n&amp;quot;, __FUNCTION__, __LINE__);
 }
};

class foo_l
{
public:
 int l;
 foo_l(): l(1){}

 virtual void info() {
 printf(&amp;quot;%s:%d\n&amp;quot;, __FUNCTION__, __LINE__);
 }
};

class foo_r: virtual public foo_a
{
public:
 int r;
 foo_r(): r(2){}
};

class foo_c: virtual public foo_l, public foo_r
{
public:
 virtual void info() {
 printf(&amp;quot;%d,%d. %s:%d\n&amp;quot;, l, r, __FUNCTION__, __LINE__);
 }
};


int main(int argc, char* argv[]) {
 void (foo_a::*vptr1)() = &amp;amp;foo_a::info;
 void (foo_l::*vptr2)() = &amp;amp;foo_l::info;
 void (foo_a::*ptr)() = &amp;amp;foo_a::print;

 foo_c c;
 foo_r r;
 foo_a a;

 printf(&amp;quot;pword size = %d\n&amp;quot;, (int)(sizeof(size_t)));
 printf(&amp;quot;address of &amp;amp;foo_a::info = 0x%llxH\n&amp;quot;, &amp;amp;foo_a::info);
 printf(&amp;quot;pointer to &amp;amp;foo_a::info = 0x%llxH\n&amp;quot;, vptr1);
 printf(&amp;quot;sizeof vptr = %d\n&amp;quot;, (int)(sizeof(vptr1)));

 (a.*vptr1)();
 (r.*vptr1)();
 (c.*vptr1)();
 (c.*vptr2)();
 c.info();

 (c.*ptr)();

 return 0;
}
&lt;/code>&lt;/pre>
&lt;h2 id="vc虚继承成员函数指针实现">VC虚继承成员函数指针实现&lt;/h2>
&lt;p>因为是兼容虚继承和非虚继承的，所以赋值的部分的汇编是一样的。这里就不贴了。关键在于执行期它是怎么找到虚基类的。请往下看：&lt;/p></description></item><item><title>VC和GCC成员函数指针实现的研究(二)</title><link>//owent.net/2013/896.html</link><pubDate>Wed, 11 Sep 2013 14:44:06 +0000</pubDate><guid>//owent.net/2013/896.html</guid><description>&lt;p>接上一篇 &lt;a href="https://www.owent.net/2013/890.html">VC和GCC内成员函数指针实现的研究(一)&lt;/a>&lt;/p>
&lt;p>接下来是多重继承，用到的测试代码如下所示:&lt;/p>
&lt;pre>&lt;code class="language-cpp">#include &amp;lt;ctime&amp;gt;
#include &amp;lt;vector&amp;gt;
#include &amp;lt;algorithm&amp;gt;
#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;stdint.h&amp;gt;
#include &amp;lt;cstddef&amp;gt;
#include &amp;lt;string&amp;gt;

class foo_a
{
public:
 virtual ~foo_a(){}
 virtual void info() {
 printf(&amp;quot;%s:%d\n&amp;quot;, __FUNCTION__, __LINE__);
 }
};

class foo_b
{
public:
 virtual ~foo_b(){}

 // 这个函数用于试foo_b的结构与foo_a不同
 // 以防止VC对foo_a和foo_b的`vcall'{8}'的代码合并
 virtual void inspect() { 
 printf(&amp;quot;%s:%d\n&amp;quot;, __FUNCTION__, __LINE__);
 } 

 virtual void info() {
 printf(&amp;quot;%s:%d\n&amp;quot;, __FUNCTION__, __LINE__);
 }

 void print() {
 printf(&amp;quot;%s:%d\n&amp;quot;, __FUNCTION__, __LINE__);
 }
};


class foo_c: public foo_a, public foo_b
{
public:
 virtual void info() {
 printf(&amp;quot;%s:%d\n&amp;quot;, __FUNCTION__, __LINE__);
 }
};


int main(int argc, char* argv[]) {
 void (foo_a::*vptr1)() = &amp;amp;foo_a::info;
 void (foo_b::*vptr2)() = &amp;amp;foo_b::info;
 void (foo_b::*ptr)() = &amp;amp;foo_b::print;

 foo_c c;
 foo_b b;
 foo_a a;

 
 printf(&amp;quot;word size = %d\n&amp;quot;, (int)(sizeof(size_t)));
 printf(&amp;quot;address of &amp;amp;foo_a::info = 0x%llxH\n&amp;quot;, &amp;amp;foo_a::info);
 printf(&amp;quot;pointer to &amp;amp;foo_a::info = 0x%llxH\n&amp;quot;, vptr1);
 printf(&amp;quot;address of &amp;amp;foo_b::info = 0x%llxH\n&amp;quot;, &amp;amp;foo_b::info);
 printf(&amp;quot;pointer to &amp;amp;foo_b::info = 0x%llxH\n&amp;quot;, vptr2);
 printf(&amp;quot;sizeof vptr = %d\n&amp;quot;, (int)(sizeof(vptr1)));

 (a.*vptr1)();
 (b.*vptr2)();
 (c.*vptr1)();
 (c.*vptr2)();

 (c.*ptr)();

 return 0;
}
&lt;/code>&lt;/pre>
&lt;h2 id="vc多重继承成员函数指针实现">VC多重继承成员函数指针实现&lt;/h2>
&lt;p>&lt;img src="p896_img8.png" alt="">&lt;/p></description></item><item><title>VC和GCC内成员函数指针实现的研究(一)</title><link>//owent.net/2013/890.html</link><pubDate>Fri, 06 Sep 2013 12:55:58 +0000</pubDate><guid>//owent.net/2013/890.html</guid><description>&lt;p>最近在《C++对象模型》一书里说到的virtual的成员函数指针，低于128的被cfront编译器认为是虚表偏移量（支持子类对父类函数的覆盖）。VC只是提了下单继承、多继承和虚继承的实现方案不同，GCC没有提及，所以就专门稍微深入分析研究下他们的实现机制。&lt;/p></description></item><item><title>Linux 和 Windows PowerShell 常用工具/命令 记录</title><link>//owent.net/2011/482.html</link><pubDate>Fri, 19 Aug 2011 11:16:55 +0000</pubDate><guid>//owent.net/2011/482.html</guid><description>&lt;h2 id="linux-常用工具">Linux 常用工具&lt;/h2>
&lt;ul>
&lt;li>enca: &lt;a href="http://dl.cihar.com/enca/">http://dl.cihar.com/enca/&lt;/a>   文件名编码转换&lt;/li>
&lt;li>iconv: 文件编码转换&lt;/li>
&lt;li>convmv: 文件名编码转换&lt;/li>
&lt;li>ldd: 查看可执行文件或动态链接库的依赖库&lt;/li>
&lt;li>getconf: 查看配置信息（如getconf LONG_BIT可知当前系统是32位还是64位版本）&lt;/li>
&lt;li>tcpdump: 监视网络服务&lt;/li>
&lt;li>sync: 将缓冲区内容写入磁盘&lt;/li>
&lt;li>&lt;code>echo 3 &amp;gt; /proc/sys/vm/drop_caches&lt;/code>: 手动释放缓存&lt;/li>
&lt;li>nm: 查看符号表&lt;/li>
&lt;li>readelf: 查看ELF信息（Executable and Linkable Format）&lt;/li>
&lt;li>man: 文档&lt;/li>
&lt;li>top/htop: 查看最高占用&lt;/li>
&lt;li>perf: 性能数据采集&lt;/li>
&lt;li>sar: 系统信息采集&lt;/li>
&lt;li>uptime: 系统1分钟、5分钟和15分钟的系统平均负载&lt;/li>
&lt;li>free: 内存使用情况&lt;/li>
&lt;li>iostat: 磁盘IO使用情况&lt;/li>
&lt;li>pidstat: 查看进程状态&lt;/li>
&lt;li>ipcs: 查看共享内存、消息、信号量信息，如：ipcs -m 共享内存&lt;/li>
&lt;li>objdump –CS –l [bin文件]: 不反人类的反编译&lt;/li>
&lt;li>strace: 系统调用跟踪&lt;/li>
&lt;li>pstack: 查看当前调用栈&lt;/li>
&lt;li>lsof： 查看打开的文件&lt;/li>
&lt;li>ip addr: 查看ip地址&lt;/li>
&lt;/ul>
&lt;p>man [章节号] 手册名称:&lt;/p></description></item></channel></rss>