<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Prometheus on I'm OWenT</title><link>//owent.net/tags/prometheus.html</link><description>Recent content in Prometheus on I'm OWenT</description><generator>Hugo</generator><language>zh-cn</language><copyright>&lt;a rel="license" href="https://github.com/owent/blog-hugo/blob/master/LICENSE.md">&lt;img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/80x15.png" />&lt;/a></copyright><lastBuildDate>Wed, 21 May 2025 00:39:45 +0000</lastBuildDate><atom:link href="//owent.net/tags/prometheus/index.xml" rel="self" type="application/rss+xml"/><item><title>指标上报的多线程优化和多拉取源点优化</title><link>//owent.net/2025/2503.html</link><pubDate>Wed, 21 May 2025 00:39:45 +0000</pubDate><guid>//owent.net/2025/2503.html</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>我给我们的服务器框架深度集成了一些可观测性的能力。使用 &lt;a href="https://github.com/open-telemetry/opentelemetry-cpp">opentelemetry-cpp&lt;/a> 作为接入层。
在指标方面，我们允许业务层自由地定制化指标上报和拉取，并以此实现策略控制。上报的时候有Pull模式接口（异步接口），也有Push模式接口（同步接口）。
为了减少 &lt;a href="https://github.com/open-telemetry/opentelemetry-cpp">opentelemetry-cpp&lt;/a> 内部的视图合并开销，性能最佳，我们尽量使用异步接口。
但是这种情况下由于 &lt;a href="https://github.com/open-telemetry/opentelemetry-cpp">opentelemetry-cpp&lt;/a> 内部存在后台Processor线程、Exporter线程等，指标的采集往往需要跨线程操作。
这就要求我们上报代码逻辑需要保证线程安全。&lt;/p></description></item></channel></rss>