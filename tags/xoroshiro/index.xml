<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Xoroshiro on I'm OWenT</title><link>//owent.net/tags/xoroshiro.html</link><description>Recent content in Xoroshiro on I'm OWenT</description><generator>Hugo</generator><language>zh-cn</language><copyright>&lt;a rel="license" href="https://github.com/owent/blog-hugo/blob/master/LICENSE.md">&lt;img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/80x15.png" />&lt;/a></copyright><lastBuildDate>Thu, 18 Oct 2018 13:43:31 +0000</lastBuildDate><atom:link href="//owent.net/tags/xoroshiro/index.xml" rel="self" type="application/rss+xml"/><item><title>2018年的新通用伪随机数算法(xoshiro / xoroshiro)的C++(head only)实现</title><link>//owent.net/2018/1810.html</link><pubDate>Thu, 18 Oct 2018 13:43:31 +0000</pubDate><guid>//owent.net/2018/1810.html</guid><description>&lt;p>前段时间看到说&lt;a href="https://github.com/lua/lua/blob/f59e6a93c0ad38a27a420e51abf8f13d962446b5/lmathlib.c#L571">Lua 5.4&lt;/a>用了一种新的通用随机数算法，替换掉本来内部使用的CRT的随机数引擎。我看了一下大致的实现，CPU和空间复杂度任然保持了一个较低的水平，并且循环节和说是随机性都还不错。我们游戏项目中原本对大量随机数场景的随机数算法使用的是基于线性同余的TAUS88，但是使用过程中发现这个算法分布上还是有一些不是很理想，所以就想把这个新的科研成果也用进我们项目中试试看效果。&lt;/p></description></item></channel></rss>