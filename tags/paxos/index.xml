<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Paxos on I'm OWenT</title><link>//owent.net/tags/paxos.html</link><description>Recent content in Paxos on I'm OWenT</description><generator>Hugo</generator><language>zh-cn</language><copyright>&lt;a rel="license" href="https://github.com/owent/blog-hugo/blob/master/LICENSE.md">&lt;img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/80x15.png" />&lt;/a></copyright><lastBuildDate>Thu, 31 Jan 2019 22:49:50 +0000</lastBuildDate><atom:link href="//owent.net/tags/paxos/index.xml" rel="self" type="application/rss+xml"/><item><title>Google去中心化分布式系统论文三件套(Percolator、Spanner、F1)读后感</title><link>//owent.net/2019/1902.html</link><pubDate>Thu, 31 Jan 2019 22:49:50 +0000</pubDate><guid>//owent.net/2019/1902.html</guid><description>&lt;h1 id="前言">前言&lt;/h1>
&lt;p>之前看过 &lt;a href="https://read.douban.com/ebook/10179010/">《大规模分布式存储系统：原理解析与架构实战》&lt;/a> ，这个系统设计还是挺有意思的，里面提及了Google的一整套系统都有论文，而且现在已经进化到下一代支持分布式跨行事务的关系型数据库系统了。所以一直很想抽时间看看Google的那套去中心化并且可以平行扩容的分布式系统和数据库的论文。之前一些计划中的我自己的项目的优化项都差不多完成了，这段时间就陆陆续续的看完了这三篇Paper，可怜我的渣渣英语，所以看得比较慢。&lt;/p></description></item><item><title>理解Raft算法</title><link>//owent.net/2016/1226.html</link><pubDate>Thu, 17 Mar 2016 21:29:24 +0000</pubDate><guid>//owent.net/2016/1226.html</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>最近在分布式系统一致性方面，&lt;a href="https://raft.github.io/">Raft&lt;/a>算法比较火啊。所以就抽时间看了下这个算法。&lt;/p>
&lt;p>之前已经有&lt;a href="https://zh.wikipedia.org/zh-cn/Paxos%E7%AE%97%E6%B3%95">Paxos算法&lt;/a>，用于解决分布式系统最终一致性问题，而且已经有了&lt;a href="http://http://zookeeper.apache.org/">zookeeper&lt;/a>这个成熟的开源实现。那么这个&lt;a href="https://raft.github.io/">Raft&lt;/a>算法有啥用呢？按照&lt;a href="https://raft.github.io/">Raft&lt;/a>官网的说法，这个算法的错误容忍和性能和&lt;a href="https://zh.wikipedia.org/zh-cn/Paxos%E7%AE%97%E6%B3%95">Paxos算法&lt;/a>类似，但是拥有更加简单易懂的设计。&lt;/p>
&lt;p>看过&lt;a href="https://zh.wikipedia.org/zh-cn/Paxos%E7%AE%97%E6%B3%95">Paxos算法&lt;/a>的童鞋们都知道，这货复杂地和屎一样，为了实现去中心化而考虑了各种复杂的边界条件和时序下的可靠性。而&lt;a href="https://raft.github.io/">Raft&lt;/a>算法则根据实际应用中的需要，简化了设计模型，不采用去中心化设计，而是自动选举中心节点，并且在各种情况和时序下可以保证能够正确的选举出中心节点并保证数据的一致性。而且也正是由于能够选举出唯一的主节点（Leader）使得整个通信流程非常地简单，并且易于理解和维护。&lt;/p>
&lt;p>那么它是如何做到这些的呢？&lt;/p>
&lt;h2 id="基本算法设计">基本算法设计&lt;/h2>
&lt;p>&lt;a href="https://raft.github.io/">Raft&lt;/a>的基本设计可以参照官网介绍 &lt;a href="https://raft.github.io/">https://raft.github.io/&lt;/a>&lt;/p>
&lt;p>官方网站上的图例可以点击节点，然后&lt;strong>模拟&lt;/strong>节点crash或者超时或者收到请求时的通信流程。其实也是一个javascript的简单实现，有利于我们理解&lt;a href="https://raft.github.io/">Raft&lt;/a>算法的流程。&lt;/p></description></item></channel></rss>