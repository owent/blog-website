<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Buildsystem on I'm OWenT</title><link>//owent.net/tags/buildsystem.html</link><description>Recent content in Buildsystem on I'm OWenT</description><generator>Hugo</generator><language>zh-cn</language><copyright>&lt;a rel="license" href="https://github.com/owent/blog-hugo/blob/master/LICENSE.md">&lt;img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/80x15.png" />&lt;/a></copyright><lastBuildDate>Sat, 05 Jun 2021 22:38:45 +0000</lastBuildDate><atom:link href="//owent.net/tags/buildsystem/index.xml" rel="self" type="application/rss+xml"/><item><title>重构基于CMake的构建工具链</title><link>//owent.net/2021/2106.html</link><pubDate>Sat, 05 Jun 2021 22:38:45 +0000</pubDate><guid>//owent.net/2021/2106.html</guid><description>&lt;h2 id="背景">背景&lt;/h2>
&lt;p>对大型项目来说，必然会有很多的依赖项。特别是现代化的组件都会尝试去复用社区资源。而对于C/C++而言，依赖管理一直是一个比较头大的问题。
很多老式的系统和工具都会尝试去走相对标准化的安装过程，比如说用 &lt;a href="https://linux.die.net/man/1/pkg-config">pkg-config&lt;/a> 或者用系统自带的包管理工具装在系统默认路径里。
当然这样很不方便，也不容易定制组件。我使用 &lt;a href="https://cmake.org/">cmake&lt;/a> 比较多，所以一直以来在我的 &lt;a href="https://github.com/atframework">atframework&lt;/a> 项目集中有一个 utility 项目 &lt;a href="https://github.com/atframework/atframe_utils">atframe_utils&lt;/a>，里面包含一些常用的构建脚本。
并且在 &lt;a href="https://github.com/atframework/atsf4g-co">atsf4g-co&lt;/a> 中实现了一些简单的包管理和构建流程。&lt;/p></description></item></channel></rss>