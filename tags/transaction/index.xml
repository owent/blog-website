<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Transaction on I'm OWenT</title><link>//owent.net/tags/transaction.html</link><description>Recent content in Transaction on I'm OWenT</description><generator>Hugo</generator><language>zh-cn</language><copyright>&lt;a rel="license" href="https://github.com/owent/blog-hugo/blob/master/LICENSE.md">&lt;img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/80x15.png" />&lt;/a></copyright><lastBuildDate>Sun, 17 Apr 2022 01:45:45 +0000</lastBuildDate><atom:link href="//owent.net/tags/transaction/index.xml" rel="self" type="application/rss+xml"/><item><title>游戏服务的分布式事务优化（二）- 事务管理</title><link>//owent.net/2022/2204.html</link><pubDate>Sun, 17 Apr 2022 01:45:45 +0000</pubDate><guid>//owent.net/2022/2204.html</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>接上文 &lt;a href="https://owent.net/2022/2203.html">《游戏服务的分布式事务优化（一）- Write Ahead Log(WAL) 模块》&lt;/a>&lt;/p>
&lt;p>在挺久以前我写过一篇分享 &lt;a href="https://owent.net/2020/2005.html">《在游戏服务器中使用分布式事务》&lt;/a> 。当时尝试在我们的游戏服务中引入TCC模型的分布式事务机制，以优化好友和公会服务的一致性流程。
最开始的实现并不通用，后来我对这个事务的实现做了进一步的优化和重构，抽离成了较为通用的模块，并对之前没全部完成的功能做了进一步完善。
此篇为重构内容的第二部分，主要聚焦于事务管理。&lt;/p></description></item><item><title>在游戏服务器中使用分布式事务</title><link>//owent.net/2020/2005.html</link><pubDate>Sat, 27 Jun 2020 12:19:45 +0000</pubDate><guid>//owent.net/2020/2005.html</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>游戏业务通常有个特点是模块相关性非常高，模块之间的联动也非常密集且复杂。要保持各个相关模块的数据一致性，同时又兼顾效率和，没有一个通用的方法。通常的做法是走有损服务（也叫柔性服务）和自动修复的方式。比如支付服务一般的做法是在2PC的基础上增加redo log，对于发放和订单确认这两方，如果失败了会尝试几次补发。又或者好友系统或者公会，因为涉及多个对象的数据相互索引，一些做法是玩家在线的时候定期去检查数据是否正确，如果不正确走修复流程。&lt;/p></description></item></channel></rss>