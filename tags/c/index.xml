<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C on I'm OWenT</title><link>//owent.net/tags/c.html</link><description>Recent content in C on I'm OWenT</description><generator>Hugo</generator><language>zh-cn</language><copyright>&lt;a rel="license" href="https://github.com/owent/blog-hugo/blob/master/LICENSE.md">&lt;img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/80x15.png" />&lt;/a></copyright><lastBuildDate>Tue, 24 Apr 2018 10:58:05 +0000</lastBuildDate><atom:link href="//owent.net/tags/c/index.xml" rel="self" type="application/rss+xml"/><item><title>可执行文件压缩</title><link>//owent.net/2018/1805.html</link><pubDate>Tue, 24 Apr 2018 10:58:05 +0000</pubDate><guid>//owent.net/2018/1805.html</guid><description>&lt;h1 id="前言">前言&lt;/h1>
&lt;p>最近看&lt;a href="https://rust-lang.org/">Rust&lt;/a>相关东西的时候看到一篇关于压缩可执行文件的文章。压缩可执行文件对嵌入式开发特别有用，但是延伸一下用来减少我们游戏行业里预编译的工具二进制包大小和Android/iOS的库也是蛮有用的。&lt;/p>
&lt;p>原文见这里： &lt;a href="https://jamesmunns.com/blog/tinyrocket/">https://jamesmunns.com/blog/tinyrocket/&lt;/a>&lt;/p>
&lt;h1 id="基本流程">基本流程&lt;/h1>
&lt;ol>
&lt;li>Release编译，移除调试符号文件，开启最小化size优化(-Oz)&lt;/li>
&lt;li>使用LLVM的全量LTO&lt;/li>
&lt;li>使用xargo重新编译标准库(std)和核心库(core)（这个C/C++不容易模仿，而且编译选项十分难搞）&lt;/li>
&lt;li>移除&lt;a href="https://github.com/jemalloc/jemalloc">jemalloc&lt;/a>（服务器程序还是留着比较好，内置的malloc实现一般碎片比较厉害。虽然C/C++默认也不是&lt;a href="https://github.com/jemalloc/jemalloc">jemalloc&lt;/a>，很多项目为了新能还是会用它）&lt;/li>
&lt;li>移除panic的详情信息（这个仅适用于&lt;a href="https://rust-lang.org/">Rust&lt;/a>）&lt;/li>
&lt;li>strip（由GNU的&lt;a href="https://www.gnu.org/software/binutils/">binutils&lt;/a>提供），参考命令: &lt;code>strip [二进制]&lt;/code>&lt;/li>
&lt;li>&lt;a href="https://upx.github.io/">UPX&lt;/a>进一步压缩加壳&lt;/li>
&lt;/ol>
&lt;h1 id="尝试改造优化">尝试改造优化&lt;/h1>
&lt;p>然后尝试使用上面的流程改造我们的 &lt;strong>gmtools-cli&lt;/strong> 。原先我是直接开LTO+Release编译的，编出的文件大小为4.4MB（4520728字节）。&lt;/p></description></item><item><title>C++的backtrace</title><link>//owent.net/2018/1801.html</link><pubDate>Mon, 08 Jan 2018 17:55:00 +0000</pubDate><guid>//owent.net/2018/1801.html</guid><description>&lt;h1 id="开始之前">开始之前&lt;/h1>
&lt;p>很多语言的log模块都有一个功能，就是在打log的时候能够追溯调用栈，有的时候对查bug能有点帮助。之前我也想过给我们的log模块加上C++的backtrace的功能，迟迟一直没有做主要是两个原因：一是C++的backtrace在各个平台和编译器上都不太一样，比较冗杂；二是C/C++在编译优化之后，调用行之类的信息和甚至一些函数可能就被优化没了。所以能提供的信息就相当有限。前两天刚好有朋友问有没有提供这个，所以就花了点时间整理了下适配方案。&lt;/p></description></item><item><title>GCC 7和LLVM+Clang+libc++abi 4.0的构建脚本</title><link>//owent.net/2017/1431.html</link><pubDate>Tue, 09 May 2017 11:17:55 +0000</pubDate><guid>//owent.net/2017/1431.html</guid><description>&lt;p>之前的版本发完，有空来更新一下之前的gcc和llvm+clang工具链的编译脚本了。其实GCC 7是才release没多久但是llvm 4.0发布其实有一段时间了。&lt;/p></description></item><item><title>重写了llvm+clang+libc++和libc++abi的构建脚本</title><link>//owent.net/2016/1309.html</link><pubDate>Sat, 19 Nov 2016 15:42:21 +0000</pubDate><guid>//owent.net/2016/1309.html</guid><description>&lt;p>由于之前整理的服务器框架已经完成了，就需要用各种静态分析工具跑一遍。原来的llvm+clang的编译脚本是从GCC那个脚本copy过来然后改的，使用的时候各种问题。所以干醋重新折腾一遍，重写了。&lt;/p></description></item><item><title>小记最近踩得两个C++坑</title><link>//owent.net/2015/1189.html</link><pubDate>Sat, 25 Jul 2015 14:53:44 +0000</pubDate><guid>//owent.net/2015/1189.html</guid><description>&lt;h1 id="小记最近踩得两个c坑">小记最近踩得两个C++坑&lt;/h1>
&lt;p>记一下最近踩得两个C++独有的暗坑，其中一个和ABI相关。第二个坑其实之前研究过，但是没有实例，这次算是碰到了个典型的实例。&lt;/p>
&lt;h2 id="坑一常量引用失效">坑一：常量引用失效&lt;/h2>
&lt;p>在项目中碰到的实例的大致流程是:&lt;/p></description></item><item><title>Redis全异步(HA)Driver设计稿</title><link>//owent.net/2015/1182.html</link><pubDate>Sat, 04 Jul 2015 22:24:46 +0000</pubDate><guid>//owent.net/2015/1182.html</guid><description>&lt;h1 id="redis全异步高可用driver设计稿">Redis全异步高可用Driver设计稿&lt;/h1>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>现在Redis的集群功能已经Release。但是并没有一个官方直接提供的高可用性的API可以使用。有的只有解决方案，Sentinel和Cluster。所以有必要自己设计一套高可用的Driver层以供业务使用。&lt;/p></description></item><item><title>我们的Lua类绑定机制</title><link>//owent.net/2015/1153.html</link><pubDate>Wed, 15 Apr 2015 16:16:39 +0000</pubDate><guid>//owent.net/2015/1153.html</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>最近一个人搞后台，框架底层+逻辑功能茫茫多，扛得比较辛苦，一直没抽出空来写点东西。&lt;/p>
&lt;p>空闲的时间，完善了&lt;a href="https://www.owent.net/2015/1149.html">LLVM+Clang+libc++和libc++abi的编译脚本&lt;/a>。不得不说clang的编译脚本质量比gcc差不是一点点。为了在centos下尽可能编译出更多的功能和llvm的子项目，要各种改各种试才终于自举通过，并且这种情况编出来的二进制大得夸张。不过总算是告一段落。&lt;/p>
&lt;p>因为项目需要，买了本&lt;a href="http://www.duokan.com/book/53962">《Redis的设计与实现》&lt;/a>的电子版，顺便给这本书的作者贡献了一丢丢的Redis文档的翻译。这本书通篇贴代码，有点看blog的感觉，写得还是很简单易懂的。（不过谁告诉我为毛我花了30大洋买完不到半个月就变成10块了，坑爹么不是。T_T）&lt;/p>
&lt;p>另外还零零散散地看了些&lt;a href="http://book.douban.com/subject/3652388/">《程序员的自我修养-链接、装载与库》&lt;/a> 这本书&lt;a href="http://blog.codingnow.com">云风&lt;/a>之前推荐过。并且在我看得这些里国人写得书里，这确实是一本值得推荐，并且不可多得的佳作。&lt;/p></description></item><item><title>Android NDK undefined reference to ___tls_get_addr 错误</title><link>//owent.net/2015/1140.html</link><pubDate>Fri, 06 Feb 2015 20:27:16 +0000</pubDate><guid>//owent.net/2015/1140.html</guid><description>&lt;p>本来看到Android的ndk都开始用gcc4.8和gcc4.9了，而且gcc4.8.1开始支持全部的c++11的特性，我就很happy地用上了。结果出现这么个错误。&lt;/p></description></item><item><title>tolua++内存释放坑</title><link>//owent.net/2015/1133.html</link><pubDate>Thu, 08 Jan 2015 22:03:42 +0000</pubDate><guid>//owent.net/2015/1133.html</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>本来想参考下tolua++的对象生命周期维护方式。一不小心发现了一个坑。&lt;/p>
&lt;h2 id="代码追踪">代码追踪&lt;/h2>
&lt;p>我这里用得是tolua++ 1.0.93版本。&lt;/p>
&lt;p>tolua++在new一个类的时候，会把类指针作为userdata传入lua，建立metatable并通过&lt;strong>tolua_classevents&lt;/strong>函数给metatable注册魔术方法。&lt;/p></description></item><item><title>[libiniloader] Project</title><link>//owent.net/2014/1081.html</link><pubDate>Mon, 14 Jul 2014 19:28:49 +0000</pubDate><guid>//owent.net/2014/1081.html</guid><description>&lt;h2 id="ini-配置读取库发布">INI 配置读取库发布&lt;/h2>
&lt;p>Github地址: &lt;a href="https://github.com/owent/libiniloader">https://github.com/owent/libiniloader&lt;/a>&lt;/p>
&lt;p>OSChina镜像: &lt;a href="http://git.oschina.net/owent/libiniloader">http://git.oschina.net/owent/libiniloader&lt;/a>&lt;/p>
&lt;p>项目中经常会碰到需要读取配置的情况，而用ini配置最大的优势就是简单易懂。
但是现在很多的配置读取库都过于庞大了，比如Boost.PropertyTree，功能很强大，但是基本不会用到里面所有的东西。
另外微软的INI读取，功能不是很强不说，还限制在Windows上，更重要的是API设计得实在不优雅。
于是libiniloader就诞生啦。&lt;/p></description></item><item><title>捣鼓一个协程库</title><link>//owent.net/2014/1000.html</link><pubDate>Wed, 05 Mar 2014 21:52:49 +0000</pubDate><guid>//owent.net/2014/1000.html</guid><description>&lt;p>今年准备安安心心写一个协程库。一方面是觉得协程挺有意思，另一方面也是因为C/C++在这方面没有一个非常权威的解决方案。
按照我自己风格还是喜欢C++，所以协程库定名为 libcopp 。
源码托管在 github: &lt;a href="https://github.com/owent/libcopp">https://github.com/owent/libcopp&lt;/a>
镜像托管 &lt;a href="http://git.oschina.net/owent/distinctionpp">http://git.oschina.net/owent/distinctionpp&lt;/a>&lt;/p></description></item><item><title>C++又一坑:动态链接库中的全局变量</title><link>//owent.net/2014/962.html</link><pubDate>Sat, 04 Jan 2014 17:30:32 +0000</pubDate><guid>//owent.net/2014/962.html</guid><description>&lt;p>前几天我们项目的日志系统出现了一点问题，但是一直没有时间去深究。
昨天在同事的帮助下，无意中猜了一种可能性，结果还真被我猜中了，于是今天就特别研究了一下，记录下来。&lt;/p></description></item><item><title>不知道是哪一年的腾讯马拉松题目 照片评级 解题报告</title><link>//owent.net/2013/930.html</link><pubDate>Fri, 25 Oct 2013 15:45:05 +0000</pubDate><guid>//owent.net/2013/930.html</guid><description>&lt;p>在某个神奇的下午，收到一个垃圾邮件（至少被邮件系统当成了垃圾邮件）。&lt;/p>
&lt;p>结果就一不小心看到了这个充满回忆的ACM模式竞赛，还有咱腾讯的，就忍不住看了一下。&lt;/p></description></item><item><title>Lua 挺好用的样子</title><link>//owent.net/2013/918.html</link><pubDate>Thu, 24 Oct 2013 20:59:44 +0000</pubDate><guid>//owent.net/2013/918.html</guid><description>&lt;p>项目里面引入了Lua，就特别学习了一下。&lt;/p>
&lt;p>其实对于理解Javascipt的人来说，Lua也很容易理解，因为他们太多的地方相像了。&lt;/p>
&lt;p>初步看来，Lua的设计模式和思想很像Javascript，也是原型模型（Javascript里叫&lt;strong>prototype&lt;/strong>，Lua里是&lt;strong>metatable&lt;/strong>）&lt;/p></description></item><item><title>VC和GCC成员函数指针实现的研究(三)</title><link>//owent.net/2013/902.html</link><pubDate>Wed, 11 Sep 2013 14:57:15 +0000</pubDate><guid>//owent.net/2013/902.html</guid><description>&lt;p>接上一篇 &lt;a href="https://www.owent.net/2013/896.html">VC和GCC内成员函数指针实现的研究(二)&lt;/a>&lt;/p>
&lt;h2 id="虚继承">虚继承&lt;/h2>
&lt;p>终于到最后的虚继承了。&lt;/p>
&lt;p>测试代码如下:&lt;/p>
&lt;pre>&lt;code class="language-cpp">#include &amp;lt;ctime&amp;gt;
#include &amp;lt;vector&amp;gt;
#include &amp;lt;algorithm&amp;gt;
#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;stdint.h&amp;gt;
#include &amp;lt;cstddef&amp;gt;
#include &amp;lt;string&amp;gt;

class foo_a
{
public:
 virtual ~foo_a(){}
 virtual void info() {
 printf(&amp;quot;%s:%d\n&amp;quot;, __FUNCTION__, __LINE__);
 }

 void print(){
 printf(&amp;quot;%s:%d\n&amp;quot;, __FUNCTION__, __LINE__);
 }
};

class foo_l
{
public:
 int l;
 foo_l(): l(1){}

 virtual void info() {
 printf(&amp;quot;%s:%d\n&amp;quot;, __FUNCTION__, __LINE__);
 }
};

class foo_r: virtual public foo_a
{
public:
 int r;
 foo_r(): r(2){}
};

class foo_c: virtual public foo_l, public foo_r
{
public:
 virtual void info() {
 printf(&amp;quot;%d,%d. %s:%d\n&amp;quot;, l, r, __FUNCTION__, __LINE__);
 }
};


int main(int argc, char* argv[]) {
 void (foo_a::*vptr1)() = &amp;amp;foo_a::info;
 void (foo_l::*vptr2)() = &amp;amp;foo_l::info;
 void (foo_a::*ptr)() = &amp;amp;foo_a::print;

 foo_c c;
 foo_r r;
 foo_a a;

 printf(&amp;quot;pword size = %d\n&amp;quot;, (int)(sizeof(size_t)));
 printf(&amp;quot;address of &amp;amp;foo_a::info = 0x%llxH\n&amp;quot;, &amp;amp;foo_a::info);
 printf(&amp;quot;pointer to &amp;amp;foo_a::info = 0x%llxH\n&amp;quot;, vptr1);
 printf(&amp;quot;sizeof vptr = %d\n&amp;quot;, (int)(sizeof(vptr1)));

 (a.*vptr1)();
 (r.*vptr1)();
 (c.*vptr1)();
 (c.*vptr2)();
 c.info();

 (c.*ptr)();

 return 0;
}
&lt;/code>&lt;/pre>
&lt;h2 id="vc虚继承成员函数指针实现">VC虚继承成员函数指针实现&lt;/h2>
&lt;p>因为是兼容虚继承和非虚继承的，所以赋值的部分的汇编是一样的。这里就不贴了。关键在于执行期它是怎么找到虚基类的。请往下看：&lt;/p></description></item><item><title>VC和GCC成员函数指针实现的研究(二)</title><link>//owent.net/2013/896.html</link><pubDate>Wed, 11 Sep 2013 14:44:06 +0000</pubDate><guid>//owent.net/2013/896.html</guid><description>&lt;p>接上一篇 &lt;a href="https://www.owent.net/2013/890.html">VC和GCC内成员函数指针实现的研究(一)&lt;/a>&lt;/p>
&lt;p>接下来是多重继承，用到的测试代码如下所示:&lt;/p>
&lt;pre>&lt;code class="language-cpp">#include &amp;lt;ctime&amp;gt;
#include &amp;lt;vector&amp;gt;
#include &amp;lt;algorithm&amp;gt;
#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;stdint.h&amp;gt;
#include &amp;lt;cstddef&amp;gt;
#include &amp;lt;string&amp;gt;

class foo_a
{
public:
 virtual ~foo_a(){}
 virtual void info() {
 printf(&amp;quot;%s:%d\n&amp;quot;, __FUNCTION__, __LINE__);
 }
};

class foo_b
{
public:
 virtual ~foo_b(){}

 // 这个函数用于试foo_b的结构与foo_a不同
 // 以防止VC对foo_a和foo_b的`vcall'{8}'的代码合并
 virtual void inspect() { 
 printf(&amp;quot;%s:%d\n&amp;quot;, __FUNCTION__, __LINE__);
 } 

 virtual void info() {
 printf(&amp;quot;%s:%d\n&amp;quot;, __FUNCTION__, __LINE__);
 }

 void print() {
 printf(&amp;quot;%s:%d\n&amp;quot;, __FUNCTION__, __LINE__);
 }
};


class foo_c: public foo_a, public foo_b
{
public:
 virtual void info() {
 printf(&amp;quot;%s:%d\n&amp;quot;, __FUNCTION__, __LINE__);
 }
};


int main(int argc, char* argv[]) {
 void (foo_a::*vptr1)() = &amp;amp;foo_a::info;
 void (foo_b::*vptr2)() = &amp;amp;foo_b::info;
 void (foo_b::*ptr)() = &amp;amp;foo_b::print;

 foo_c c;
 foo_b b;
 foo_a a;

 
 printf(&amp;quot;word size = %d\n&amp;quot;, (int)(sizeof(size_t)));
 printf(&amp;quot;address of &amp;amp;foo_a::info = 0x%llxH\n&amp;quot;, &amp;amp;foo_a::info);
 printf(&amp;quot;pointer to &amp;amp;foo_a::info = 0x%llxH\n&amp;quot;, vptr1);
 printf(&amp;quot;address of &amp;amp;foo_b::info = 0x%llxH\n&amp;quot;, &amp;amp;foo_b::info);
 printf(&amp;quot;pointer to &amp;amp;foo_b::info = 0x%llxH\n&amp;quot;, vptr2);
 printf(&amp;quot;sizeof vptr = %d\n&amp;quot;, (int)(sizeof(vptr1)));

 (a.*vptr1)();
 (b.*vptr2)();
 (c.*vptr1)();
 (c.*vptr2)();

 (c.*ptr)();

 return 0;
}
&lt;/code>&lt;/pre>
&lt;h2 id="vc多重继承成员函数指针实现">VC多重继承成员函数指针实现&lt;/h2>
&lt;p>&lt;img src="p896_img8.png" alt="">&lt;/p></description></item><item><title>VC和GCC内成员函数指针实现的研究(一)</title><link>//owent.net/2013/890.html</link><pubDate>Fri, 06 Sep 2013 12:55:58 +0000</pubDate><guid>//owent.net/2013/890.html</guid><description>&lt;p>最近在《C++对象模型》一书里说到的virtual的成员函数指针，低于128的被cfront编译器认为是虚表偏移量（支持子类对父类函数的覆盖）。VC只是提了下单继承、多继承和虚继承的实现方案不同，GCC没有提及，所以就专门稍微深入分析研究下他们的实现机制。&lt;/p></description></item><item><title>一个C++关于成员变量偏移地址的小Trick</title><link>//owent.net/2013/879.html</link><pubDate>Mon, 26 Aug 2013 14:16:37 +0000</pubDate><guid>//owent.net/2013/879.html</guid><description>&lt;p>今天看到一个小例子，发现了一个小trick。见代码：&lt;/p>
&lt;pre>&lt;code class="language-cpp">#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;cstdlib&amp;gt;

class base_1
{
public:
 int a;
};

class base_2
{
public:
 int b;
};

class base_3: public base_1, public base_2
{
public:
 int c;
};

int main(int argc, char* argv[]) {

 printf(&amp;quot;&amp;amp;base_1::a = %p\n&amp;quot;, &amp;amp;base_1::a);
 printf(&amp;quot;&amp;amp;base_2::b = %p\n&amp;quot;, &amp;amp;base_2::b);
 printf(&amp;quot;&amp;amp;base_3::a = %p\n&amp;quot;, &amp;amp;base_3::a);
 printf(&amp;quot;&amp;amp;base_3::b = %p\n&amp;quot;, &amp;amp;base_3::b);
 printf(&amp;quot;&amp;amp;base_3::c = %p\n&amp;quot;, &amp;amp;base_3::c);


 base_3 t;
 t.a = 1;
 t.b = 2;
 t.c = 3;

 typedef int (base_3::*tip);
 tip pm = NULL;

 printf(&amp;quot;base_3::a = %d\n&amp;quot;, t.base_3::a);
 printf(&amp;quot;base_3::b = %d\n&amp;quot;, t.base_3::b);
 printf(&amp;quot;base_3::c = %d\n&amp;quot;, t.base_3::c);

 pm = &amp;amp;base_3::a;
 printf(&amp;quot;base_3::a(%p) = %d(ptr)\n&amp;quot;, pm, t.*pm);
 pm = &amp;amp;base_3::b;
 printf(&amp;quot;base_3::b(%p) = %d(ptr)\n&amp;quot;, pm, t.*pm);
 pm = &amp;amp;base_3::c;
 printf(&amp;quot;base_3::c(%p) = %d(ptr)\n&amp;quot;, pm, t.*pm);

 return 0;
}
&lt;/code>&lt;/pre>
&lt;p>猜猜看这个代码输出什么？
答案是：&lt;/p></description></item><item><title>ptmalloc,tcmalloc和jemalloc内存分配策略研究</title><link>//owent.net/2013/867.html</link><pubDate>Wed, 31 Jul 2013 13:02:53 +0000</pubDate><guid>//owent.net/2013/867.html</guid><description>&lt;p>最近看了glibc的ptmaoolc，Goolge的tcmalloc和jemalloc，顺便做了一点记录。可能有些地方理解地不太对，如有发现还请大神指出。&lt;/p></description></item><item><title>Boost.Spirit 初体验</title><link>//owent.net/2012/674.html</link><pubDate>Thu, 08 Nov 2012 18:57:34 +0000</pubDate><guid>//owent.net/2012/674.html</guid><description>&lt;p>使用代码生成代码是一件十分美妙的事情，于是有了各种代码生成器。但是生成代码，意味着要有对生成规则的分析和处理。
Boost.Spirit 就是这么一个语法分析工具，它实现了对&lt;strong>上下文无关文法的LL分析&lt;/strong>。支持&lt;strong>EBNF(扩展巴科斯范式)&lt;/strong>。
Boost.Spirit 的使用真的是把模板嵌套用到了极致。确实这么做造成了非常强的扩展性，生成的代码也非常高效，但是嵌套的太复杂了，对于初学者而言真心难看懂。
你能想象在学习阶段一个不是太明白的错误导致编译器报出的几十层模板嵌套错误信息的感受吗？而且，这么复杂的模板嵌套还直接导致了编译速度的巨慢无比。
其实在之前，我已经使用过Spirit的Classic版本，即1.X版本，但是过多的复制操作让我觉得当时用得很低效，还好分析的内容并不复杂所以没。体现出来
这回就来研究下功能更强劲的2.X 版本。&lt;/p></description></item><item><title>C++ 新特性学习（二） -- Array、Tuple和Hash库</title><link>//owent.net/2011/518.html</link><pubDate>Fri, 14 Oct 2011 12:17:17 +0000</pubDate><guid>//owent.net/2011/518.html</guid><description>&lt;p>这回的两个库没怎么用过，这里的记录就用VC++写了，使用G++和BOOST的时候和智能指针类似。&lt;/p>
&lt;p>首先是&lt;strong>Tuple&lt;/strong>库&lt;/p>
&lt;p>要注意的是这里G++，VC++和BOOST库的函数不太一样，所以使用的时候要注意没有使用到编译器和编译器相关的函数（特别是IDE的弹窗的方法要注意）。&lt;/p></description></item><item><title>C++ 新特性学习（一） -- 概述+智能指针（smart_ptr）</title><link>//owent.net/2011/508.html</link><pubDate>Fri, 14 Oct 2011 04:12:48 +0000</pubDate><guid>//owent.net/2011/508.html</guid><description>&lt;p>&lt;strong>C++ 0x/11 终于通过了,真是个很爽的消息。于是乎我决定对新的东西系统学习一下。&lt;/strong>&lt;/p>
&lt;p>首先当然要从tr1开始，智能指针实际上我已经用过很多次了，但是为了完整起见，还是写出来记录一下。&lt;/p></description></item><item><title>2011 Google Code Jam 小记</title><link>//owent.net/2011/416.html</link><pubDate>Sun, 22 May 2011 07:46:12 +0000</pubDate><guid>//owent.net/2011/416.html</guid><description>&lt;p>好久没写这种类型的代码，感觉真是退步了很多。
这是我第一次参加Google Code Jam，以前有过报名可是没有做过。
我发现Google Code Jam的题目使用经典算法的几乎没有，都是模拟或者数学题（起码我目前做过的几题是这样）&lt;/p></description></item><item><title>C++总是很神奇</title><link>//owent.net/2011/359.html</link><pubDate>Tue, 26 Apr 2011 07:08:13 +0000</pubDate><guid>//owent.net/2011/359.html</guid><description>&lt;p>很多时候看到C/C++的一些奇妙的应用，每次都是惊奇一点时间就随风飘过了
现在我还是决定记录一下这些有意思的东西。&lt;/p>
&lt;h2 id="201004">2010/04&lt;/h2>
&lt;p>a ^= b ^= a ^=b;
这是一个交换值得有意思的方式&lt;/p></description></item><item><title>常用官方文档整理</title><link>//owent.net/2011/264.html</link><pubDate>Tue, 08 Feb 2011 14:04:26 +0000</pubDate><guid>//owent.net/2011/264.html</guid><description>&lt;p>&lt;strong>网站及网页：&lt;/strong>&lt;/p>
&lt;p>基本知识中文学习站（中）：&lt;a href="http://www.w3school.com.cn">http://www.w3school.com.cn&lt;/a>&lt;/p>
&lt;p>W3C官网（英）：&lt;a href="http://www.w3.org/">http://www.w3.org/&lt;/a>&lt;/p>
&lt;p>HTML 4.01规范（英）：&lt;a href="http://www.w3.org/TR/html4/">http://www.w3.org/TR/html4/&lt;/a>&lt;/p>
&lt;p>XHTML™ 1.1规范（英）：&lt;a href="http://www.w3.org/TR/xhtml11/">http://www.w3.org/TR/xhtml11/&lt;/a>&lt;/p>
&lt;p>CSS官方文档（多国语言）：&lt;a href="http://www.w3.org/Style/CSS/">http://www.w3.org/Style/CSS/&lt;/a>&lt;/p></description></item><item><title>常用官方文档整理</title><link>//owent.net/2011/264.html</link><pubDate>Tue, 08 Feb 2011 14:04:26 +0000</pubDate><guid>//owent.net/2011/264.html</guid><description>&lt;p>&lt;strong>网站及网页：&lt;/strong>&lt;/p>
&lt;p>基本知识中文学习站（中）：&lt;a href="http://www.w3school.com.cn">http://www.w3school.com.cn&lt;/a>&lt;/p>
&lt;p>W3C官网（英）：&lt;a href="http://www.w3.org/">http://www.w3.org/&lt;/a>&lt;/p>
&lt;p>HTML 4.01规范（英）：&lt;a href="http://www.w3.org/TR/html4/">http://www.w3.org/TR/html4/&lt;/a>&lt;/p>
&lt;p>XHTML™ 1.1规范（英）：&lt;a href="http://www.w3.org/TR/xhtml11/">http://www.w3.org/TR/xhtml11/&lt;/a>&lt;/p>
&lt;p>CSS官方文档（多国语言）：&lt;a href="http://www.w3.org/Style/CSS/">http://www.w3.org/Style/CSS/&lt;/a>&lt;/p></description></item><item><title>C#格式化输出(记录)</title><link>//owent.net/2010/26.html</link><pubDate>Tue, 08 Jun 2010 05:39:06 +0000</pubDate><guid>//owent.net/2010/26.html</guid><description>&lt;pre>&lt;code class="language-cs">int a = 12345678;
//格式为sring输出
Label1.Text = string.Format(&amp;quot;asdfadsf{0}adsfasdf&amp;quot;,a);
Label2.Text = &amp;quot;asdfadsf&amp;quot;+a.ToString()+&amp;quot;adsfasdf&amp;quot;;
Label1.Text = string.Format(&amp;quot;asdfadsf{0:C}adsfasdf&amp;quot;,a);//asdfadsf￥1,234.00adsfasdf
Label2.Text = &amp;quot;asdfadsf&amp;quot;+a.ToString(&amp;quot;C&amp;quot;)+&amp;quot;adsfasdf&amp;quot;;//asdfadsf￥1,234.00adsfasdf
double b = 1234.12543;
int a = 12345678;
//格式为特殊的string样式输出
Label1.Text = string.Format(&amp;quot;asdfadsf{0:C}adsfasdf&amp;quot;,b);//asdfadsf￥1,234.13adsfasdf
Label2.Text = &amp;quot;asdfadsf&amp;quot;+b.ToString(&amp;quot;C&amp;quot;)+&amp;quot;adsfasdf&amp;quot;;//asdfadsf￥1,234.13adsfasdf
Label1.Text = string.Format(&amp;quot;{0:C3}&amp;quot;,b);//￥1,234.125
Label2.Text = b.ToString(&amp;quot;C3&amp;quot;);//￥1,234.125
Label1.Text = string.Format(&amp;quot;{0:d}&amp;quot;,a);//十进制--12345678
Label2.Text = b.ToString(&amp;quot;d&amp;quot;);//十进制--相同的类型，转换报错
Label1.Text = string.Format(&amp;quot;{0:e}&amp;quot;,a);//指数--1.234568e+007
Label2.Text = b.ToString(&amp;quot;e&amp;quot;);//指数--1.234125e+003
Label1.Text = string.Format(&amp;quot;{0:f}&amp;quot;,a);//定点数--12345678.00
Label2.Text = b.ToString(&amp;quot;f&amp;quot;);//定点数--1234.13
Label1.Text = string.Format(&amp;quot;{0:n}&amp;quot;,a);//数值--12,345,678.00
Label2.Text = b.ToString(&amp;quot;n&amp;quot;);//数值--1,234.13
Label1.Text = string.Format(&amp;quot;{0:x}&amp;quot;,a);//十六进制--bc614e
Label2.Text = b.ToString(&amp;quot;x&amp;quot;);//16--带有小数不能转换，出错
Label1.Text = string.Format(&amp;quot;{0:g}&amp;quot;,a);//通用为最紧凑--12345678
Label2.Text = b.ToString(&amp;quot;g&amp;quot;);//通用为最紧凑--1234.12543
Label1.Text = string.Format(&amp;quot;{0:r}&amp;quot;,a);//转来转去不损失精度--整数不允许用，报错
Label2.Text = b.ToString(&amp;quot;r&amp;quot;);//转来转去不损失精度--1234.12543
double b = 4321.12543;
int a = 1234;
自定义模式输出：
//&amp;quot;0&amp;quot;描述：占位符，如果可能，填充位
Label1.Text = string.Format(&amp;quot;{0:000000}&amp;quot;,a);// 001234
Label2.Text = string.Format(&amp;quot;{0:000000}&amp;quot;,b);// 004321
//&amp;quot;#&amp;quot;描述：占位符，如果可能，填充位
Label1.Text = string.Format(&amp;quot;{0:####### }&amp;quot;,a);// 1234
Label2.Text = string.Format(&amp;quot;{0:####### }&amp;quot;,b);// 4321
Label1.Text = string.Format(&amp;quot;{0:#0#### }&amp;quot;,a);// 01234
Label2.Text = string.Format(&amp;quot;{0:0#0000}&amp;quot;,b);// 004321
//&amp;quot;.&amp;quot;描述：小数点
Label1.Text = string.Format(&amp;quot;{0:000.000}&amp;quot;,a);//1234.000
Label2.Text = string.Format(&amp;quot;{0:000.000}&amp;quot;,b);//4321.125
double b = 87654321.12543;
int a = 12345678;
//&amp;quot;,&amp;quot;描述：数字分组，也用于增倍器
Label1.Text = string.Format(&amp;quot;{0:0,00}&amp;quot;,a);// 12,345,678
Label2.Text = string.Format(&amp;quot;{0:0,00}&amp;quot;,b);// 87,654,32
Label1.Text = string.Format(&amp;quot;{0:0,}&amp;quot;,a);// 12346
Label2.Text = string.Format(&amp;quot;{0:0,}&amp;quot;,b);// 87654
Label1.Text = string.Format(&amp;quot;{0:0,,}&amp;quot;,a);// 12
Label2.Text = string.Format(&amp;quot;{0:0,,}&amp;quot;,b);// 88
Label1.Text = string.Format(&amp;quot;{0:0,,,}&amp;quot;,a);// 0
Label2.Text = string.Format(&amp;quot;{0:0,,,}&amp;quot;,b);// 0
//&amp;quot;%&amp;quot;描述：格式为百分数
Label1.Text = string.Format(&amp;quot;{ 0:0% }&amp;quot;,a);// 1234567800%
Label2.Text = string.Format(&amp;quot;{ 0:#% }&amp;quot;,b);// 8765432113%
Label1.Text = string.Format(&amp;quot;{ 0:0.00% }&amp;quot;,a);// 1234567800.00%
Label2.Text = string.Format(&amp;quot;{ 0:#.00% }&amp;quot;,b);// 8765432112.54%
//&amp;quot;abc&amp;quot;描述：显示单引号内的文本
Label1.Text = string.Format(&amp;quot;{0:'文本'0}&amp;quot;,a);// 文本12345678
Label2.Text = string.Format(&amp;quot;{0:文本0}&amp;quot;,b);// 文本87654321
//&amp;quot;\&amp;quot;描述：后跟1要打印字的字符，也用于转移符\n等
Label1.Text = string.Format(&amp;quot;\&amp;quot;你好！\&amp;quot;&amp;quot;);// &amp;quot;你好！&amp;quot;
Label2.Text = string.Format(&amp;quot;[url=file://\\c\\books\\new\\we.asp]\\c\\books\\new\\we.asp&amp;quot;);//\c\books\new\we.asp
//&amp;quot;@&amp;quot;描述：后跟要打印字的字符,
Label1.Text = string.Format(@&amp;quot;&amp;quot;&amp;quot;你好！&amp;quot;&amp;quot;&amp;quot;); // &amp;quot;你好！&amp;quot;要打印&amp;quot;则需要输入两对才可以
Label2.Text = string.Format(@&amp;quot;\c\books\new\we.asp&amp;quot;);//\c\books\new\we.asp 
&lt;/code>&lt;/pre></description></item><item><title>C/C++语言常用排序算法</title><link>//owent.net/2009/89.html</link><pubDate>Mon, 20 Jul 2009 12:31:10 +0000</pubDate><guid>//owent.net/2009/89.html</guid><description>&lt;p>资料由互联网收集整理，供新手参考学习
这里又生动点的演示：http://www.cnblogs.com/wangfupeng1988/archive/2011/12/26/2302216.html&lt;/p></description></item></channel></rss>