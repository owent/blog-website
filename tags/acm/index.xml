<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>acm on I&#39;m OWenT</title><link>//owent.net/tags/acm.html</link><description>Recent content in acm on I&#39;m OWenT</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><managingEditor>admin@owent.net (OWenT)</managingEditor><webMaster>admin@owent.net (OWenT)</webMaster><lastBuildDate>Mon, 28 Apr 2014 21:10:46 +0000</lastBuildDate><atom:link href="//owent.net/tags/acm/index.xml" rel="self" type="application/rss+xml"/><item><title>[ACM] HDU 1006 解题报告</title><link>//owent.net/2014/1046.html</link><pubDate>Mon, 28 Apr 2014 21:10:46 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2014/1046.html</guid><description>偶尔写写ACM水题还是挺好玩的。(好吧其实是老婆求助我才看滴) 题目链接：http://acm.hdu.edu.cn/showproblem.</description></item><item><title>不知道是哪一年的腾讯马拉松题目 照片评级 解题报告</title><link>//owent.net/2013/930.html</link><pubDate>Fri, 25 Oct 2013 15:45:05 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2013/930.html</guid><description>在某个神奇的下午，收到一个垃圾邮件（至少被邮件系统当成了垃圾邮件）。 结果就一不小心看到了这个充满回忆的ACM模式竞赛，还有咱腾讯的，就忍不住</description></item><item><title>POJ 2192 Zipper HDU 2059 龟兔赛跑</title><link>//owent.net/2013/861.html</link><pubDate>Mon, 15 Jul 2013 18:39:41 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2013/861.html</guid><description>今天心情好，刷了两到ACM水题，思路很简单都在注释里，所以直接贴代码: /** * @file 龟兔赛跑.cpp * @brief 龟兔赛跑 AC代码 (DP) * DP方程式: [到第i的充</description></item><item><title>AC自动机</title><link>//owent.net/2012/652.html</link><pubDate>Tue, 28 Aug 2012 20:10:27 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2012/652.html</guid><description>某个课程的作业，促使我来看看这玩意。 整个程序的算法思想是看别人的ACM的blog看懂的，感觉确实和KMP很像。但是代码呢就比较工程化一点。顺</description></item><item><title>忆往昔ECUST的ACM时代</title><link>//owent.net/2012/587.html</link><pubDate>Sat, 07 Apr 2012 10:37:44 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2012/587.html</guid><description>最初是接受了lpld的邀请来写这篇大总结。我没有LHH华丽的文笔，就只能随便写写了。回想起来，ACM应该是我在大学期间参加的最有意义并且收获</description></item><item><title>2010 ACM 赛前笔记</title><link>//owent.net/2010/7.html</link><pubDate>Thu, 14 Oct 2010 06:40:54 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2010/7.html</guid><description>2010.10.11 要为出发做准备了，今天和Ultramanhu和Answeror一起去买了火车票，真是搞笑了，提前六天去买票，竟然动车没坐票了，难道世博就这</description></item><item><title>线段树相关问题 (引用 PKU POJ题目) 整理</title><link>//owent.net/2010/8.html</link><pubDate>Tue, 12 Oct 2010 16:45:11 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2010/8.html</guid><description>1.RangeMinimum、Maximum Query问题（计算单调区间内出现最多（少）的次数） 对元素的起点做离散化，再把离散化后的位置作为</description></item><item><title>POJ PKU 1474 Video Surveillance 解题报告</title><link>//owent.net/2010/10.html</link><pubDate>Mon, 04 Oct 2010 11:49:56 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2010/10.html</guid><description>题目链接：http://poj.org/problem?id=1474 写这题的目的是看完了zzy的论文，写了半平面交，验证一下正确性，结果发</description></item><item><title>ACM 计算几何 个人模板</title><link>//owent.net/2010/11.html</link><pubDate>Mon, 04 Oct 2010 11:19:02 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2010/11.html</guid><description>/** * 二维ACM计算几何模板 * 注意变量类型更改和EPS * #include &amp;lt;cmath&amp;gt; * #include &amp;lt;cstdio&amp;gt; * By OWenT */ const double eps = 1e-8; const double pi = std::acos(-1.0); //点 class point { public: double x, y; point(){}; point(double x, double y):x(x),y(y){}; static int xmult(const point &amp;amp;ps, const point &amp;amp;pe, const</description></item><item><title>The 35th ACM/ICPC Asia Regional Tianjin Site —— Online Contest 1009 Convex 解题报告</title><link>//owent.net/2010/13.html</link><pubDate>Tue, 14 Sep 2010 08:12:26 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2010/13.html</guid><description>The 35th ACM/ICPC Asia Regional Tianjin Site &amp;mdash;&amp;mdash; Online Contest 2010年天津赛 网络赛 I题 Convex 题目链接：http://acm.hdu.edu.cn/showproblem.php?pid</description></item><item><title>Catalan 数</title><link>//owent.net/2010/15.html</link><pubDate>Wed, 08 Sep 2010 16:47:57 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2010/15.html</guid><description>Catalan数: $$ h(1)=1,h(0)=1 $$ $$ h(n)=\begin{cases} \sum_{i=0}^{n-1} h(i) \times h(n-i-1) &amp;amp; \text{if }(n&amp;gt;=2) \\ \frac{C(2n,n)}{n+1} &amp;amp; \text{if }(n=1,2,3,\mathellipsis) \end{cases} $$ 相关结论： n边形能分解成三角形的分法数为 h(n – 2) n个节点能组成的二叉树个数为 h(n) 一个栈(</description></item><item><title>简易四则运算(ACM个人模板)</title><link>//owent.net/2010/17.html</link><pubDate>Tue, 10 Aug 2010 18:40:31 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2010/17.html</guid><description>/** * 简易四则运算（栈实现） * #include &amp;lt;stack&amp;gt; * #include &amp;lt;cstring&amp;gt; */ std::stack&amp;lt;char&amp;gt; opr; std::stack&amp;lt;double&amp;gt; num; char oprPRI[256]; //初始化调用 void initCalc() { //优先级设置 char oprMap[7][2] = { {&#39;+&#39;, 1}, {&#39;-&#39;, 1}, {&#39;*&#39;, 2}, {&#39;/&#39;, 2}, {&#39;^&#39;, 3}, {&#39;(&#39;, 100}, {&#39;)&#39;, 0} }; for(int i = 0; i &amp;lt; 7; i</description></item><item><title>数论模板（个人模板）</title><link>//owent.net/2010/18.html</link><pubDate>Mon, 09 Aug 2010 15:54:02 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2010/18.html</guid><description>基础函数: // 最大公约数,欧几里得定理 int gcd(int a, int b) { return b?gcd(b, a % b): a; } // 拓展欧几里得定理 // 求解ax + by = gcd(a,b) int ext_gcd(int a, int b, int &amp;amp;x, int &amp;amp;y) { int tmp, ret; if(!b) { x = 1; y = 0;</description></item><item><title>POJ PKU 2826 An Easy Problem?! 解题报告</title><link>//owent.net/2010/19.html</link><pubDate>Sat, 07 Aug 2010 08:54:04 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2010/19.html</guid><description>题目链接： http://acm.pku.edu.cn/JudgeOnline/problem?id=2826 大致意思是给你两条线段，问组成的开口向上的V形区域能盛多少雨水。雨水是垂直落下的。 显然线段不相交，或者平行，重合，或者有一条斜率</description></item><item><title>关于差分约束（转载）</title><link>//owent.net/2010/20.html</link><pubDate>Mon, 02 Aug 2010 06:49:13 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2010/20.html</guid><description>关于差分约束（转载） （本文假设读者已经有以下知识：最短路径的基本性质、Bellman-Ford算法。） 比如有这样一组不等式： $$ \begin{cases} X1 - X2 &amp;lt;= 0 \\</description></item><item><title>计算几何算法概览[转载]</title><link>//owent.net/2010/21.html</link><pubDate>Sat, 24 Jul 2010 16:40:14 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2010/21.html</guid><description>一、引言 计算机的出现使得很多原本十分繁琐的工作得以大幅度简化，但是也有一些在人们直观看来很容易的问题却需要拿出一套并不简单的通用解决方案，比</description></item><item><title>POJ PKU 1986 Distance Queries 解题报告</title><link>//owent.net/2010/22.html</link><pubDate>Fri, 16 Jul 2010 04:57:10 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2010/22.html</guid><description>题目链接：http://acm.pku.edu.cn/JudgeOnline/problem?id=1986 这是一道并查集+树的题，采用Ta</description></item><item><title>POJ PKU 2446 Chessboard 解题报告</title><link>//owent.net/2010/23.html</link><pubDate>Fri, 16 Jul 2010 04:51:23 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2010/23.html</guid><description>题目链接：http://acm.pku.edu.cn/JudgeOnline/problem?id=2446 这是一道匹配题，把行数（r）和列</description></item><item><title>USACO 2008 March Gold Cow Jogging 解题报告</title><link>//owent.net/2010/27.html</link><pubDate>Wed, 02 Jun 2010 17:31:57 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2010/27.html</guid><description>题目链接：http://202.120.106.94/onlinejudge/problemshow.php?pro_id=143 这道题嘛，</description></item><item><title>POJ PKU 3659 Cell Phone Network 解题报告</title><link>//owent.net/2010/28.html</link><pubDate>Tue, 01 Jun 2010 15:51:00 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2010/28.html</guid><description>题目链接：http://acm.pku.edu.cn/JudgeOnline/problem?id=3659 这题不算难题了，基本算是中等题 题</description></item><item><title>浙江理工 省赛总结 team62 By OWenT of Coeus</title><link>//owent.net/2010/29.html</link><pubDate>Mon, 10 May 2010 16:45:14 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2010/29.html</guid><description>这次比赛成绩比预期差 开始Ultramanhu调整IDE Q Boy从头开始看题 我的任务是倒数看题，最后看的题目是J，I，H，G 我看完J觉得J可做</description></item><item><title>树状数组模块(个人模板)</title><link>//owent.net/2010/30.html</link><pubDate>Thu, 06 May 2010 13:51:29 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2010/30.html</guid><description>树状数组模块 ACM个人模板 POJ 2155 题目测试通过 /** * 树状数组模块 * 下标从0开始 */ typedef long DG_Ran; typedef long DG_Num; const DG_Num DG_MAXN = 1005; //2^n DG_Num LowBit(DG_Num n) { return n &amp;amp; (-n); } //获取父节点索引 DG_Num DGFather(DG_Num n)</description></item><item><title>HDU HDOJ 3398 String 解题报告</title><link>//owent.net/2010/31.html</link><pubDate>Wed, 05 May 2010 16:51:22 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2010/31.html</guid><description>题目链接：http://acm.hdu.edu.cn/showproblem.php?pid=3398 题目要我们计算1，0的排列方式总数，并</description></item><item><title>线性筛法求质数(素数)表 及其原理</title><link>//owent.net/2010/32.html</link><pubDate>Mon, 03 May 2010 11:20:33 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2010/32.html</guid><description>/** * 线性筛法求素数表 * 复杂度: O(n) */ const long MAXP = 1000000; long prime[MAXP] = {0},num_prime = 0; int isNotPrime[MAXP] = {1, 1}; void GetPrime_Init()//初始化调用 { for(long i = 2 ; i &amp;lt; MAXP ; i ++) { if(!</description></item><item><title>HDU HDOJ 3400 Line belt 解题报告</title><link>//owent.net/2010/33.html</link><pubDate>Mon, 03 May 2010 11:17:15 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2010/33.html</guid><description>题目链接：http://acm.hdu.edu.cn/showproblem.php?pid=3400 这题就是一道简单的两重三分 首先设e点为</description></item><item><title>Southeastern European 2008 Sky Code 解题报告</title><link>//owent.net/2010/34.html</link><pubDate>Thu, 29 Apr 2010 12:08:10 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2010/34.html</guid><description>又是我们的OJ 题目链接： http://www.cn210.com/onlinejudge/problemshow.php?pro_id=92 Description tancu likes space travels but he is a poor software developer and will never be able to buy his own spacecraft. That is why he is preparing to steal the spacecraft of Petru. There is only one problem - Petru has locked the spacecraft with a sophisticated cryptosystem based on the ID numbers of the stars</description></item><item><title>GCD Determinant 解题报告</title><link>//owent.net/2010/35.html</link><pubDate>Mon, 26 Apr 2010 14:33:11 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2010/35.html</guid><description>http://www.cn210.com/onlinejudge/problemshow.php?pro_id=98 我们的OJ Description We say that a set&amp;nbsp;S&amp;nbsp;= {x1,&amp;nbsp;x2, ...,&amp;nbsp;xn} is factor closed if for any&amp;nbsp;xi&amp;nbsp;&amp;isin;&amp;nbsp;S&amp;nbsp;and any divisor&amp;nbsp;d&amp;nbsp;of&amp;nbsp;xi&amp;nbsp;we have&amp;nbsp;d&amp;nbsp;&amp;isin;&amp;nbsp;S. Let&amp;#39;s build a GCD matrix (S) = (sij), wheresij&amp;nbsp;= GCD(xi,&amp;nbsp;xj) - the greatest common divisor of&amp;nbsp;xi&amp;nbsp;and&amp;nbsp;xj. Given the factor closed set&amp;nbsp;S, find the value of the determinant:&amp;nbsp; &amp;nbsp; Input The input contains several test cases. Each test case starts with an integer&amp;nbsp;n&amp;nbsp;(0 &amp;lt;&amp;nbsp;n&amp;nbsp;&amp;lt; 1000), that stands for</description></item><item><title>PKU POJ 3757 Simple Distributed storage system 解题报告</title><link>//owent.net/2010/41.html</link><pubDate>Sat, 10 Apr 2010 17:10:47 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2010/41.html</guid><description>题目链接：http://acm.pku.edu.cn/JudgeOnline/problem?id=3757 题目大意 第一行输入n，k，f表示</description></item><item><title>PKU POJ 2976 Dropping tests 解题报告</title><link>//owent.net/2010/43.html</link><pubDate>Fri, 09 Apr 2010 17:04:09 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2010/43.html</guid><description>题目链接：&amp;nbsp;http://acm.pku.edu.cn/JudgeOnline/problem?id=2976 0-1分数规划 最优比</description></item><item><title>PKU POJ 2728 Desert King 解题报告</title><link>//owent.net/2010/45.html</link><pubDate>Wed, 07 Apr 2010 10:51:26 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2010/45.html</guid><description>题目链接：http://acm.pku.edu.cn/JudgeOnline/problem?id=2728 和3757一样都是01分数规划的</description></item><item><title>PKU POJ 1141 Brackets Sequence 解题报告</title><link>//owent.net/2010/46.html</link><pubDate>Mon, 05 Apr 2010 16:52:28 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2010/46.html</guid><description>链接: http://acm.pku.edu.cn/JudgeOnline/problem?id=1141 题目意思是输入一些括号，补充括号使之成为没有错误的括号就是只能有括号组在括号组里面，不能出现([)]或者([)]一类的情况 方法是DP</description></item><item><title>POJ PKU 2155 Matrix 解题报告</title><link>//owent.net/2010/47.html</link><pubDate>Mon, 05 Apr 2010 11:01:59 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2010/47.html</guid><description>这道题是我专门为了了解和学习树状数组而写的 这题用树状数组记录翻转次数,然后mod一个2,也可以不断地取反 还要用到二维的树状数组.于是我专门写</description></item><item><title>PKU POJ 1720 SQUARES 解题报告</title><link>//owent.net/2010/48.html</link><pubDate>Sat, 03 Apr 2010 17:12:41 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2010/48.html</guid><description>题目链接：http://acm.pku.edu.cn/JudgeOnline/problem?id=1720 这题纯计算几何就搞定了，开始我写</description></item><item><title>PKU POJ 1724 ROADS 解题报告</title><link>//owent.net/2010/50.html</link><pubDate>Fri, 02 Apr 2010 17:07:50 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2010/50.html</guid><description>看来我的搜索真的很烂，简单的搜索都搞定的这么痛苦 题目链接：http://acm.pku.edu.cn/JudgeOnline/problem</description></item><item><title>POJ PKU Let&#39;s Go to the Movies 解题报告</title><link>//owent.net/2010/52.html</link><pubDate>Wed, 31 Mar 2010 16:04:21 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2010/52.html</guid><description>题目链接：http://acm.pku.edu.cn/JudgeOnline/problem?id=3513 题目大意是输入树状的家庭关系，问</description></item><item><title>ZOJ 3309 Search New Posts 解题报告</title><link>//owent.net/2010/53.html</link><pubDate>Mon, 15 Mar 2010 14:49:52 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2010/53.html</guid><description>题目链接：http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=3309</description></item><item><title>Hash模板 个人模板</title><link>//owent.net/2010/54.html</link><pubDate>Mon, 15 Mar 2010 12:58:47 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2010/54.html</guid><description>/** * Hash模板 * Based: 0 * template&amp;lt;unsigned long _SZ,class _T, unsigned long *pFun(_T _Off)&amp;gt; * class _My_Hash_ToInt * 传入数据大小_SZ,传入类型_T,Hash函数 * 传入类型_T必须重载 = 和 == 符号 * 收录了ELF</description></item><item><title>HDU 3336 Count the string 解题报告</title><link>//owent.net/2010/55.html</link><pubDate>Mon, 15 Mar 2010 11:12:56 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2010/55.html</guid><description>题目： http://acm.hdu.edu.cn/showproblem.php?pid=3336 水题一道，主要是测试数据很水 不解释，贴代码： #include &amp;lt;iostream&amp;gt; #include &amp;lt;cstdio&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;cstring&amp;gt; using namespace std; char str[200005]; vector&amp;lt;long&amp;gt;glo_Pos; int main() { int t; long output,i,n,j; scanf(&amp;quot;%d&amp;quot;,&amp;amp;t); while(t --) { output = 0; glo_Pos.clear(); scanf(&amp;quot;%ld %s&amp;quot;, &amp;amp;n, str); for(i = 0; i &amp;lt; n; i ++) { if(str[i] ==</description></item><item><title>POJ PKU 1065 Wooden Sticks 3636 Nested Dolls 解题报告</title><link>//owent.net/2010/57.html</link><pubDate>Wed, 24 Feb 2010 15:43:54 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2010/57.html</guid><description>3636 Nested Dolls 题目链接：[http://acm.pku.edu.cn/JudgeOnline/problem?id=3636 ](http://acm</description></item><item><title>POJ PKU 3631 Cuckoo Hashing 解题报告</title><link>//owent.net/2010/58.html</link><pubDate>Wed, 24 Feb 2010 10:14:57 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2010/58.html</guid><description>题目链接：http://acm.pku.edu.cn/JudgeOnline/problem?id=3631 我讨厌这么长的题目 这题是模拟那个</description></item><item><title>POJ PKU 2596 Dice Stacking 解题报告</title><link>//owent.net/2010/59.html</link><pubDate>Fri, 19 Feb 2010 12:31:50 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2010/59.html</guid><description>状态压缩+DP 1972的增强版 题目链接：http://acm.pku.edu.cn/JudgeOnline/problem?id=2596 题</description></item><item><title>POJ PKU 1990 MooFest 解题报告</title><link>//owent.net/2009/63.html</link><pubDate>Wed, 23 Dec 2009 14:12:52 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2009/63.html</guid><description>为什么我用线段数这么不灵活呢？ 大概思路是线段数记录某牛之前的坐标小于这个牛的牛的坐标和和牛的个数 然后其他部分线性数组记录 OK，贴代码 #include &amp;lt;iostream&amp;gt; #include &amp;lt;cstdio&amp;gt;</description></item><item><title>POJ PKU 2378 Tree Cutting 解题报告</title><link>//owent.net/2009/64.html</link><pubDate>Wed, 23 Dec 2009 14:09:13 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2009/64.html</guid><description>又来发解题报告了 这回是树状DP /* * 树状DP * 首先把数据想象成树状的 * 由于输入数据为树状，不需要构建树 * 可令degree[i]为包括i且以i为</description></item><item><title>POJ PKU 2528 Mayor&#39;s posters 解题报告</title><link>//owent.net/2009/65.html</link><pubDate>Wed, 18 Nov 2009 17:49:55 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2009/65.html</guid><description>题目链接:&amp;nbsp;http://acm.pku.edu.cn/JudgeOnline/bbs?problem_id=2528 这题又是线段</description></item><item><title>POJ PKU 3277 City Horizon 解题报告</title><link>//owent.net/2009/67.html</link><pubDate>Thu, 12 Nov 2009 17:23:39 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2009/67.html</guid><description>题目链接:http://acm.pku.edu.cn/JudgeOnline/problem?id=3277 线段树+离散化 ACM预选赛过去了</description></item><item><title>POJ PKU 2549 Sumsets 解题报告</title><link>//owent.net/2009/69.html</link><pubDate>Sun, 04 Oct 2009 15:54:36 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2009/69.html</guid><description>题目链接http://acm.pku.edu.cn/JudgeOnline/problem?id=2549 这道题伤了我很久脑筋 因为是a+b+</description></item><item><title>最长单调子序列 复杂度nlog(n)</title><link>//owent.net/2009/74.html</link><pubDate>Wed, 16 Sep 2009 04:44:59 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2009/74.html</guid><description>//最长单调子序列 复杂度nlog(n) //参数(原序列,序列长度,生成的序列),传入序列长度必须大于0 //返回值中lengthRecord中</description></item><item><title>Prime最小生成树(个人模板)</title><link>//owent.net/2009/75.html</link><pubDate>Tue, 15 Sep 2009 16:43:29 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2009/75.html</guid><description>//Prime连通路模块 #define N 1000 //最大数据规模 #define MAXNUM 3000000 //最大路径长度 typedef double PrimeType;//路径类型 PrimeType PrimeRecord[N]; PrimeType dis[N][N]; int isLined[N] = {1,0}; PrimeType GetPrimeLength(const long n) { PrimeType tmpLen = MAXNUM; long</description></item><item><title>矩阵相关 (增强中)</title><link>//owent.net/2009/76.html</link><pubDate>Tue, 15 Sep 2009 16:39:11 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2009/76.html</guid><description>//MULDATATYPE为矩阵元素类型,MAXMAT为最大矩阵大小 typedef long MULDATATYPE; #define MAXMAT 100 #define inf 1000000000 #define fabs(x) ((x)&amp;gt;0?(x):-(x)) #define zero(x) (fabs(x)&amp;lt;1e-10) struct mat { long n,m; MULDATATYPE data[MAXMAT][MAXMAT]; void operator =(const mat&amp;amp; a); mat operator +(const mat&amp;amp; a); mat operator -(const mat&amp;amp;</description></item><item><title>09年8月14日 ECUST ACM 练习赛总结</title><link>//owent.net/2009/77.html</link><pubDate>Sun, 16 Aug 2009 16:57:22 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2009/77.html</guid><description>今天在湖南的OJ上做题,发现不到两小时,他服务器就挂了,但是发现他和POJ上的一些题一样而且是连号的,就到POJ上继续了，我们队出了6题。 A</description></item><item><title>ECUST 09年 校赛个人赛第八场（最后一场）总结</title><link>//owent.net/2009/78.html</link><pubDate>Fri, 14 Aug 2009 11:41:45 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2009/78.html</guid><description>懒惰了，暂时休息一下 这次我只AC了一题（在结束的那一刻，另一题在题目来源地网站上AC了，我们的OJ上仍然WA，我们OJ的Special Jud</description></item><item><title>ECUST 09年 校赛个人训练赛第五场总结</title><link>//owent.net/2009/79.html</link><pubDate>Fri, 14 Aug 2009 11:40:56 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2009/79.html</guid><description>校赛个人训练赛第五场报告 今天战绩还行，AC了5题，今天总体没有太复杂的算法题，不过测试数据强度比之前有所增加 我的钱四题很早就过了，但是第五题</description></item><item><title>点到直线距离 和 线段间最短距离 (OWenT 模板)</title><link>//owent.net/2009/80.html</link><pubDate>Fri, 14 Aug 2009 11:33:38 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2009/80.html</guid><description>点到直线距离 // (x0,y0)到(x1,y1)和(x2,y2)确定的直线的距离 double disBetweenPointAndLine(double x0,double y0,double x1,double y1,double x2,double y2) { //化为ax+by+c=0的形式 double a = y1-y2; double b =</description></item><item><title>连接最多点直线 (OWenT 个人模板)</title><link>//owent.net/2009/81.html</link><pubDate>Fri, 14 Aug 2009 11:30:49 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2009/81.html</guid><description>//n每个用例的点个数 //MAXN为最大点个数 //PTYPE为坐标值类型 #include&amp;lt;iostream&amp;gt; #include&amp;lt;cmath&amp;gt; using namespace std; #define MAXN 1005 #define EPS 1e-10 typedef double PTYPE; struct point { PTYPE x,y; }; struct node { PTYPE k; }; int cmp(const void * a, const void *</description></item><item><title>09年8月9日 ECUST ACM 练习赛总结</title><link>//owent.net/2009/82.html</link><pubDate>Mon, 10 Aug 2009 16:14:16 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2009/82.html</guid><description>Problem A 我没看题,队友很快AC我就没花时间看 Problem B DP题,但是我们确实都没想到方法,实在是我们的经验不足 B题补充: B题的DP方法比较诡异(起码我理</description></item><item><title>牛顿迭代解方程 ax^3&#43;bX^2&#43;cx&#43;d=0</title><link>//owent.net/2009/83.html</link><pubDate>Wed, 05 Aug 2009 16:27:32 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2009/83.html</guid><description>$$ ax^3+bX^2+cx+d=0 $$ 根的关系: $$ x1 + x2 + x3 = (-\frac{b}{a}) $$ $$ x1 \times x2 + x1 \times x3 + x2 \times x3 = \frac{c}{a} $$ $$ x1 \times x2 \times x3 = (-\frac{d}{a}) $$ 牛顿迭代解方程(x0附近的根) double Newton_Iterative(double a,double b,double c,double d,double x0) { double f0,f0d,x; x = x0; do</description></item><item><title>ECUST 09年 校赛个人赛第三场部分解题报告(A,D,F,I)</title><link>//owent.net/2009/84.html</link><pubDate>Thu, 30 Jul 2009 09:58:51 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2009/84.html</guid><description>校赛个人赛第三场部分解题报告（A,D,F,I） 这次我完成了四道题分别是A,D,F,I 一大半时间我都花在了A上，我犯了很究级的错误 首先是VC6</description></item><item><title>ECUST 09年 校赛个人赛第六，七场总结</title><link>//owent.net/2009/85.html</link><pubDate>Thu, 30 Jul 2009 09:58:00 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2009/85.html</guid><description>校赛个人赛第六，七场总结 这两场比赛体现了英文水平的重要性 第六场的题目超长，用词还诡异，话了很长时间才看懂 这两场题目都比较有难度，第六场我只出</description></item><item><title>POJ 2606 Rabbit hunt 2780 Linearity 1118 Lining Up 解题报告</title><link>//owent.net/2009/88.html</link><pubDate>Mon, 20 Jul 2009 14:50:15 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2009/88.html</guid><description>POJ打破传统,以前是做一题送一题,现在是做一题送两题,那么我们就不用客气了 言归正传 题号:2606 Rabbit hunt 2780 Linearity 1118 Lining Up 大致题意是输入N个点.计算能</description></item><item><title>POJ 3267 The Cow Lexicon 解题报告</title><link>//owent.net/2009/90.html</link><pubDate>Wed, 15 Jul 2009 15:51:39 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2009/90.html</guid><description>POJ 3267 The Cow Lexicon 这题是一道DP问题,我的想法如下: 1.可以令 deleteNum[pos]为输入字符串在pos处需要删除的最少字符数量; 2.如果输入</description></item><item><title>并查集 模板</title><link>//owent.net/2009/91.html</link><pubDate>Wed, 15 Jul 2009 09:05:54 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2009/91.html</guid><description>//并查集 //注意类型匹配 const int maxn = 100002; int DSet[maxn]; void init(int n) { for(int i = 0 ; i &amp;lt;= n ; i ++) DSet[i] = i; } int findP(int id) { if(DSet[id] != id) DSet[id] = findP(DSet[id]); return DSet[id]; } //返回根节点ID int UnionEle(int a,int b) { a = findP(a); b</description></item><item><title>模式匹配(kmp)个人模板</title><link>//owent.net/2009/92.html</link><pubDate>Mon, 06 Jul 2009 20:34:01 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2009/92.html</guid><description>/** * KMP模式匹配 * 算法复杂度O(m+n) * ACM 模板 * * @Author OWenT * @link http://www.owent.net */ // 最大字符串长度 const int maxLen = 10000; // 前一个匹配位置,多次匹配注意要重新初始化 // 注：</description></item></channel></rss>