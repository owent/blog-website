<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>STL on I&#39;m OWenT</title><link>//owent.net/tags/stl.html</link><description>Recent content in STL on I&#39;m OWenT</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><managingEditor>admin@owent.net (OWenT)</managingEditor><webMaster>admin@owent.net (OWenT)</webMaster><lastBuildDate>Tue, 09 May 2017 11:17:55 +0000</lastBuildDate><atom:link href="//owent.net/tags/stl/index.xml" rel="self" type="application/rss+xml"/><item><title>GCC 7和LLVM&#43;Clang&#43;libc&#43;&#43;abi 4.0的构建脚本</title><link>//owent.net/2017/1431.html</link><pubDate>Tue, 09 May 2017 11:17:55 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2017/1431.html</guid><description>之前的版本发完，有空来更新一下之前的gcc和llvm+clang工具链的编译脚本了。其实GCC 7是才release没多久但是llvm 4.0发</description></item><item><title>libatbus基本功能及单元测试终于写完啦</title><link>//owent.net/2016/1214.html</link><pubDate>Fri, 19 Feb 2016 12:44:53 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2016/1214.html</guid><description>libatbus 经过茫茫长时间的编写+过年在家无聊补充和修正单元测试，再加上这两天的整理，终于把以前的这个关于服务器通信中间件的基本功能和相应的单元测试完</description></item><item><title>小记最近踩得两个C&#43;&#43;坑</title><link>//owent.net/2015/1189.html</link><pubDate>Sat, 25 Jul 2015 14:53:44 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2015/1189.html</guid><description>小记最近踩得两个C++坑 记一下最近踩得两个C++独有的暗坑，其中一个和ABI相关。第二个坑其实之前研究过，但是没有实例，这次算是碰到了个典型</description></item><item><title>[libiniloader] Project</title><link>//owent.net/2014/1081.html</link><pubDate>Mon, 14 Jul 2014 19:28:49 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2014/1081.html</guid><description>INI 配置读取库发布 Github地址: https://github.com/owt5008137/libiniloader OSChina镜像: http://git.oschina.net/owent/libiniloader 项目中经常会碰到需要读取配置的情况，而用ini配置最大的优势就是简单易懂。 但是现在</description></item><item><title>再议 C&#43;&#43; 11 Lambda表达式</title><link>//owent.net/2014/1060.html</link><pubDate>Tue, 03 Jun 2014 20:55:44 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2014/1060.html</guid><description>目录 C++ 的Lambda表达式 C++ 11 标准发布，各大编译器都开始支持里面的各种新特性，其中一项比较有意思的就是lambda表达式。 语法规则 C++ 11 Lam</description></item><item><title>捣鼓一个协程库</title><link>//owent.net/2014/1000.html</link><pubDate>Wed, 05 Mar 2014 21:52:49 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2014/1000.html</guid><description>今年准备安安心心写一个协程库。一方面是觉得协程挺有意思，另一方面也是因为C/C++在这方面没有一个非常权威的解决方案。 按照我自己风格还是喜欢</description></item><item><title>C&#43;&#43;11动态模板参数和type_traits</title><link>//owent.net/2014/971.html</link><pubDate>Mon, 27 Jan 2014 16:27:46 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2014/971.html</guid><description>C++11标准里有动态模板参数已经是众所周知的事儿了。但是当时还有个主流编译器还不支持。 但是现在，主要的编译器。VC(Windows),GC</description></item><item><title>std和boost的function与bind实现剖析</title><link>//owent.net/2013/938.html</link><pubDate>Thu, 28 Nov 2013 22:01:30 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2013/938.html</guid><description>用过std和boost的function对象和bind函数的童鞋们都知道这玩意用起来腰不酸了，腿不疼了，心情也舒畅了。先上一个简单得示例： std::string</description></item><item><title>Boost.Spirit 初体验</title><link>//owent.net/2012/674.html</link><pubDate>Thu, 08 Nov 2012 18:57:34 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2012/674.html</guid><description>使用代码生成代码是一件十分美妙的事情，于是有了各种代码生成器。但是生成代码，意味着要有对生成规则的分析和处理。 Boost.Spirit 就是这么一个语法分析工具，它</description></item><item><title>C&#43;&#43; 标准过渡期</title><link>//owent.net/2012/643.html</link><pubDate>Thu, 23 Aug 2012 06:05:20 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2012/643.html</guid><description>C++11的新标准已经出台，各个编译器已经开始陆续支持。 主流编译器支持程度见(VC++, gcc, clang, intel c++等)：http://en.cpprefe</description></item><item><title>C&#43;&#43; 新特性学习（五） — 引用包装、元编程的类型属性和计算函数对象返回类型</title><link>//owent.net/2012/558.html</link><pubDate>Sun, 26 Feb 2012 14:22:28 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2012/558.html</guid><description>这各部分主要是一些很实用和在一些地方帮助编译器自动推断类型的库和函数 首先是引用包装 类名 template&amp;lt; class T &amp;gt; class std::reference_wrapper; 这个类保存了对一个类实例、(成员)函数(指</description></item><item><title>C&#43;&#43; 新特性学习（四） — Bind和Function</title><link>//owent.net/2012/536.html</link><pubDate>Fri, 10 Feb 2012 09:52:37 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2012/536.html</guid><description>绑定函数是我认为C++新标准里第二有用的库了 绑定库的使用环境是： GCC-C++ 4.3 及以上 Visual Studio 2008 SP1 及以上 BOOST 1.25及以上（其中function是1.16及以</description></item><item><title>C&#43;&#43; 新特性学习（三） — Regex库</title><link>//owent.net/2011/534.html</link><pubDate>Sat, 22 Oct 2011 14:38:01 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2011/534.html</guid><description>C++ STL终于会放点实用的东西了。可喜可贺。 这个，显然是正则表达式库，作为一个强大而又NB的库，我表示对其理解甚少，只能先研究下基本用法，更具</description></item><item><title>C&#43;&#43; 新特性学习（二） -- Array、Tuple和Hash库</title><link>//owent.net/2011/518.html</link><pubDate>Fri, 14 Oct 2011 12:17:17 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2011/518.html</guid><description>这回的两个库没怎么用过，这里的记录就用VC++写了，使用G++和BOOST的时候和智能指针类似。 首先是Tuple库 要注意的是这里G++，VC</description></item><item><title>C&#43;&#43; 新特性学习（一） -- 概述&#43;智能指针（smart_ptr）</title><link>//owent.net/2011/508.html</link><pubDate>Fri, 14 Oct 2011 04:12:48 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2011/508.html</guid><description>C++ 0x/11 终于通过了,真是个很爽的消息。于是乎我决定对新的东西系统学习一下。 首先当然要从tr1开始，智能指针实际上我已经用过很多次了，但是为了完整</description></item><item><title>常用官方文档整理</title><link>//owent.net/2011/264.html</link><pubDate>Tue, 08 Feb 2011 14:04:26 +0000</pubDate><author>admin@owent.net (OWenT)</author><guid>//owent.net/2011/264.html</guid><description>网站及网页： 基本知识中文学习站（中）：http://www.w3school.com.cn W3C官网（英）：http://www.w3.or</description></item></channel></rss>