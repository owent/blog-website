<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Upb on I'm OWenT</title><link>//owent.net/tags/upb.html</link><description>Recent content in Upb on I'm OWenT</description><generator>Hugo</generator><language>zh-cn</language><copyright>&lt;a rel="license" href="https://github.com/owent/blog-hugo/blob/master/LICENSE.md">&lt;img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/80x15.png" />&lt;/a></copyright><lastBuildDate>Sat, 17 Jun 2023 17:01:45 +0000</lastBuildDate><atom:link href="//owent.net/tags/upb/index.xml" rel="self" type="application/rss+xml"/><item><title>protobuf v22和gRPC v1.55版本升级的依赖变化和upb适配</title><link>//owent.net/2023/2306.html</link><pubDate>Sat, 17 Jun 2023 17:01:45 +0000</pubDate><guid>//owent.net/2023/2306.html</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>近期的 &lt;a href="https://github.com/protocolbuffers/protobuf">protobuf&lt;/a> v22和 &lt;a href="https://github.com/grpc/grpc">gRPC&lt;/a> v1.55 版本在构建流程层面引入了一些比较大的变化。
最初我关注到这个问题是在我参与的一个社区项目 &lt;a href="https://github.com/open-telemetry/opentelemetry-cpp">opentelemetry-cpp&lt;/a> 的issue中（ &lt;a href="https://github.com/open-telemetry/opentelemetry-cpp/issues/2095">https://github.com/open-telemetry/opentelemetry-cpp/issues/2095&lt;/a> ）。
直到后来，我们在自己的构建系统 &lt;a href="https://github.com/atframework/cmake-toolset">cmake-toolset&lt;/a> 对 &lt;a href="https://github.com/protocolbuffers/protobuf">protobuf&lt;/a> 和 &lt;a href="https://github.com/grpc/grpc">gRPC&lt;/a> 也进行了升级。所以顺带给社区的项目也提交了一些相关的Patch，在这里分享一下可能其他同学也会碰到。&lt;/p></description></item><item><title>填个转表工具 xresloader 去年的坑（数组尾部裁剪）</title><link>//owent.net/2022/2208.html</link><pubDate>Sat, 27 Aug 2022 20:59:45 +0000</pubDate><guid>//owent.net/2022/2208.html</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>&lt;a href="https://github.com/xresloader/xresloader">xresloader&lt;/a> 是一个功能比较全面并且跨平台的Excel导出protobuf、msgpack、xml、lua、json、javascript、UE-Csv、UE-Json等数据格式的工具。
并且整个工具链还包含了基于模板引起生成读表代码的 &lt;a href="https://github.com/xresloader/xres-code-generator">xres-code-generator&lt;/a> ，方便产品/策划使用的 &lt;a href="https://github.com/xresloader/xresconv-gui">GUI批量执行工具 - xresconv-gui&lt;/a> 和方便CI集成和程序使用的 &lt;a href="https://github.com/xresloader/xresconv-cli">命令行批量执行工具 - xresconv-cli&lt;/a>。&lt;/p></description></item><item><title>集成 upb 和 lua binding 的踩坑小记</title><link>//owent.net/2022/2207.html</link><pubDate>Sat, 20 Aug 2022 17:59:45 +0000</pubDate><guid>//owent.net/2022/2207.html</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>最近新项目重新评估了一下protobuf的C/C++ -&amp;gt; Lua binding 方案。之前，使用最广泛的 Lua binding 方案应该是 &lt;a href="https://blog.codingnow.com/">云风&lt;/a> 的 &lt;a href="https://github.com/cloudwu/pbc">pbc&lt;/a> 。但是这个库已经是作者弃坑好多年的状态了。我之前使用 &lt;a href="https://github.com/cloudwu/pbc">pbc&lt;/a> 的时候刚碰上 protobuf 3.0 刚出来，当时打了patch来适配 protobuf 3.0 ，还修复了一些其他问题。这个Patch有些推给了上游，有些因为和上游的某些机制冲突没有推。我了解到的很多其他项目也或多或少的打了自己的Patch，大多数也没往上游推。基本上 &lt;a href="https://github.com/cloudwu/pbc">pbc&lt;/a> 已经处于一个失维的状态，所以这次新项目就干脆来寻求更好，或者说仍然有良好活跃度的解决方案。于是就看向了 &lt;a href="https://github.com/protocolbuffers/upb">upb&lt;/a> 。&lt;/p></description></item></channel></rss>