<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Javascript on I'm OWenT</title><link>//owent.net/tags/javascript.html</link><description>Recent content in Javascript on I'm OWenT</description><generator>Hugo</generator><language>zh-cn</language><copyright>&lt;a rel="license" href="https://github.com/owent/blog-hugo/blob/master/LICENSE.md">&lt;img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/80x15.png" />&lt;/a></copyright><lastBuildDate>Tue, 18 Apr 2023 20:27:45 +0000</lastBuildDate><atom:link href="//owent.net/tags/javascript/index.xml" rel="self" type="application/rss+xml"/><item><title>xresloader-Excel导表工具链的近期变更汇总</title><link>//owent.net/2023/2304.html</link><pubDate>Tue, 18 Apr 2023 20:27:45 +0000</pubDate><guid>//owent.net/2023/2304.html</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>&lt;a href="https://xresloader.atframe.work/">xresloader&lt;/a> 是一组用于把Excel数据结构化并导出为程序可读的数据文件的导表工具集。它包含了一系列跨平台的工具、协议描述和数据读取代码。&lt;/p>
&lt;p>主要功能特点：&lt;/p>
&lt;ul>
&lt;li>跨平台（java 11 or upper）&lt;/li>
&lt;li>Excel =&amp;gt; protobuf/msgpack/lua/javascript/json/xml&lt;/li>
&lt;li>完整支持协议结构，包括嵌套结构和数组嵌套&lt;/li>
&lt;li>同时支持protobuf proto v2 和 proto v3&lt;/li>
&lt;li>支持导出proto枚举值到lua/javascript代码和json/xml数据&lt;/li>
&lt;li>支持导出proto描述信息值到lua/javascript代码和json/xml数据（支持自定义插件，方便用户根据proto描述自定义反射功能）&lt;/li>
&lt;li>支持导出 UnrealEngine 支持的json或csv格式，支持自动生成和导出 UnrealEngine 的 &lt;code>DataTable&lt;/code> 加载代码&lt;/li>
&lt;li>支持别名表，用于给数据内容使用一个易读的名字&lt;/li>
&lt;li>支持验证器，可以在数据里直接填写proto字段名或枚举名，或者验证填入数据的是否有效&lt;/li>
&lt;li>支持通过protobuf协议插件控制部分输出&lt;/li>
&lt;li>支持自动合表，把多个Excel数据表合并成一个输出文件&lt;/li>
&lt;li>支持公式&lt;/li>
&lt;li>支持oneof,支持plain模式输入字符串转为数组或复杂结构,支持map&lt;/li>
&lt;li>支持空数据压缩（裁剪）或保留定长数组&lt;/li>
&lt;li>支持基于正则表达式分词的字段名映射转换规则&lt;/li>
&lt;li>支持设置数据版本号&lt;/li>
&lt;li>Lua输出支持全局导出或导出为 &lt;code>require&lt;/code> 模块或导出为 &lt;code>module&lt;/code> 模块。&lt;/li>
&lt;li>Javascript输出支持全局导出或导出为 &lt;code>nodejs&lt;/code> 模块或导出为 &lt;code>AMD&lt;/code> 模块。&lt;/li>
&lt;li>提供CLI批量转换工具（支持python 2.7/python 3 @ Windows、macOS、Linux）&lt;/li>
&lt;li>提供GUI批量转换工具（支持Windows、macOS、Linux）&lt;/li>
&lt;li>CLI/GUI批量转换工具支持include来实现配置复用&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://xresloader.atframe.work/">xresloader&lt;/a> 包含了多个组件，其中最主要的部分分别是。&lt;/p></description></item><item><title>Lua 挺好用的样子</title><link>//owent.net/2013/918.html</link><pubDate>Thu, 24 Oct 2013 20:59:44 +0000</pubDate><guid>//owent.net/2013/918.html</guid><description>&lt;p>项目里面引入了Lua，就特别学习了一下。&lt;/p>
&lt;p>其实对于理解Javascipt的人来说，Lua也很容易理解，因为他们太多的地方相像了。&lt;/p>
&lt;p>初步看来，Lua的设计模式和思想很像Javascript，也是原型模型（Javascript里叫&lt;strong>prototype&lt;/strong>，Lua里是&lt;strong>metatable&lt;/strong>）&lt;/p></description></item><item><title>从Javascript到Typescript到Node.js</title><link>//owent.net/2013/851.html</link><pubDate>Wed, 10 Jul 2013 20:19:39 +0000</pubDate><guid>//owent.net/2013/851.html</guid><description>&lt;p>最近看了点typescript的东西，加上以前看过的一点点Node.js，所以就想把他们系统地整理一下。&lt;/p>
&lt;h2 id="javascript">Javascript&lt;/h2>
&lt;p>这玩意搞过Web开发的应该都知道吧，Javascript的语法我就不废话了，挺简单的。这里总结几个Javascript的核心机制部分吧。&lt;/p></description></item><item><title>JSON显示库 -- showJson （Javascript）</title><link>//owent.net/2012/573.html</link><pubDate>Sun, 01 Apr 2012 06:17:48 +0000</pubDate><guid>//owent.net/2012/573.html</guid><description>&lt;p>现在的web的js开发很方便啊，但是碰到iframe里的东西还是不方便看到变量的内容，所以就写了这么个看json内容的玩意，还可以当控制台输出用。&lt;/p></description></item><item><title>JQuery扩展插件--提示信息</title><link>//owent.net/2010/128.html</link><pubDate>Fri, 19 Nov 2010 15:20:12 +0000</pubDate><guid>//owent.net/2010/128.html</guid><description>&lt;p>学校做项目顺便写的，还是有点用的。&lt;/p>
&lt;pre>&lt;code class="language-js">/***
 * JQuery扩展插件--提示信息
 *
 * 本函数用于创建提示信息
 *
 * Example
 * &amp;lt;code&amp;gt;
 * var t = $.noticeMessage(msg, a, b);
 * &amp;lt;/code&amp;gt;
 *
 *
 * function noticeMessage([msg, a,b])
 * @Param {
 * msg: 信息内容(默认: Notice Message!)
 * a: 配置选项({expire: 过期时间（默认5秒）, time: 过渡时间, from: {起始CSS样式}, to:{最终CSS样式}})
 * b: 回调函数
 * }
 * @Return {jQuery(msgDiv): 产生的信息DOM组件的jQuery容器}
 *
 *
 * Example:
 * &amp;lt;code&amp;gt;
 * var t = $.noticeMessage(&amp;quot;Hello World!&amp;quot;);
 * &amp;lt;/code&amp;gt;
 *
 *
 * @Author OWenT
 * @Version 1.0
 * @Link http://www.owent.net
 */
jQuery.extend({
 noticeMessage: function (msg, a, b) {
 msg = msg || &amp;quot;Notice Message!&amp;quot;;
 var option = { &amp;quot;expire&amp;quot;: 5000, &amp;quot;time&amp;quot;: 500,
 &amp;quot;from&amp;quot;: { &amp;quot;background-color&amp;quot;: &amp;quot;LightGreen&amp;quot;, &amp;quot;opacity&amp;quot;: &amp;quot;0&amp;quot;, &amp;quot;position&amp;quot;: &amp;quot;fixed&amp;quot;, &amp;quot;bottom&amp;quot;: &amp;quot;0px&amp;quot;, &amp;quot;z-index&amp;quot;: &amp;quot;1000&amp;quot;,
 &amp;quot;font-size&amp;quot;: &amp;quot;24px&amp;quot;, &amp;quot;color&amp;quot;: &amp;quot;DarkGreen&amp;quot;, &amp;quot;padding&amp;quot;: &amp;quot;3px&amp;quot;, &amp;quot;font-weight&amp;quot;: &amp;quot;bold&amp;quot;
 },
 &amp;quot;to&amp;quot;: { &amp;quot;opacity&amp;quot;: &amp;quot;1&amp;quot;, &amp;quot;bottom&amp;quot;: &amp;quot;+5px&amp;quot; }
 };
 var callback = function () { };
 if (a &amp;amp;&amp;amp; jQuery.isFunction(a))
 callback = a;
 else {
 a = a || {};
 jQuery.extend(option, a);
 callback = b || function () { };
 }

 var msgDiv = document.createElement(&amp;quot;div&amp;quot;);

 jQuery(msgDiv).css(option.from).html(msg);
 jQuery(document.body).append(msgDiv);
 jQuery(msgDiv).stop().animate(option.to, option.time, callback);
 if (option.expire &amp;gt; 0) {
 setTimeout(function () {
 if (msgDiv) {
 jQuery(msgDiv).stop().animate({ &amp;quot;opacity&amp;quot;: &amp;quot;0&amp;quot;, &amp;quot;bottom&amp;quot;: &amp;quot;-5px&amp;quot; }, option.time,
 function () { callback(); jQuery(this).remove(); });
 }
 }, option.expire);
 }
 return jQuery(msgDiv);
 }
});
&lt;/code>&lt;/pre>
&lt;p>写在最后补充一下，这个动机基本没什么用了&lt;/p></description></item><item><title>解析网站字符串型参数 Javascript QueryString 操作 TQueryString类</title><link>//owent.net/2010/104.html</link><pubDate>Mon, 01 Nov 2010 02:15:09 +0000</pubDate><guid>//owent.net/2010/104.html</guid><description>&lt;p>这是学校USRP项目需要而写的一个类，但是既然写出来了，以后也可能用到，就共享出来吧。&lt;/p>
&lt;p>这个类用于解析网页URL的QueryString参数，或者也可以当做操作一些其他设置的类库。&lt;/p></description></item></channel></rss>