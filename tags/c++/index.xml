<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C++ on I'm OWenT</title><link>//owent.net/tags/c++.html</link><description>Recent content in C++ on I'm OWenT</description><generator>Hugo</generator><language>zh-cn</language><copyright>&lt;a rel="license" href="https://github.com/owent/blog-hugo/blob/master/LICENSE.md">&lt;img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/80x15.png" />&lt;/a></copyright><lastBuildDate>Tue, 08 Oct 2024 20:45:45 +0000</lastBuildDate><atom:link href="//owent.net/tags/c++/index.xml" rel="self" type="application/rss+xml"/><item><title>实现一个strong_rc_ptr(非线程安全版本的std::shared_ptr)</title><link>//owent.net/2024/2405.html</link><pubDate>Tue, 08 Oct 2024 20:45:45 +0000</pubDate><guid>//owent.net/2024/2405.html</guid><description>&lt;h2 id="背景">背景&lt;/h2>
&lt;p>我们的新项目有个比较复杂的全区全服交易行系统，其中搜索和推荐是高实时性全区服多维度排序的，并且要支持比较复杂的标签交集查询和属性范围查询的自由组合。
当有订单发生变化时，它不仅仅会影响全服状态下搜索和推荐条件的结果变化，也会同时影响商品维度的聚合，交易行层面的数据聚合。&lt;/p></description></item><item><title>打通游戏服务端框架的C++20协程改造的最后一环</title><link>//owent.net/2023/2303.html</link><pubDate>Sat, 08 Apr 2023 20:21:45 +0000</pubDate><guid>//owent.net/2023/2303.html</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>我们终于在年初的时候最后完成了整体服务器框架对C++20协程的支持和接入。虽然之前陆陆续续抽时间改造一些组件，让它支持C++20协程，期间也记录了一些早期的设计思路和踩的坑（包括 &lt;a href="https://owent.net/2020/2004.html">《libcopp接入C++20 Coroutine和一些过渡期的设计》&lt;/a>和&lt;a href="https://owent.net/2022/2206.html">《libcopp对C++20协程的接入和接口设计》&lt;/a>），其中不乏一些C++20协程使用上可能打破我们常规思路细节和编译器的BUG。而且这些都是各个组件的改造，并没有最后整合到一起。&lt;/p></description></item><item><title>[C++20] Module partitions和符号交叉引用（声明和实现分离）</title><link>//owent.net/2021/2103.html</link><pubDate>Thu, 25 Mar 2021 22:38:52 +0000</pubDate><guid>//owent.net/2021/2103.html</guid><description>&lt;p>C++20 开始支持 &lt;strong>Module&lt;/strong> 了。在以前C++为了解决循环依赖问题，经常会把类或者函数声明写前面，实现写后面。然后中间的代码就可以实现内部模块的内聚而互相引用。比如:&lt;/p></description></item><item><title>可执行文件压缩</title><link>//owent.net/2018/1805.html</link><pubDate>Tue, 24 Apr 2018 10:58:05 +0000</pubDate><guid>//owent.net/2018/1805.html</guid><description>&lt;h1 id="前言">前言&lt;/h1>
&lt;p>最近看&lt;a href="https://rust-lang.org/">Rust&lt;/a>相关东西的时候看到一篇关于压缩可执行文件的文章。压缩可执行文件对嵌入式开发特别有用，但是延伸一下用来减少我们游戏行业里预编译的工具二进制包大小和Android/iOS的库也是蛮有用的。&lt;/p>
&lt;p>原文见这里： &lt;a href="https://jamesmunns.com/blog/tinyrocket/">https://jamesmunns.com/blog/tinyrocket/&lt;/a>&lt;/p>
&lt;h1 id="基本流程">基本流程&lt;/h1>
&lt;ol>
&lt;li>Release编译，移除调试符号文件，开启最小化size优化(-Oz)&lt;/li>
&lt;li>使用LLVM的全量LTO&lt;/li>
&lt;li>使用xargo重新编译标准库(std)和核心库(core)（这个C/C++不容易模仿，而且编译选项十分难搞）&lt;/li>
&lt;li>移除&lt;a href="https://github.com/jemalloc/jemalloc">jemalloc&lt;/a>（服务器程序还是留着比较好，内置的malloc实现一般碎片比较厉害。虽然C/C++默认也不是&lt;a href="https://github.com/jemalloc/jemalloc">jemalloc&lt;/a>，很多项目为了新能还是会用它）&lt;/li>
&lt;li>移除panic的详情信息（这个仅适用于&lt;a href="https://rust-lang.org/">Rust&lt;/a>）&lt;/li>
&lt;li>strip（由GNU的&lt;a href="https://www.gnu.org/software/binutils/">binutils&lt;/a>提供），参考命令: &lt;code>strip [二进制]&lt;/code>&lt;/li>
&lt;li>&lt;a href="https://upx.github.io/">UPX&lt;/a>进一步压缩加壳&lt;/li>
&lt;/ol>
&lt;h1 id="尝试改造优化">尝试改造优化&lt;/h1>
&lt;p>然后尝试使用上面的流程改造我们的 &lt;strong>gmtools-cli&lt;/strong> 。原先我是直接开LTO+Release编译的，编出的文件大小为4.4MB（4520728字节）。&lt;/p></description></item></channel></rss>