<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on I&#39;m OWenT</title>
    <link>//owent.net/tags/go.html</link>
    <description>Recent content in go on I&#39;m OWenT</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <managingEditor>admin@owent.net (OWenT)</managingEditor>
    <webMaster>admin@owent.net (OWenT)</webMaster>
    <lastBuildDate>Sat, 01 Jul 2017 15:57:29 +0000</lastBuildDate>
    
	<atom:link href="//owent.net/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>libcopp v2的第一波优化完成</title>
      <link>//owent.net/2017/1466.html</link>
      <pubDate>Sat, 01 Jul 2017 15:57:29 +0000</pubDate>
      <author>admin@owent.net (OWenT)</author>
      <guid>//owent.net/2017/1466.html</guid>
      <description>之前测出来libcopp还有一些列优化点，但是要破坏之前的API，所以整理了一下优化的想法和方案。 预留空间和合并分配 之前有太多的堆内存分配了</description>
    </item>
    
    <item>
      <title>libcopp(v2) vs goroutine性能测试</title>
      <link>//owent.net/2017/1465.html</link>
      <pubDate>Sat, 10 Jun 2017 15:57:29 +0000</pubDate>
      <author>admin@owent.net (OWenT)</author>
      <guid>//owent.net/2017/1465.html</guid>
      <description>本来是没想写这个对比。无奈之前和call_in_stack的作者聊了一阵，发现了一些libcopp的改进空间。然后顺便看了新的boost.c</description>
    </item>
    
  </channel>
</rss>