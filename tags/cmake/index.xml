<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cmake on I'm OWenT</title><link>//owent.net/tags/cmake.html</link><description>Recent content in Cmake on I'm OWenT</description><generator>Hugo</generator><language>zh-cn</language><copyright>&lt;a rel="license" href="https://github.com/owent/blog-hugo/blob/master/LICENSE.md">&lt;img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/80x15.png" />&lt;/a></copyright><lastBuildDate>Mon, 30 Jan 2023 11:39:45 +0000</lastBuildDate><atom:link href="//owent.net/tags/cmake/index.xml" rel="self" type="application/rss+xml"/><item><title>给cmake-toolset和工具链(curl等)加HTTP/2和HTTP/3支持</title><link>//owent.net/2023/2301.html</link><pubDate>Mon, 30 Jan 2023 11:39:45 +0000</pubDate><guid>//owent.net/2023/2301.html</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>前段时间集成一些公司内组件的时候发现它依赖 &lt;a href="https://github.com/nghttp2/nghttp2.git">nghttp2&lt;/a> 。正好之前一直有给我的构建工具(&lt;a href="https://github.com/atframework/cmake-toolset">cmake-toolset&lt;/a>)里的构建 &lt;a href="https://github.com/curl/curl.git">curl&lt;/a> 的流程加 HTTP/2 和 HTTP/3 的计划。
所以这波一次性搞定了。&lt;/p>
&lt;h2 id="构建工具-cmake-toolset-和-curl">构建工具 &lt;a href="https://github.com/atframework/cmake-toolset">cmake-toolset&lt;/a> 和 &lt;a href="https://github.com/curl/curl.git">curl&lt;/a>&lt;/h2>
&lt;p>首先，&lt;a href="https://github.com/curl/curl.git">curl&lt;/a> 是支持多种第三方库作为 HTTP/2 和 HTTP/3（QUIC）算法库的。比如 &lt;a href="https://github.com/ngtcp2/nghttp3.git">nghttp3&lt;/a>+&lt;a href="https://github.com/ngtcp2/ngtcp2.git">ngtcp2&lt;/a>，或者微软家 &lt;a href="https://github.com/microsoft/msquic">msquic&lt;/a>，或者Google家 &lt;a href="https://github.com/google/quiche">quiche&lt;/a>。
其中HTTP/3只能选一个，互相是冲突的。而Google的&lt;a href="https://github.com/google/quiche">quiche&lt;/a>官方仅有对bazel构建系统的支持，而我的&lt;a href="https://github.com/atframework/cmake-toolset">cmake-toolset&lt;/a>是cmake生态的。
这里选用 &lt;a href="https://github.com/ngtcp2/nghttp3.git">nghttp3&lt;/a>+&lt;a href="https://github.com/ngtcp2/ngtcp2.git">ngtcp2&lt;/a> 的组合，主要是为了和其他的模块共享依赖。&lt;/p></description></item><item><title>集成 upb 和 lua binding 的踩坑小记</title><link>//owent.net/2022/2207.html</link><pubDate>Sat, 20 Aug 2022 17:59:45 +0000</pubDate><guid>//owent.net/2022/2207.html</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>最近新项目重新评估了一下protobuf的C/C++ -&amp;gt; Lua binding 方案。之前，使用最广泛的 Lua binding 方案应该是 &lt;a href="https://blog.codingnow.com/">云风&lt;/a> 的 &lt;a href="https://github.com/cloudwu/pbc">pbc&lt;/a> 。但是这个库已经是作者弃坑好多年的状态了。我之前使用 &lt;a href="https://github.com/cloudwu/pbc">pbc&lt;/a> 的时候刚碰上 protobuf 3.0 刚出来，当时打了patch来适配 protobuf 3.0 ，还修复了一些其他问题。这个Patch有些推给了上游，有些因为和上游的某些机制冲突没有推。我了解到的很多其他项目也或多或少的打了自己的Patch，大多数也没往上游推。基本上 &lt;a href="https://github.com/cloudwu/pbc">pbc&lt;/a> 已经处于一个失维的状态，所以这次新项目就干脆来寻求更好，或者说仍然有良好活跃度的解决方案。于是就看向了 &lt;a href="https://github.com/protocolbuffers/upb">upb&lt;/a> 。&lt;/p></description></item><item><title>近期cmake-toolset的一些适配问题</title><link>//owent.net/2021/2109.html</link><pubDate>Sun, 05 Dec 2021 20:10:00 +0000</pubDate><guid>//owent.net/2021/2109.html</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>偷懒了好久没有写分享了，最近的时间也是花费了很多时间大量优化了之前游戏服务器框架和组件的很多细节。其中，相对独立且同时也被其他的项目使用的一个工具则是基于 &lt;a href="https://cmake.org/">cmake&lt;/a> 和 &lt;a href="https://git-scm.com/">git&lt;/a> 且兼容 &lt;a href="https://vcpkg.io">vcpkg&lt;/a> 的构建系统 &lt;a href="https://github.com/atframework/cmake-toolset/">cmake-toolset&lt;/a> 。之所以要写这么个构建工具主要是要提供比 &lt;a href="https://vcpkg.io">vcpkg&lt;/a> 更宽容的兼容性（没办法我们公司的编译环境比较古老），并且提供更进一步的定制化能力（包含但不限于功能开关和下载源，这些东西 &lt;a href="https://vcpkg.io">vcpkg&lt;/a> 也是很后期才有了个初步的支持）。那么先来记录一下构建系统适配过程中的一些问题吧。&lt;/p></description></item><item><title>重构基于CMake的构建工具链</title><link>//owent.net/2021/2106.html</link><pubDate>Sat, 05 Jun 2021 22:38:45 +0000</pubDate><guid>//owent.net/2021/2106.html</guid><description>&lt;h2 id="背景">背景&lt;/h2>
&lt;p>对大型项目来说，必然会有很多的依赖项。特别是现代化的组件都会尝试去复用社区资源。而对于C/C++而言，依赖管理一直是一个比较头大的问题。
很多老式的系统和工具都会尝试去走相对标准化的安装过程，比如说用 &lt;a href="https://linux.die.net/man/1/pkg-config">pkg-config&lt;/a> 或者用系统自带的包管理工具装在系统默认路径里。
当然这样很不方便，也不容易定制组件。我使用 &lt;a href="https://cmake.org/">cmake&lt;/a> 比较多，所以一直以来在我的 &lt;a href="https://github.com/atframework">atframework&lt;/a> 项目集中有一个 utility 项目 &lt;a href="https://github.com/atframework/atframe_utils">atframe_utils&lt;/a>，里面包含一些常用的构建脚本。
并且在 &lt;a href="https://github.com/atframework/atsf4g-co">atsf4g-co&lt;/a> 中实现了一些简单的包管理和构建流程。&lt;/p></description></item><item><title>用cmake交叉编译到iOS和Android</title><link>//owent.net/2017/1405.html</link><pubDate>Sun, 16 Apr 2017 03:37:17 +0000</pubDate><guid>//owent.net/2017/1405.html</guid><description>&lt;p>最近看了下最新版本的cmake的文档，很惊喜地发现他已经支持直接设置Android和OSX的一些变量了，然后有瞄了一眼NDK，发现里面现在也停工官方的cmake支持。&lt;/p></description></item></channel></rss>