<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Benchmark on I'm OWenT</title><link>//owent.net/tags/benchmark.html</link><description>Recent content in Benchmark on I'm OWenT</description><generator>Hugo</generator><language>zh-cn</language><copyright>&lt;a rel="license" href="https://github.com/owent/blog-hugo/blob/master/LICENSE.md">&lt;img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/80x15.png" />&lt;/a></copyright><lastBuildDate>Sat, 22 Jun 2019 12:26:58 +0000</lastBuildDate><atom:link href="//owent.net/tags/benchmark/index.xml" rel="self" type="application/rss+xml"/><item><title>协程框架(libcopp) 小幅优化</title><link>//owent.net/2019/1907.html</link><pubDate>Sat, 22 Jun 2019 12:26:58 +0000</pubDate><guid>//owent.net/2019/1907.html</guid><description>&lt;p>最近抽空继续对 &lt;a href="https://github.com/owent/libcopp">libcopp&lt;/a> 进行了更新和小幅优化。 首先的Merge了 &lt;a href="https://www.boost.org/libs/context/">boost.context&lt;/a> 1.70.0 。这次&lt;a href="https://www.boost.org/libs/context/">boost.context&lt;/a>的更新似乎和它写进 &lt;a href="https://www.boost.org/users/history/version_1_70_0.html">CHANGELOG&lt;/a> 里的并不完全一致，匹配的只看到 macho 架构的脏数据操作。 不过另外它增加了新的平台支持 mips64，我目前还是简单导入了，但是平台检测工具还没有写，如果要使用是可以通过编译参数切过去的，不过我感觉没人会这么用吧？我自己用都得看一下之前怎么写的。&lt;/p></description></item><item><title>协程框架(libcopp)v2优化、自适应栈池和同类库的Benchmark对比</title><link>//owent.net/2018/1806.html</link><pubDate>Mon, 28 May 2018 20:23:31 +0000</pubDate><guid>//owent.net/2018/1806.html</guid><description>&lt;h1 id="协程系统优化">协程系统优化&lt;/h1>
&lt;p>&lt;a href="https://github.com/owent/libcopp">libcopp&lt;/a>很早就实现完成了v2版本，现在迁移进&lt;a href="https://github.com/atframework/atsf4g-co/tree/sample_solution">atsf4g-co/tree/sample_solution&lt;/a>以后也把v2分支正式并入了主干。原来的版本切出到v1分支并且停止维护了。&lt;/p>
&lt;h2 id="libcopp-v2内存布局">libcopp v2内存布局&lt;/h2>
&lt;p>开发&lt;a href="https://github.com/owent/libcopp">libcopp&lt;/a> v2版本的最大目的是优化allocator的接口和内存碎片。&lt;/p>
&lt;p>原来的allocator虽然是可定制的，但是是内置的。每次创建一个allocator对象，不同allocator之间共享数据只能通过全局数据或者TLS数据。现在则可以传入allocator了。这也是为后续的共享栈池做准备。&lt;/p></description></item></channel></rss>