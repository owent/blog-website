<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Grpc on I'm OWenT</title><link>//owent.net/tags/grpc.html</link><description>Recent content in Grpc on I'm OWenT</description><generator>Hugo</generator><language>zh-cn</language><copyright>&lt;a rel="license" href="https://github.com/owent/blog-hugo/blob/master/LICENSE.md">&lt;img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/80x15.png" />&lt;/a></copyright><lastBuildDate>Sat, 28 Oct 2023 18:10:45 +0000</lastBuildDate><atom:link href="//owent.net/tags/grpc/index.xml" rel="self" type="application/rss+xml"/><item><title>Opentelemetry社区在gRPC的几个链接问题(静态库和动态库混用,musl工具链,符号裁剪)</title><link>//owent.net/2023/2308.html</link><pubDate>Sat, 28 Oct 2023 18:10:45 +0000</pubDate><guid>//owent.net/2023/2308.html</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>&lt;a href="https://github.com/open-telemetry/opentelemetry-cpp">opentelemetry-cpp&lt;/a> 在标准上报协议OTLP里是支持使用 &lt;a href="https://github.com/grpc/grpc">gRPC&lt;/a> 作为传输协议的。但是，当 &lt;a href="https://github.com/grpc/grpc">gRPC&lt;/a> 被作为静态库同时链接进多个动态库时，在一些平台上会有一些问题。这是 &lt;a href="https://github.com/grpc/grpc">gRPC&lt;/a> 本身的一些实现方式导致的。
一直拖到今天才来比较完整得写这个问题的具体成因和解决方案，实际上也有一些其他库有相似实现的也会有相同的问题，所以分享出来看看有没有其他同学也可能碰到可以参考一下。&lt;/p></description></item><item><title>protobuf v22和gRPC v1.55版本升级的依赖变化和upb适配</title><link>//owent.net/2023/2306.html</link><pubDate>Sat, 17 Jun 2023 17:01:45 +0000</pubDate><guid>//owent.net/2023/2306.html</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>近期的 &lt;a href="https://github.com/protocolbuffers/protobuf">protobuf&lt;/a> v22和 &lt;a href="https://github.com/grpc/grpc">gRPC&lt;/a> v1.55 版本在构建流程层面引入了一些比较大的变化。
最初我关注到这个问题是在我参与的一个社区项目 &lt;a href="https://github.com/open-telemetry/opentelemetry-cpp">opentelemetry-cpp&lt;/a> 的issue中（ &lt;a href="https://github.com/open-telemetry/opentelemetry-cpp/issues/2095">https://github.com/open-telemetry/opentelemetry-cpp/issues/2095&lt;/a> ）。
直到后来，我们在自己的构建系统 &lt;a href="https://github.com/atframework/cmake-toolset">cmake-toolset&lt;/a> 对 &lt;a href="https://github.com/protocolbuffers/protobuf">protobuf&lt;/a> 和 &lt;a href="https://github.com/grpc/grpc">gRPC&lt;/a> 也进行了升级。所以顺带给社区的项目也提交了一些相关的Patch，在这里分享一下可能其他同学也会碰到。&lt;/p></description></item><item><title>集成 upb 和 lua binding 的踩坑小记</title><link>//owent.net/2022/2207.html</link><pubDate>Sat, 20 Aug 2022 17:59:45 +0000</pubDate><guid>//owent.net/2022/2207.html</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>最近新项目重新评估了一下protobuf的C/C++ -&amp;gt; Lua binding 方案。之前，使用最广泛的 Lua binding 方案应该是 &lt;a href="https://blog.codingnow.com/">云风&lt;/a> 的 &lt;a href="https://github.com/cloudwu/pbc">pbc&lt;/a> 。但是这个库已经是作者弃坑好多年的状态了。我之前使用 &lt;a href="https://github.com/cloudwu/pbc">pbc&lt;/a> 的时候刚碰上 protobuf 3.0 刚出来，当时打了patch来适配 protobuf 3.0 ，还修复了一些其他问题。这个Patch有些推给了上游，有些因为和上游的某些机制冲突没有推。我了解到的很多其他项目也或多或少的打了自己的Patch，大多数也没往上游推。基本上 &lt;a href="https://github.com/cloudwu/pbc">pbc&lt;/a> 已经处于一个失维的状态，所以这次新项目就干脆来寻求更好，或者说仍然有良好活跃度的解决方案。于是就看向了 &lt;a href="https://github.com/protocolbuffers/upb">upb&lt;/a> 。&lt;/p></description></item><item><title>近期对libatapp的一些优化调整(增加服务发现和连接管理,支持yaml等)</title><link>//owent.net/2020/2007.html</link><pubDate>Sun, 04 Oct 2020 15:43:17 +0000</pubDate><guid>//owent.net/2020/2007.html</guid><description>&lt;p>最近给 &lt;a href="https://github.com/atframework/libatapp">libatapp&lt;/a> 增加了一系列改造，非常多且琐碎，这里简单记录下吧。&lt;/p>
&lt;p>首先是重构了配置管理。原来是手写在代码里的，因为原来上层的 &lt;a href="https://github.com/atframework/libatbus">libatbus&lt;/a> 是不依赖 &lt;a href="https://github.com/protocolbuffers/protobuf">protobuf&lt;/a> 的，现在 既然已经依赖 &lt;a href="https://github.com/protocolbuffers/protobuf">protobuf&lt;/a> 了就转为 &lt;a href="https://github.com/protocolbuffers/protobuf">protobuf&lt;/a> 管理了。同时现在还支持YAML配置，使用 &lt;a href="https://github.com/jbeder/yaml-cpp">yaml-cpp&lt;/a> 来解析YAML文件，这个库也被一些其他知名的大型项目使用了，比如 &lt;a href="https://www.envoyproxy.io/">Envoy proxy&lt;/a> 。 原来的conf/ini模式的配置也是支持的，现在加载配置的时候会尝试猜测以下配置文件是yaml还是conf/ini模式。 并且增加了统一的 &lt;em>YAML转&lt;a href="https://github.com/protocolbuffers/protobuf">protobuf&lt;/a>&lt;/em> 、 &lt;em>conf/ini转&lt;a href="https://github.com/protocolbuffers/protobuf">protobuf&lt;/a>&lt;/em> 和 &lt;em>指定层级配置导出到&lt;a href="https://github.com/protocolbuffers/protobuf">protobuf&lt;/a>&lt;/em> 的接口来方便使用。比较特殊的是自定义日志配置后端的接入接口有了一些小变化，问题也不大。&lt;/p></description></item></channel></rss>