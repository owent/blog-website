<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>分布式 on I'm OWenT</title><link>//owent.net/tags/%E5%88%86%E5%B8%83%E5%BC%8F.html</link><description>Recent content in 分布式 on I'm OWenT</description><generator>Hugo</generator><language>zh-cn</language><copyright>&lt;a rel="license" href="https://github.com/owent/blog-hugo/blob/master/LICENSE.md">&lt;img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/80x15.png" />&lt;/a></copyright><lastBuildDate>Sat, 27 Jun 2020 12:19:45 +0000</lastBuildDate><atom:link href="//owent.net/tags/%E5%88%86%E5%B8%83%E5%BC%8F/index.xml" rel="self" type="application/rss+xml"/><item><title>在游戏服务器中使用分布式事务</title><link>//owent.net/2020/2005.html</link><pubDate>Sat, 27 Jun 2020 12:19:45 +0000</pubDate><guid>//owent.net/2020/2005.html</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>游戏业务通常有个特点是模块相关性非常高，模块之间的联动也非常密集且复杂。要保持各个相关模块的数据一致性，同时又兼顾效率和，没有一个通用的方法。通常的做法是走有损服务（也叫柔性服务）和自动修复的方式。比如支付服务一般的做法是在2PC的基础上增加redo log，对于发放和订单确认这两方，如果失败了会尝试几次补发。又或者好友系统或者公会，因为涉及多个对象的数据相互索引，一些做法是玩家在线的时候定期去检查数据是否正确，如果不正确走修复流程。&lt;/p></description></item><item><title>理解Raft算法</title><link>//owent.net/2016/1226.html</link><pubDate>Thu, 17 Mar 2016 21:29:24 +0000</pubDate><guid>//owent.net/2016/1226.html</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>最近在分布式系统一致性方面，&lt;a href="https://raft.github.io/">Raft&lt;/a>算法比较火啊。所以就抽时间看了下这个算法。&lt;/p>
&lt;p>之前已经有&lt;a href="https://zh.wikipedia.org/zh-cn/Paxos%E7%AE%97%E6%B3%95">Paxos算法&lt;/a>，用于解决分布式系统最终一致性问题，而且已经有了&lt;a href="http://http://zookeeper.apache.org/">zookeeper&lt;/a>这个成熟的开源实现。那么这个&lt;a href="https://raft.github.io/">Raft&lt;/a>算法有啥用呢？按照&lt;a href="https://raft.github.io/">Raft&lt;/a>官网的说法，这个算法的错误容忍和性能和&lt;a href="https://zh.wikipedia.org/zh-cn/Paxos%E7%AE%97%E6%B3%95">Paxos算法&lt;/a>类似，但是拥有更加简单易懂的设计。&lt;/p>
&lt;p>看过&lt;a href="https://zh.wikipedia.org/zh-cn/Paxos%E7%AE%97%E6%B3%95">Paxos算法&lt;/a>的童鞋们都知道，这货复杂地和屎一样，为了实现去中心化而考虑了各种复杂的边界条件和时序下的可靠性。而&lt;a href="https://raft.github.io/">Raft&lt;/a>算法则根据实际应用中的需要，简化了设计模型，不采用去中心化设计，而是自动选举中心节点，并且在各种情况和时序下可以保证能够正确的选举出中心节点并保证数据的一致性。而且也正是由于能够选举出唯一的主节点（Leader）使得整个通信流程非常地简单，并且易于理解和维护。&lt;/p>
&lt;p>那么它是如何做到这些的呢？&lt;/p>
&lt;h2 id="基本算法设计">基本算法设计&lt;/h2>
&lt;p>&lt;a href="https://raft.github.io/">Raft&lt;/a>的基本设计可以参照官网介绍 &lt;a href="https://raft.github.io/">https://raft.github.io/&lt;/a>&lt;/p>
&lt;p>官方网站上的图例可以点击节点，然后&lt;strong>模拟&lt;/strong>节点crash或者超时或者收到请求时的通信流程。其实也是一个javascript的简单实现，有利于我们理解&lt;a href="https://raft.github.io/">Raft&lt;/a>算法的流程。&lt;/p></description></item></channel></rss>