<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Bus on I'm OWenT</title><link>//owent.net/tags/bus.html</link><description>Recent content in Bus on I'm OWenT</description><generator>Hugo</generator><language>zh-cn</language><copyright>&lt;a rel="license" href="https://github.com/owent/blog-hugo/blob/master/LICENSE.md">&lt;img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/80x15.png" />&lt;/a></copyright><lastBuildDate>Thu, 16 Apr 2020 20:51:58 +0000</lastBuildDate><atom:link href="//owent.net/tags/bus/index.xml" rel="self" type="application/rss+xml"/><item><title>libatbus 的大幅优化</title><link>//owent.net/2020/2003.html</link><pubDate>Thu, 16 Apr 2020 20:51:58 +0000</pubDate><guid>//owent.net/2020/2003.html</guid><description>&lt;p>最近零碎的事太多了，拖了好久没写blog。一些小的碎片话的东西也不值得写，另一方面是这次大幅优化了 &lt;a href="https://github.com/atframework/">atframework&lt;/a> 的一些流程细节，特别是针对我们这两年来业务的需求，对 &lt;a href="https://github.com/atframework/libatbus">libatbus&lt;/a> 进行了一次大重构。这里记录一下重构的内容吧。&lt;/p></description></item><item><title>protobuf、flatbuffer、msgpack 针对小数据包的简单对比</title><link>//owent.net/2019/1908.html</link><pubDate>Sat, 03 Aug 2019 10:59:58 +0000</pubDate><guid>//owent.net/2019/1908.html</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>前段时间我尝试给 &lt;a href="https://github.com/atframework/">atframework&lt;/a> 的 &lt;a href="https://github.com/atframework/libatapp">libatapp&lt;/a> 整合进UnrealEngine做Dedicated Server和逻辑server通信的时候碰到了一些问题。主要在于这些客户端引擎一般来说默认都是关闭exception的甚至会关闭RTTI。而 &lt;a href="https://github.com/atframework/libatapp">libatapp&lt;/a> 所依赖的通信组件 &lt;a href="https://github.com/atframework/libatbus">libatbus&lt;/a> 里内部协议是&lt;a href="https://msgpack.org/">msgpack&lt;/a> ， 而 &lt;a href="https://msgpack.org/">msgpack&lt;/a> 的官方 C++ 的header only的实现是必须开异常的功能的。所以我近期打算抽空增强一波 &lt;a href="https://github.com/atframework/libatbus">libatbus&lt;/a> 的功能，增加一些跨版本向前向后兼容功能，和一些简单的验证功能（仅仅是为了防止误操作导致的问题）。具体的变更等我弄完了再发一篇。&lt;/p></description></item><item><title>libatbus的几个藏得很深的bug</title><link>//owent.net/2017/1411.html</link><pubDate>Sun, 23 Apr 2017 23:48:54 +0000</pubDate><guid>//owent.net/2017/1411.html</guid><description>&lt;!-- raw HTML omitted -->
&lt;p>在写这篇文章前，我突然想到以前流行了一段时间的服务器面试题：当一个BUG只有几百万分之一的概率会出现，怎么办？这个问题在这个BUG里只是毛毛雨而已，因为这次的BUG的&lt;strong>出现概率是夸张的三亿分之一&lt;/strong>。&lt;/p></description></item><item><title>关于BUS通信系统的一些思考（三）</title><link>//owent.net/2015/1201.html</link><pubDate>Sun, 08 Nov 2015 17:17:05 +0000</pubDate><guid>//owent.net/2015/1201.html</guid><description>&lt;blockquote>
&lt;p>&lt;a href="//www.owent.net/2014/1099.html">接上文关于bus通信系统的一些思考（二）&lt;/a>&lt;/p>
&lt;p>之前的文章内容应该要有修订，但是并没有更新到blog里，而是直接写在了&lt;a href="https://github.com/atframework/libatbus">libatbus&lt;/a>的文档里&lt;/p>
&lt;/blockquote>
&lt;h2 id="目录">目录&lt;/h2>
&lt;!-- raw HTML omitted -->
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>好久没写总结啦，最近一段时间比较忙，抽出的空闲时间都在不断完善之前提到的一个进程间通信lib的想法和实现（&lt;a href="https://github.com/atframework/libatbus">libatbus&lt;/a>）。&lt;/p></description></item><item><title>关于BUS通信系统的一些思考（二）</title><link>//owent.net/2014/1099.html</link><pubDate>Tue, 05 Aug 2014 14:08:20 +0000</pubDate><guid>//owent.net/2014/1099.html</guid><description>&lt;blockquote>
&lt;p>接上文&lt;/p>
&lt;/blockquote>
&lt;h2 id="目录">目录&lt;/h2>
&lt;!-- raw HTML omitted -->
&lt;h2 id="bus系统的设计思路">BUS系统的设计思路&lt;/h2>
&lt;p>虽然我很不愿意再设计一套BUS系统，但是现有的一些确实都没有特别符合我的口味的。所以还是尝试设计一个出来。&lt;/p>
&lt;h3 id="结构设计">结构设计&lt;/h3>
&lt;p>简单来说，我希望BUS系统可以简单、高效、稳定。&lt;/p></description></item><item><title>关于BUS通信系统的一些思考（一）</title><link>//owent.net/2014/1090.html</link><pubDate>Fri, 01 Aug 2014 14:21:53 +0000</pubDate><guid>//owent.net/2014/1090.html</guid><description>&lt;h2 id="目录">目录&lt;/h2>
&lt;!-- raw HTML omitted -->
&lt;h2 id="概述">概述&lt;/h2>
&lt;p>如何保证一个进程或线程能安全稳定地把一段消息发送到另一个进程和线程，甚至是另一台机器的进程或线程，再或是要通过代理转发到另一个进程或线程，一直是一个比较麻烦的问题。&lt;/p></description></item></channel></rss>