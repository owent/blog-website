<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Csharp on I'm OWenT</title><link>//owent.net/tags/csharp.html</link><description>Recent content in Csharp on I'm OWenT</description><generator>Hugo</generator><language>zh-cn</language><copyright>&lt;a rel="license" href="https://github.com/owent/blog-hugo/blob/master/LICENSE.md">&lt;img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/80x15.png" />&lt;/a></copyright><lastBuildDate>Fri, 03 Mar 2017 18:20:31 +0000</lastBuildDate><atom:link href="//owent.net/tags/csharp/index.xml" rel="self" type="application/rss+xml"/><item><title>开源项目得一些小维护</title><link>//owent.net/2017/1373.html</link><pubDate>Fri, 03 Mar 2017 18:20:31 +0000</pubDate><guid>//owent.net/2017/1373.html</guid><description>&lt;p>其实我那几个特别是工具类得开源项目一致都有维护和更新，但是每次更新得量和要点并不怎么突出所以一致也没写点什么。但是偶尔吗也会碰到一些稍微值得记录的东西，但是又不多所以很多都遗漏掉了。&lt;/p></description></item><item><title>atapp的c binding和c#适配</title><link>//owent.net/2017/1367.html</link><pubDate>Wed, 15 Feb 2017 23:27:51 +0000</pubDate><guid>//owent.net/2017/1367.html</guid><description>&lt;p>这两天在做服务器框架的C的接口导出和C#的接入。之所以要做这么个东西是因为之前的服务器框架（&lt;a href="https://github.com/atframework/atsf4g-co">atsf4g-co&lt;/a>）已经完成了通信层面和基本设计模式的细节部分，而且基本算是最大化性能了吧。但是现在的项目的战斗引擎是从以前Unity游戏上抽象而来的，全部由C#编写。再加上最近再考虑接入实时战斗，这样就不能像之前一样用一个简单的通信方式了，必须使用一个高效并且实时性更高通信机制。需要能够处理好比较高的集中式的组播和容灾的通信方式。于是就有了把之前的C++的框架抽离出API来驱动逻辑的想法。这样也比较容易地兼顾开发成本和性能之间地权衡。&lt;/p>
&lt;h2 id="c-binding">C Binding&lt;/h2>
&lt;p>那么抽离出框架地目的是抽象出应用底层，这个刚好是&lt;a href="https://github.com/atframework/libatapp">atapp&lt;/a>做的事，而且&lt;a href="https://github.com/atframework/libatapp">atapp&lt;/a>的层面对外暴露的接口数量也比较少，使用比较简单，所以索性就直接对它下手了。&lt;/p></description></item></channel></rss>