<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Poj on I'm OWenT</title><link>//owent.net/tags/poj.html</link><description>Recent content in Poj on I'm OWenT</description><generator>Hugo</generator><language>zh-cn</language><copyright>&lt;a rel="license" href="https://github.com/owent/blog-hugo/blob/master/LICENSE.md">&lt;img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/80x15.png" />&lt;/a></copyright><lastBuildDate>Mon, 15 Jul 2013 18:39:41 +0000</lastBuildDate><atom:link href="//owent.net/tags/poj/index.xml" rel="self" type="application/rss+xml"/><item><title>POJ 2192 Zipper HDU 2059 龟兔赛跑</title><link>//owent.net/2013/861.html</link><pubDate>Mon, 15 Jul 2013 18:39:41 +0000</pubDate><guid>//owent.net/2013/861.html</guid><description>&lt;p>今天心情好，刷了两到ACM水题，思路很简单都在注释里，所以直接贴代码:&lt;/p>
&lt;pre>&lt;code class="language-cpp">/**
 * @file 龟兔赛跑.cpp
 * @brief 龟兔赛跑 AC代码 (DP)
 * DP方程式: [到第i的充电站的最短时间] = [到最后一个冲了电的充电站的最短时间] + [那个充电站到第i个充电站的时间]
 *
 * @link http://acm.hdu.edu.cn/showproblem.php?pid=2059
 * @version 1.0
 * @author OWenT
 * @date 2013.07.15
 *
 * @history
 *
 *
 */

#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;iostream&amp;gt;
#include &amp;lt;cstring&amp;gt;
#include &amp;lt;algorithm&amp;gt;
#include &amp;lt;set&amp;gt;
#include &amp;lt;numeric&amp;gt;

int pn[128];
double dp[128]; /** dp[i] 表示 到第i个充电站的最小时间(0为开始位置，n+1为终点) **/

double calc_charge_time(int dis, int v1, int v2, int c) {
 if (dis &amp;lt;= c)
 return 1.0 * dis / v1;

 return 1.0 * c / v1 + 1.0 * (dis - c) / v2;
}

int main(int argc, char* argv[]) {
 using namespace std;

 double eps = std::numeric_limits&amp;lt;double&amp;gt;::epsilon();
 int l, n, c, t, vr, v1, v2;

 while(cin&amp;gt;&amp;gt; l) {
 cin &amp;gt;&amp;gt; n&amp;gt;&amp;gt; c&amp;gt;&amp;gt; t&amp;gt;&amp;gt; vr&amp;gt;&amp;gt; v1&amp;gt;&amp;gt; v2;

 pn[0] = 0; /** 0为起点 **/
 for (int i = 1; i &amp;lt;= n; ++ i) {
 cin&amp;gt;&amp;gt; pn[i];
 }
 pn[n + 1] = l; /** n+1为终点 **/

 memset(dp, 0, sizeof(dp));
 for(int i = 0; i &amp;lt;= n + 1; ++ i) {
 dp[i] = calc_charge_time(pn[i] - pn[0], v1, v2, c);
 }

 for(int i = 1; i &amp;lt;= n + 1; ++ i) {
 for(int j = 0; j &amp;lt; i; ++ j) {
 double tc = calc_charge_time(pn[i] - pn[j], v1, v2, c) + t + dp[j];
 dp[i] = std::min(tc, dp[i]);
 }
 
 }

 double rt = 1.0 * l / vr, tt = dp[n + 1];

 if (tt &amp;lt; rt)
 puts(&amp;quot;What a pity rabbit!&amp;quot;);
 else
 puts(&amp;quot;Good job,rabbit!&amp;quot;);
 }

 return 0;
}

/**
 * @file Zipper.cpp
 * @brief Zipper AC代码 (DP)
 * @link http://poj.org/problem?id=2192
 * DP方程式: [A串消耗个数i][B串消耗个数j] = min{[A串消耗个数i - 1][B串消耗个数j]|[A串消耗个数i][B串消耗个数j + 1]}
 * 以上分支选取条件是 A或B的新选用字符和C串新字符匹配
 *
 * @version 1.0
 * @author OWenT
 * @date 2013.07.15
 *
 * @history
 *
 *
 */

#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;cstring&amp;gt;
#include &amp;lt;algorithm&amp;gt;
#include &amp;lt;set&amp;gt;
#include &amp;lt;numeric&amp;gt;


char strA[256], strB[256], strC[512];
int dp[256][256]; /** dp[i][j] = k 表示A消耗了i个字符，B消耗了j个字符，拼成的C串消耗了k个字符（其实就是i+j） **/

int main(int argc, char* argv[]) {
 using namespace std;
 int s, n;

 scanf(&amp;quot;%d&amp;quot;, &amp;amp;n);
 for( s = 0; s &amp;lt; n; ++ s) {
 scanf(&amp;quot;%s %s %s&amp;quot;, strA, strB, strC);
 int lenA = strlen(strA);
 int lenB = strlen(strB);
 int lenC = strlen(strC);
 bool bFlag = false;

 if ( lenC != lenA + lenB ) {
 printf(&amp;quot;Data set %d: no\n&amp;quot;, s + 1);
 continue;
 }

 memset(dp, 0, sizeof(dp));

 if (strA[0] == strC[0])
 dp[1][0] = 1;
 if (strB[0] == strC[0])
 dp[0][1] = 1;

 for (int i = 0; i &amp;lt;= lenA; ++ i) {
 for (int j = 0; j &amp;lt;= lenB; ++ j) {
 if (0 == dp[i][j])
 continue;

 int ri = i + 1, rj = j + 1;

 if (strA[i] == strC[dp[i][j]]) {
 dp[ri][j] = dp[i][j] + 1;
 if (ri + j == lenC)
 bFlag = true;
 }

 if (strB[j] == strC[dp[i][j]]) {
 dp[i][rj] = dp[i][j] + 1;
 if (i + rj == lenC)
 bFlag = true;
 }
 }
 }

 printf(&amp;quot;Data set %d: %s\n&amp;quot;, s + 1, bFlag? &amp;quot;yes&amp;quot;: &amp;quot;no&amp;quot;);
 }

 return 0;
}

&lt;/code>&lt;/pre></description></item><item><title>线段树相关问题 (引用 PKU POJ题目) 整理</title><link>//owent.net/2010/8.html</link><pubDate>Tue, 12 Oct 2010 16:45:11 +0000</pubDate><guid>//owent.net/2010/8.html</guid><description>&lt;h2 id="1rangeminimummaximum-query问题计算单调区间内出现最多少的次数">1.RangeMinimum、Maximum Query问题（计算单调区间内出现最多（少）的次数）&lt;/h2>
&lt;p>对元素的起点做离散化，再把离散化后的位置作为线段树的[l, r),记录次数为t.&lt;/p>
&lt;p>对输入区间a, b:&lt;/p></description></item><item><title>POJ PKU 1474 Video Surveillance 解题报告</title><link>//owent.net/2010/10.html</link><pubDate>Mon, 04 Oct 2010 11:49:56 +0000</pubDate><guid>//owent.net/2010/10.html</guid><description>&lt;p>题目链接：&lt;a href="http://poj.org/problem?id=1474">http://poj.org/problem?id=1474&lt;/a>&lt;/p>
&lt;p>写这题的目的是看完了zzy的论文，写了半平面交，验证一下正确性，结果发现我写的问题还是很多的。&lt;/p>
&lt;p>题目大意是问能不能放一个摄像机，使得摄像机能看到整个多边形内部。&lt;/p></description></item><item><title>POJ PKU 2826 An Easy Problem?! 解题报告</title><link>//owent.net/2010/19.html</link><pubDate>Sat, 07 Aug 2010 08:54:04 +0000</pubDate><guid>//owent.net/2010/19.html</guid><description>&lt;p>题目链接：
&lt;a href="http://acm.pku.edu.cn/JudgeOnline/problem?id=2826">http://acm.pku.edu.cn/JudgeOnline/problem?id=2826&lt;/a>&lt;/p>
&lt;p>大致意思是给你两条线段，问组成的开口向上的V形区域能盛多少雨水。雨水是垂直落下的。&lt;/p>
&lt;p>显然线段不相交，或者平行，重合，或者有一条斜率为0时结果为0.00&lt;/p></description></item><item><title>POJ PKU 1986 Distance Queries 解题报告</title><link>//owent.net/2010/22.html</link><pubDate>Fri, 16 Jul 2010 04:57:10 +0000</pubDate><guid>//owent.net/2010/22.html</guid><description>&lt;p>题目链接：&lt;a href="http://acm.pku.edu.cn/JudgeOnline/problem?id=1986">http://acm.pku.edu.cn/JudgeOnline/problem?id=1986&lt;/a>&lt;/p>
&lt;p>这是一道并查集+树的题，采用Tarjan离线算法&lt;/p>
&lt;p>首先BS一下出题的人，也太懒了吧，还要我们看1984题才知道输入&lt;/p>
&lt;p>题目的意思是告诉一个节点数为40000的树，问我们两个节点间的距离。实际上就是找出公共父节点，Tarjan算法写挫了很容易TLE，我开始用Vector就写搓了，结果TLE，后来重写，自己写邻接表然后AC了。&lt;/p></description></item><item><title>POJ PKU 2446 Chessboard 解题报告</title><link>//owent.net/2010/23.html</link><pubDate>Fri, 16 Jul 2010 04:51:23 +0000</pubDate><guid>//owent.net/2010/23.html</guid><description>&lt;p>题目链接：&lt;a href="http://acm.pku.edu.cn/JudgeOnline/problem?id=2446">http://acm.pku.edu.cn/JudgeOnline/problem?id=2446&lt;/a>&lt;/p>
&lt;p>这是一道匹配题，把行数（r）和列数（c）按（r+c）%2分成两组，然后连边，做一次二分图匹配，可以直接用匈牙利算法&lt;/p>
&lt;p>匹配数等于两组的元素个数则为YES，否则NO&lt;/p></description></item><item><title>POJ PKU 3659 Cell Phone Network 解题报告</title><link>//owent.net/2010/28.html</link><pubDate>Tue, 01 Jun 2010 15:51:00 +0000</pubDate><guid>//owent.net/2010/28.html</guid><description>&lt;p>题目链接：&lt;a href="http://acm.pku.edu.cn/JudgeOnline/problem?id=3659">http://acm.pku.edu.cn/JudgeOnline/problem?id=3659&lt;/a>&lt;/p>
&lt;p>这题不算难题了，基本算是中等题&lt;/p>
&lt;p>题目大意是给出一颗树，在一些点建一个信号塔，信号塔覆盖范围是其所在点和邻近点，问最少几个信号塔可以覆盖全区域&lt;/p></description></item><item><title>GCD Determinant 解题报告</title><link>//owent.net/2010/35.html</link><pubDate>Mon, 26 Apr 2010 14:33:11 +0000</pubDate><guid>//owent.net/2010/35.html</guid><description>&lt;p>&lt;a href="http://www.cn210.com/onlinejudge/problemshow.php?pro_id=98">http://www.cn210.com/onlinejudge/problemshow.php?pro_id=98&lt;/a>&lt;/p>
&lt;p>我们的OJ&lt;/p>
&lt;h2 id="description">Description&lt;/h2>
&lt;p>We say that a set $$S = {x1, x2, &amp;hellip;, xn}$$ is factor closed if for any xi ∈ S and any divisor d of xi we have d ∈ S. Let&amp;rsquo;s build a GCD matrix (S) = (sij), wheresij = GCD(xi, xj) - the greatest common divisor of xi and xj. Given the factor closed set S, find the value of the determinant:&lt;/p></description></item><item><title>PKU POJ 3757 Simple Distributed storage system 解题报告</title><link>//owent.net/2010/41.html</link><pubDate>Sat, 10 Apr 2010 17:10:47 +0000</pubDate><guid>//owent.net/2010/41.html</guid><description>&lt;p>题目链接：http://acm.pku.edu.cn/JudgeOnline/problem?id=3757&lt;/p>
&lt;p>题目大意&lt;/p>
&lt;p>第一行输入n，k，f表示从n个服务器里选k个，传输大小为f（以Mb为单位）的文件&lt;/p></description></item><item><title>PKU POJ 2976 Dropping tests 解题报告</title><link>//owent.net/2010/43.html</link><pubDate>Fri, 09 Apr 2010 17:04:09 +0000</pubDate><guid>//owent.net/2010/43.html</guid><description>&lt;p>题目链接： &lt;a href="http://acm.pku.edu.cn/JudgeOnline/problem?id=2976">http://acm.pku.edu.cn/JudgeOnline/problem?id=2976&lt;/a>&lt;/p>
&lt;p>0-1分数规划&lt;/p>
&lt;p>最优比例生成树&lt;/p>
&lt;p>迭代法&lt;/p>
&lt;p>证明：（前几次都是看别人的，这次自己证明）&lt;/p>
&lt;p>对于集合s，令l* = max{ a(x) / b(x) } = a(x*) / b(x*).l&lt;em>为所求的最优解，x&lt;/em>为对应的集合&lt;/p></description></item><item><title>PKU POJ 2728 Desert King 解题报告</title><link>//owent.net/2010/45.html</link><pubDate>Wed, 07 Apr 2010 10:51:26 +0000</pubDate><guid>//owent.net/2010/45.html</guid><description>&lt;p>题目链接：&lt;a href="http://acm.pku.edu.cn/JudgeOnline/problem?id=2728">http://acm.pku.edu.cn/JudgeOnline/problem?id=2728&lt;/a>&lt;/p>
&lt;p>和3757一样都是01分数规划的题，不同的是3757是用的二分，这里用的是Prim&lt;/p>
&lt;p>0-1背包部分和3757一样&lt;/p>
&lt;p>令m(l) = min{∑(1.0 * h[i][j] - l * dis[i][j] )}&lt;/p></description></item><item><title>PKU POJ 1141 Brackets Sequence 解题报告</title><link>//owent.net/2010/46.html</link><pubDate>Mon, 05 Apr 2010 16:52:28 +0000</pubDate><guid>//owent.net/2010/46.html</guid><description>&lt;p>链接: &lt;a href="http://acm.pku.edu.cn/JudgeOnline/problem?id=1141">http://acm.pku.edu.cn/JudgeOnline/problem?id=1141&lt;/a>
题目意思是输入一些括号，补充括号使之成为没有错误的括号就是只能有括号组在括号组里面，不能出现([)]或者([)]一类的情况
方法是DP，有点绕的DP
DP方程是 &lt;em>bc[i][j] = min(bc[i][k] + bc[k][j])&lt;/em> 注：bc[i][j]表示字符i和字符j之间需要插入几个括弧
然后尽量多地分割字符串
不解释，贴代码：&lt;/p></description></item><item><title>POJ PKU 2155 Matrix 解题报告</title><link>//owent.net/2010/47.html</link><pubDate>Mon, 05 Apr 2010 11:01:59 +0000</pubDate><guid>//owent.net/2010/47.html</guid><description>&lt;p>这道题是我专门为了了解和学习树状数组而写的&lt;/p>
&lt;p>这题用树状数组记录翻转次数,然后mod一个2,也可以不断地取反&lt;/p>
&lt;p>还要用到二维的树状数组.于是我专门写了个模板用&lt;/p></description></item><item><title>PKU POJ 1720 SQUARES 解题报告</title><link>//owent.net/2010/48.html</link><pubDate>Sat, 03 Apr 2010 17:12:41 +0000</pubDate><guid>//owent.net/2010/48.html</guid><description>&lt;p>题目链接：http://acm.pku.edu.cn/JudgeOnline/problem?id=1720&lt;/p>
&lt;p>这题纯计算几何就搞定了，开始我写了个很长很长的代码，但是Wa掉，也不知道是代码那里有疏漏还是精度问题&lt;/p></description></item><item><title>PKU POJ 1724 ROADS 解题报告</title><link>//owent.net/2010/50.html</link><pubDate>Fri, 02 Apr 2010 17:07:50 +0000</pubDate><guid>//owent.net/2010/50.html</guid><description>&lt;p>看来我的搜索真的很烂，简单的搜索都搞定的这么痛苦&lt;/p>
&lt;p>题目链接：http://acm.pku.edu.cn/JudgeOnline/problem?id=1724&lt;/p></description></item><item><title>POJ PKU Let's Go to the Movies 解题报告</title><link>//owent.net/2010/52.html</link><pubDate>Wed, 31 Mar 2010 16:04:21 +0000</pubDate><guid>//owent.net/2010/52.html</guid><description>&lt;p>题目链接：&lt;a href="http://acm.pku.edu.cn/JudgeOnline/problem?id=3513">http://acm.pku.edu.cn/JudgeOnline/problem?id=3513&lt;/a>&lt;/p>
&lt;p>题目大意是输入树状的家庭关系，问怎么买票（买家庭票还是个人票）最省钱并且票的数量最少&lt;/p>
&lt;p>这道题是一道Hash+树状DP问题。编码长度相当可观，需要较好的编码能力&lt;/p></description></item><item><title>POJ PKU 1065 Wooden Sticks 3636 Nested Dolls 解题报告</title><link>//owent.net/2010/57.html</link><pubDate>Wed, 24 Feb 2010 15:43:54 +0000</pubDate><guid>//owent.net/2010/57.html</guid><description>&lt;p>3636 Nested Dolls&lt;/p>
&lt;p>题目链接：[http://acm.pku.edu.cn/JudgeOnline/problem?id=3636&lt;/p>
&lt;p>](&lt;a href="http://acm.pku.edu.cn/JudgeOnline/problem?id=3636">http://acm.pku.edu.cn/JudgeOnline/problem?id=3636&lt;/a>)好吧，这题我看了解题报告。而且解题报告有错误的。只考虑w递增，没考虑w值相等的情况。&lt;/p>
&lt;p>我自己这里加进去了判断。主要是看解题报告后才知道数据这么弱，就按他的写了&lt;/p></description></item><item><title>POJ PKU 3631 Cuckoo Hashing 解题报告</title><link>//owent.net/2010/58.html</link><pubDate>Wed, 24 Feb 2010 10:14:57 +0000</pubDate><guid>//owent.net/2010/58.html</guid><description>&lt;p>题目链接：&lt;a href="http://acm.pku.edu.cn/JudgeOnline/problem?id=3631">http://acm.pku.edu.cn/JudgeOnline/problem?id=3631&lt;/a>&lt;/p>
&lt;p>我讨厌这么长的题目&lt;/p>
&lt;p>这题是模拟那个Hash算法，有点像我之前转载的那篇文章里提到的Hash&lt;/p>
&lt;p>&lt;a href="https://www.owent.net/2009/87.html">打造最快的Hash表(转) [以暴雪的游戏的Hash为例]&lt;/a> 这里是用两个Hash函数算出两个Hash值h1和h2，如果h1位置已经被占用就检查h2位置，如果都被占用就把原来的替换掉再给原来的字符串重新计算映射。这样下去可能出现死循环。会出现死循环就输出&lt;/p></description></item><item><title>POJ PKU 2596 Dice Stacking 解题报告</title><link>//owent.net/2010/59.html</link><pubDate>Fri, 19 Feb 2010 12:31:50 +0000</pubDate><guid>//owent.net/2010/59.html</guid><description>&lt;p>状态压缩+DP&lt;/p>
&lt;p>1972的增强版&lt;/p>
&lt;p>题目链接：&lt;a href="http://acm.pku.edu.cn/JudgeOnline/problem?id=2596">http://acm.pku.edu.cn/JudgeOnline/problem?id=2596&lt;/a>&lt;/p>
&lt;p>题意是给出小于10个的骰子，要求竖着叠成一条，而且每两个相接的骰子相接的面的数字相同&lt;/p>
&lt;p>求侧面数字的最大和。如果叠不出来输出0&lt;/p></description></item><item><title>POJ PKU 1990 MooFest 解题报告</title><link>//owent.net/2009/63.html</link><pubDate>Wed, 23 Dec 2009 14:12:52 +0000</pubDate><guid>//owent.net/2009/63.html</guid><description>&lt;p>为什么我用线段数这么不灵活呢？&lt;/p>
&lt;p>大概思路是线段数记录某牛之前的坐标小于这个牛的牛的坐标和和牛的个数&lt;/p>
&lt;p>然后其他部分线性数组记录&lt;/p>
&lt;p>OK，贴代码&lt;/p>
&lt;pre>&lt;code class="language-cpp">#include &amp;lt;iostream&amp;gt;
#include &amp;lt;cstdio&amp;gt;
#include &amp;lt;cstring&amp;gt;
#include &amp;lt;algorithm&amp;gt;
using namespace std;

#define MAXN 20005
class cow
{
public:
 int v;
 int pos;
 cow(){};
 ~cow(){};
};

bool cmp(cow a,cow b)
{
 return a.v &amp;lt; b.v;
}
cow cw[MAXN];
long long belowXNT[MAXN];//树状数组，保存小于等于某坐标的牛的个数,计算时使用
long long belowXN[MAXN];//一般数组，保存小于等于某坐标和索引的牛的个数
long long velowXRT[MAXN];//树状数组，保存索引小于等于某的牛且坐标也小于它的牛的坐标之和,计算时使用
long long velowXR[MAXN];//一般数组，保存索引小于等于某的牛且坐标也小于它的牛的坐标之和
long long velowXRA[MAXN];//一般数组，保存小于等于某牛的坐标之和

int lowbit(int t)
{
 return t&amp;amp;(t^(t-1));
}
void setVal(int pos, int num, long long treeG[], int maxn)
{
 while (pos &amp;lt;= maxn)
 {
 treeG[pos] += num;
 pos += lowbit(pos);
 }
}
long long getSum(int pos, long long treeG[])
{
 long long sum = 0;
 while (pos &amp;gt; 0)
 {
 sum += treeG[pos];
 pos -= lowbit(pos);
 }
 return sum;
}



int main()
{
 int i,n;
 long long output = 0;
 memset(belowXN, 0, sizeof(belowXN));
 memset(belowXNT, 0, sizeof(belowXN));
 memset(velowXR, 0, sizeof(velowXR));
 memset(velowXRA, 0, sizeof(velowXRA));
 memset(velowXRT, 0, sizeof(velowXRT));
 scanf(&amp;quot;%d&amp;quot;,&amp;amp;n);
 for(i = 0 ; i &amp;lt; n ; i ++)
 scanf(&amp;quot;%d %d&amp;quot;, &amp;amp;cw[i].v, &amp;amp;cw[i].pos);

 sort(cw, cw + n, cmp);
 for(i = 0 ; i &amp;lt; n ; i ++)
 {
 velowXRA[i] = velowXRA[i - 1] + cw[i].pos;
 setVal(cw[i].pos, 1, belowXNT, MAXN);
 setVal(cw[i].pos, cw[i].pos, velowXRT, MAXN);
 velowXR[i] = getSum(cw[i].pos, velowXRT);
 belowXN[i] = getSum(cw[i].pos, belowXNT);
 }

 for(i = 1 ; i &amp;lt; n ; i ++)
 //output += cw[i].v * ((belowXN[i] - 1) * cw[i].pos - velowXR[i] + cw[i].pos + velowXRA[i] - velowXR[i] - (i - belowXN[i] + 1) * cw[i].pos);
 output += cw[i].v * ((belowXN[i] - i + belowXN[i] - 1 ) * cw[i].pos - 2 * velowXR[i] + velowXRA[i]);//这里是上面式子的简化版

 printf(&amp;quot;%lld\n&amp;quot;,output);
 return 0;
}
&lt;/code>&lt;/pre></description></item><item><title>POJ PKU 2378 Tree Cutting 解题报告</title><link>//owent.net/2009/64.html</link><pubDate>Wed, 23 Dec 2009 14:09:13 +0000</pubDate><guid>//owent.net/2009/64.html</guid><description>&lt;p>又来发解题报告了&lt;/p>
&lt;p>这回是树状DP&lt;/p>
&lt;pre>&lt;code class="language-cpp">/*
 * 树状DP
 * 首先把数据想象成树状的
 * 由于输入数据为树状，不需要构建树
 * 可令degree[i]为包括i且以i为根节点的所有子节点数量
 * dp[i]为删除i后的最大子节点数量或父亲节点数量 （这里我理解了很久）
 */
#include&amp;lt;iostream&amp;gt;
#include&amp;lt;cstdio&amp;gt;
#include&amp;lt;vector&amp;gt;
using namespace std;
vector&amp;lt;int&amp;gt;chirld[10002];
int dp[10002] = {0}
 ,degree[10002] = {0}
 ,isJudged[10002] = {0};

int search(int pos,int &amp;amp;n);
int main()
{
 int n,i,a,b;
 bool isnone = true;
 scanf(&amp;quot;%d&amp;quot;,&amp;amp;n);
 for(i = 1 ; i &amp;lt; n ; i ++)
 {
 scanf(&amp;quot;%d %d&amp;quot;,&amp;amp;a,&amp;amp;b);
 chirld[a].push_back(b);
 chirld[b].push_back(a);
 }

 search(1 , n);

 for(i = 1 ; i &amp;lt;= n ; i ++)
 if(dp[i] * 2 &amp;lt;= n)
 printf(&amp;quot;%d\n&amp;quot;,i) , isnone = false;

 if(isnone)
 printf(&amp;quot;NONE\n&amp;quot;);
 return 0;
}

int search(int pos,int &amp;amp;n)
{
 int i,j;
 degree[pos] = 1;
 isJudged[pos] = 1;
 dp[pos] = 0;

 for(i = 0 ; i &amp;lt; chirld[pos].size() ; i ++)
 {
 if(!isJudged[chirld[pos].at(i)])//如果已经判断过就是父亲节点了
 {
 degree[pos] += search(chirld[pos].at(i) , n);
 if(dp[pos] &amp;lt; degree[chirld[pos].at(i)])
 dp[pos] = degree[chirld[pos].at(i)];
 }
 }

 if(dp[pos] &amp;lt; n - degree[pos])//判断父亲节点数量
 dp[pos] = n - degree[pos];
 return degree[pos];
}
&lt;/code>&lt;/pre></description></item><item><title>POJ PKU 2528 Mayor's posters 解题报告</title><link>//owent.net/2009/65.html</link><pubDate>Wed, 18 Nov 2009 17:49:55 +0000</pubDate><guid>//owent.net/2009/65.html</guid><description>&lt;p>题目链接: &lt;a href="http://acm.pku.edu.cn/JudgeOnline/bbs?problem_id=2528">http://acm.pku.edu.cn/JudgeOnline/bbs?problem_id=2528&lt;/a>&lt;/p>
&lt;p>这题又是线段树+离散化&lt;/p>
&lt;p>慢慢的对离散化有点感觉了,但是这题我还是错了3次&lt;/p>
&lt;p>题目大意是一层一层地叠板子,问最后能看到几块&lt;/p>
&lt;p>输入是板子的开始和结束位置&lt;/p></description></item><item><title>POJ PKU 3277 City Horizon 解题报告</title><link>//owent.net/2009/67.html</link><pubDate>Thu, 12 Nov 2009 17:23:39 +0000</pubDate><guid>//owent.net/2009/67.html</guid><description>&lt;p>题目链接:&lt;a href="http://acm.pku.edu.cn/JudgeOnline/problem?id=3277">http://acm.pku.edu.cn/JudgeOnline/problem?id=3277&lt;/a>&lt;/p>
&lt;p>线段树+离散化&lt;/p>
&lt;p>ACM预选赛过去了,可是我们队什么都没拿到,这给我们的打击是相当大的,这也很大程度上体现了我们的不足&lt;/p>
&lt;p>一直没能静下心,来,今天决定不能再这么悲伤下去,我要奋斗,继续学习,就从之前的断点线段树开始&lt;/p></description></item><item><title>POJ PKU 2549 Sumsets 解题报告</title><link>//owent.net/2009/69.html</link><pubDate>Sun, 04 Oct 2009 15:54:36 +0000</pubDate><guid>//owent.net/2009/69.html</guid><description>&lt;p>&lt;a href="http://acm.pku.edu.cn/JudgeOnline/problem?id=2549">题目链接http://acm.pku.edu.cn/JudgeOnline/problem?id=2549&lt;/a>&lt;/p>
&lt;p>这道题伤了我很久脑筋&lt;/p>
&lt;p>因为是a+b+c=d,数据量是1000,很自然地想到a+b=d-c&lt;/p>
&lt;p>这样转化为n^2的算法.&lt;/p>
&lt;p>但是我开始枚举d-c的集合二分查找a+b的几何不知道为什么WA掉了&lt;/p></description></item><item><title>POJ 2606 Rabbit hunt 2780 Linearity 1118 Lining Up 解题报告</title><link>//owent.net/2009/88.html</link><pubDate>Mon, 20 Jul 2009 14:50:15 +0000</pubDate><guid>//owent.net/2009/88.html</guid><description>&lt;p>POJ打破传统,以前是做一题送一题,现在是做一题送两题,那么我们就不用客气了&lt;/p>
&lt;p>言归正传 题号:&lt;a href="http://acm.pku.edu.cn/JudgeOnline/problem?id=2606">2606 Rabbit hunt&lt;/a> &lt;a href="http://acm.pku.edu.cn/JudgeOnline/problem?id=2780">2780 Linearity&lt;/a> &lt;a href="http://acm.pku.edu.cn/JudgeOnline/problem?id=1118">1118 Lining Up&lt;/a>&lt;/p>
&lt;p>大致题意是输入N个点.计算能穿过最多的点的直线,并输出最大点的个数&lt;/p></description></item><item><title>POJ 3267 The Cow Lexicon 解题报告</title><link>//owent.net/2009/90.html</link><pubDate>Wed, 15 Jul 2009 15:51:39 +0000</pubDate><guid>//owent.net/2009/90.html</guid><description>&lt;p>&lt;a href="http://acm.pku.edu.cn/JudgeOnline/problem?id=3267">POJ 3267 The Cow Lexicon&lt;/a>&lt;/p>
&lt;p>这题是一道DP问题,我的想法如下:&lt;/p>
&lt;p>1.可以令
deleteNum[pos]为输入字符串在pos处需要删除的最少字符数量;&lt;/p>
&lt;p>2.如果输入字符串长度为len,则初始化deleteNum[len] = 0;(字符串由0开始计数)&lt;/p></description></item></channel></rss>