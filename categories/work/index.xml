<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Work on I'm OWenT</title><link>//owent.net/categories/work.html</link><description>Recent content in Work on I'm OWenT</description><generator>Hugo</generator><language>zh-cn</language><copyright>&lt;a rel="license" href="https://github.com/owent/blog-hugo/blob/master/LICENSE.md">&lt;img alt="知识共享许可协议" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-sa/4.0/80x15.png" />&lt;/a></copyright><lastBuildDate>Sat, 01 Jul 2017 15:57:29 +0000</lastBuildDate><atom:link href="//owent.net/categories/work/index.xml" rel="self" type="application/rss+xml"/><item><title>libcopp v2的第一波优化完成</title><link>//owent.net/2017/1466.html</link><pubDate>Sat, 01 Jul 2017 15:57:29 +0000</pubDate><guid>//owent.net/2017/1466.html</guid><description>&lt;p>之前测出来&lt;a href="https://github.com/owent/libcopp">libcopp&lt;/a>还有一些列优化点，但是要破坏之前的API，所以整理了一下优化的想法和方案。&lt;/p>
&lt;h2 id="预留空间和合并分配">预留空间和合并分配&lt;/h2>
&lt;p>之前有太多的堆内存分配了，导致很多碎片。那么第一个想法就是协程对象可以分配在栈上，runner也可以分配在栈上。然后还可以加一个自定义预留长度。每个对象对齐到sizeof(long)，总长度对齐到64 Bytes。&lt;/p></description></item><item><title>libcopp(v2) vs goroutine性能测试</title><link>//owent.net/2017/1465.html</link><pubDate>Sat, 10 Jun 2017 15:57:29 +0000</pubDate><guid>//owent.net/2017/1465.html</guid><description>&lt;p>本来是没想写这个对比。无奈之前和&lt;a href="https://github.com/yuanzhubi/call_in_stack">call_in_stack&lt;/a>的作者聊了一阵，发现了一些&lt;a href="https://github.com/owent/libcopp">libcopp&lt;/a>的改进空间。然后顺便看了新的boost.context的cc部分的代码，有所启发。想给&lt;a href="https://github.com/owent/libcopp">libcopp&lt;/a>做一些优化，主要集中在减少分配次数从而减少内存碎片；在支持的编译器里有些地方用右值引用来减少不必要的拷贝；减少原子操作和减少L1cache miss几个方面。&lt;/p>
&lt;p>之后改造了茫茫多流程和接口后出了v2版本，虽然没完全优化完，但是组织结构已经定型了，可以用来做压力测试。为了以后方便顺便还把cppcheck和clang-analyzer的静态分析工具写进了dev脚本。然后万万没想到的是，在大量协程的情况下，benchmark的结果性能居然比原来还下降了大约1/3。&lt;/p></description></item><item><title>libatbus的几个藏得很深的bug</title><link>//owent.net/2017/1411.html</link><pubDate>Sun, 23 Apr 2017 23:48:54 +0000</pubDate><guid>//owent.net/2017/1411.html</guid><description>&lt;p>在写这篇文章前，我突然想到以前流行了一段时间的服务器面试题：当一个BUG只有几百万分之一的概率会出现，怎么办？这个问题在这个BUG里只是毛毛雨而已，因为这次的BUG的&lt;strong>出现概率是夸张的三亿分之一&lt;/strong>。&lt;/p></description></item><item><title>用cmake交叉编译到iOS和Android</title><link>//owent.net/2017/1405.html</link><pubDate>Sun, 16 Apr 2017 03:37:17 +0000</pubDate><guid>//owent.net/2017/1405.html</guid><description>&lt;p>最近看了下最新版本的cmake的文档，很惊喜地发现他已经支持直接设置Android和OSX的一些变量了，然后有瞄了一眼NDK，发现里面现在也停工官方的cmake支持。&lt;/p></description></item><item><title>开源项目得一些小维护</title><link>//owent.net/2017/1373.html</link><pubDate>Fri, 03 Mar 2017 18:20:31 +0000</pubDate><guid>//owent.net/2017/1373.html</guid><description>&lt;p>其实我那几个特别是工具类得开源项目一致都有维护和更新，但是每次更新得量和要点并不怎么突出所以一致也没写点什么。但是偶尔吗也会碰到一些稍微值得记录的东西，但是又不多所以很多都遗漏掉了。&lt;/p></description></item><item><title>atapp的c binding和c#适配</title><link>//owent.net/2017/1367.html</link><pubDate>Wed, 15 Feb 2017 23:27:51 +0000</pubDate><guid>//owent.net/2017/1367.html</guid><description>&lt;p>这两天在做服务器框架的C的接口导出和C#的接入。之所以要做这么个东西是因为之前的服务器框架（&lt;a href="https://github.com/atframework/atsf4g-co">atsf4g-co&lt;/a>）已经完成了通信层面和基本设计模式的细节部分，而且基本算是最大化性能了吧。但是现在的项目的战斗引擎是从以前Unity游戏上抽象而来的，全部由C#编写。再加上最近再考虑接入实时战斗，这样就不能像之前一样用一个简单的通信方式了，必须使用一个高效并且实时性更高通信机制。需要能够处理好比较高的集中式的组播和容灾的通信方式。于是就有了把之前的C++的框架抽离出API来驱动逻辑的想法。这样也比较容易地兼顾开发成本和性能之间地权衡。&lt;/p>
&lt;h2 id="c-binding">C Binding&lt;/h2>
&lt;p>那么抽离出框架地目的是抽象出应用底层，这个刚好是&lt;a href="https://github.com/atframework/libatapp">atapp&lt;/a>做的事，而且&lt;a href="https://github.com/atframework/libatapp">atapp&lt;/a>的层面对外暴露的接口数量也比较少，使用比较简单，所以索性就直接对它下手了。&lt;/p></description></item><item><title>对象路由系统设计</title><link>//owent.net/2017/1342.html</link><pubDate>Sat, 04 Feb 2017 19:01:45 +0000</pubDate><guid>//owent.net/2017/1342.html</guid><description>&lt;h2 id="起源">起源&lt;/h2>
&lt;p>现在的手游也开始越来越复杂，以前少量交互线上保存的服务器架构越来越不能满足现在越来越偏向PC端MMORPG的需求。比如现在手游也引入了地图服务、公会服务等等。特别是地图服务需要能够动态切换服务节点、并且由于广播量巨大，导致我们得用更多级的缓存和更复杂的负载均衡。这些缓存和负载均衡都会涉及缓存失效、同步、更新、发现延迟等问题，所以越来越需要一个路由系统来解决这些问题。&lt;/p></description></item><item><title>近期的一个协程流程BUG</title><link>//owent.net/2017/1313.html</link><pubDate>Mon, 02 Jan 2017 23:13:25 +0000</pubDate><guid>//owent.net/2017/1313.html</guid><description>&lt;p>最近一直没什么时间整理近期碰到的问题，今天思考了一下之前碰到的一个临时处理的BUG，顺便写点东西清理一下思路。&lt;/p>
&lt;p>其实严格来说这个BUG更应该是一个流程试用问题，不过这个问题应该是需要能在协程库里检测并抛出错误来。&lt;/p></description></item><item><title>重写了llvm+clang+libc++和libc++abi的构建脚本</title><link>//owent.net/2016/1309.html</link><pubDate>Sat, 19 Nov 2016 15:42:21 +0000</pubDate><guid>//owent.net/2016/1309.html</guid><description>&lt;p>由于之前整理的服务器框架已经完成了，就需要用各种静态分析工具跑一遍。原来的llvm+clang的编译脚本是从GCC那个脚本copy过来然后改的，使用的时候各种问题。所以干醋重新折腾一遍，重写了。&lt;/p></description></item><item><title>atsf4g完整游戏工程示例</title><link>//owent.net/2016/1306.html</link><pubDate>Sun, 23 Oct 2016 12:31:14 +0000</pubDate><guid>//owent.net/2016/1306.html</guid><description>&lt;p>近期仍然在搭建完整的游戏服务器架构。基于&lt;a href="https://github.com/atframework/atsf4g-co/">atsf4g（asynchronously-tree server framework fo game）&lt;/a>的完整解决方案终于接近完成。基本框架之前其实已经做完了，但是之前解决的只是基本的框架层代码，不包含任何特定的交互模型、协议模型、配置服务等等。这回就整理了一个只包含登入登出逻辑的完整工程，另外优化了一些小细节和周边工具的支持。&lt;/p></description></item><item><title>atframework基本框架已经完成</title><link>//owent.net/2016/1301.html</link><pubDate>Thu, 22 Sep 2016 17:10:11 +0000</pubDate><guid>//owent.net/2016/1301.html</guid><description>&lt;p>好久没写blog了。最近空闲时间都在加紧完成&lt;a href="https://atframe.work">atframework&lt;/a>框架。总算是搞完了，并且搭建了一个静态介绍页。以后有空慢慢加文档进去。&lt;/p>
&lt;p>主页: &lt;a href="https://atframe.work/">https://atframe.work/&lt;/a>
Github: &lt;a href="https://github.com/atframework/">https://github.com/atframework/&lt;/a>&lt;/p>
&lt;p>目前这个项目已经是一个小型游戏服务器的完整框架，包括服务器间实例的管理、客户端和服务器的内部协议和通信机制。并且实现了纯C的port。
然后&lt;a href="https://github.com/atframework/atsf4g-co/tree/master/sample/atgw_cli_inner_hello">https://github.com/atframework/atsf4g-co/tree/master/sample/atgw_cli_inner_hello&lt;/a>里提供了c++的客户度端的代码示例，&lt;a href="https://github.com/atframework/AtgwInnerCli-CSharp">https://github.com/atframework/AtgwInnerCli-CSharp&lt;/a>里提供了C#的客户端代码示例。
使用的都是同一个纯C的协议porting。这样无论cocos还是unity框架接入都不困难了。其他的框架也可以直接用这个纯C的porting来接入。&lt;/p></description></item><item><title>游戏服务器的不停服更新</title><link>//owent.net/2016/1294.html</link><pubDate>Sun, 31 Jul 2016 17:23:34 +0000</pubDate><guid>//owent.net/2016/1294.html</guid><description>&lt;p>我们目前的游戏第一次测试的时候笔记送匆忙，导致上线之后频繁更新。
比如BOSS战由于大区的人数和预期不一样导致的难度调整，或者是任务链或者数值调整，再加上一些BUG。&lt;/p></description></item><item><title>对atbus的小数据包的优化</title><link>//owent.net/2016/1286.html</link><pubDate>Sat, 09 Jul 2016 14:16:41 +0000</pubDate><guid>//owent.net/2016/1286.html</guid><description>&lt;p>atbus是我按之前的思路写得服务器消息通信中间件，目标是简化服务器通信的流程，能够自动选择最优路线，自动的断线重连和通信通道维护。能够&lt;strong>跨平台&lt;/strong>并且&lt;strong>高效&lt;/strong>。&lt;/p></description></item><item><title>Android和IOS的TLS问题</title><link>//owent.net/2016/1285.html</link><pubDate>Sat, 09 Jul 2016 14:15:14 +0000</pubDate><guid>//owent.net/2016/1285.html</guid><description>&lt;p>这个问题起源于以前给客户端写的一个log模块，然后里面为了线程安全且多线程下不互相写乱，并且因为这些系统基本都用比较高版本的编译器，都支持C++11了，所以就用了C++11的TLS功能。&lt;/p></description></item><item><title>pbc的一个陈年老BUG</title><link>//owent.net/2016/1273.html</link><pubDate>Mon, 04 Jul 2016 13:01:42 +0000</pubDate><guid>//owent.net/2016/1273.html</guid><description>&lt;p>近期跟了一下pbc的lua-binding的一个老BUG，起源是我们客户端报了一个奇怪的问题，我们游戏里的某些功能的optional字段，服务器并没有下发数据，但是客户端竟然能读到。&lt;/p></description></item><item><title>boost.context-1.61版本的设计模型变化</title><link>//owent.net/2016/1270.html</link><pubDate>Tue, 14 Jun 2016 17:40:29 +0000</pubDate><guid>//owent.net/2016/1270.html</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>之前写了个C++的协程框架&lt;a href="https://github.com/owent/libcopp">libcopp&lt;/a>，底层使用的是boost.context实现，然后剥离了对boost的依赖。然而这样意味着我必须时常跟进&lt;a href="http://www.boost.org/doc/libs/1_61_0/libs/context/doc/html/index.html">boost.context&lt;/a>的更新。&lt;/p>
&lt;p>顺带提一下这个协程库已经在我们线上服务器版本中使用了。&lt;/p>
&lt;p>从最初的boost版本（我忘了从哪个版本开始了）一直到1.60版本，&lt;a href="http://www.boost.org/doc/libs/1_61_0/libs/context/doc/html/index.html">boost.context&lt;/a>的变化都不大，都只是补全一些新的架构和体系结构，还有就是修复一些小细节的BUG，再就是增加了对valgrind的支持（之前写过一个&lt;a href="//owent.net/2015/1194.html">Merge记录&lt;/a>提到过）。新增的功能也只有&lt;a href="http://www.boost.org/doc/libs/1_61_0/libs/context/doc/html/context/ecv1.html">execution_context&lt;/a>(现在叫execution_context_v1)，这个东西我的&lt;a href="https://github.com/owent/libcopp">libcopp&lt;/a>里其实包含了这个功能，并且本身做得比它要功能丰富，所以没有接入的必要。另外在1.60版本的时候尝试使用Windows里的fiber（当然默认是关闭的），在1.61版本里被移除了。这些细节都不是特别重要，主要还是1.61版本的变化。&lt;/p></description></item><item><title>理解Raft算法</title><link>//owent.net/2016/1226.html</link><pubDate>Thu, 17 Mar 2016 21:29:24 +0000</pubDate><guid>//owent.net/2016/1226.html</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>最近在分布式系统一致性方面，&lt;a href="https://raft.github.io/">Raft&lt;/a>算法比较火啊。所以就抽时间看了下这个算法。&lt;/p>
&lt;p>之前已经有&lt;a href="https://zh.wikipedia.org/zh-cn/Paxos%E7%AE%97%E6%B3%95">Paxos算法&lt;/a>，用于解决分布式系统最终一致性问题，而且已经有了&lt;a href="http://http://zookeeper.apache.org/">zookeeper&lt;/a>这个成熟的开源实现。那么这个&lt;a href="https://raft.github.io/">Raft&lt;/a>算法有啥用呢？按照&lt;a href="https://raft.github.io/">Raft&lt;/a>官网的说法，这个算法的错误容忍和性能和&lt;a href="https://zh.wikipedia.org/zh-cn/Paxos%E7%AE%97%E6%B3%95">Paxos算法&lt;/a>类似，但是拥有更加简单易懂的设计。&lt;/p>
&lt;p>看过&lt;a href="https://zh.wikipedia.org/zh-cn/Paxos%E7%AE%97%E6%B3%95">Paxos算法&lt;/a>的童鞋们都知道，这货复杂地和屎一样，为了实现去中心化而考虑了各种复杂的边界条件和时序下的可靠性。而&lt;a href="https://raft.github.io/">Raft&lt;/a>算法则根据实际应用中的需要，简化了设计模型，不采用去中心化设计，而是自动选举中心节点，并且在各种情况和时序下可以保证能够正确的选举出中心节点并保证数据的一致性。而且也正是由于能够选举出唯一的主节点（Leader）使得整个通信流程非常地简单，并且易于理解和维护。&lt;/p>
&lt;p>那么它是如何做到这些的呢？&lt;/p>
&lt;h2 id="基本算法设计">基本算法设计&lt;/h2>
&lt;p>&lt;a href="https://raft.github.io/">Raft&lt;/a>的基本设计可以参照官网介绍 &lt;a href="https://raft.github.io/">https://raft.github.io/&lt;/a>&lt;/p>
&lt;p>官方网站上的图例可以点击节点，然后&lt;strong>模拟&lt;/strong>节点crash或者超时或者收到请求时的通信流程。其实也是一个javascript的简单实现，有利于我们理解&lt;a href="https://raft.github.io/">Raft&lt;/a>算法的流程。&lt;/p></description></item><item><title>libatbus基本功能及单元测试终于写完啦</title><link>//owent.net/2016/1214.html</link><pubDate>Fri, 19 Feb 2016 12:44:53 +0000</pubDate><guid>//owent.net/2016/1214.html</guid><description>&lt;h2 id="libatbus">&lt;a href="https://github.com/atframework/libatbus">libatbus&lt;/a>&lt;/h2>
&lt;p>经过茫茫长时间的编写+过年在家无聊补充和修正单元测试，再加上这两天的整理，终于把以前的这个关于服务器通信中间件的基本功能和相应的单元测试完成啦。还是可以热烈庆祝一下的。&lt;/p></description></item><item><title>博客文章和文档迁移到gitbook</title><link>//owent.net/2016/1209.html</link><pubDate>Fri, 15 Jan 2016 20:23:18 +0000</pubDate><guid>//owent.net/2016/1209.html</guid><description>&lt;p>使用&lt;em>Markdown&lt;/em>写blog已经很久了，近期接触并且看了下流传已久的&lt;a href="//gitbook.com">gitbook&lt;/a>平台，感觉做得确实不错。、&lt;/p>
&lt;p>之前写blog的时候一直用得是&lt;a href="//stackedit.io">stackedit&lt;/a>，是因为&lt;a href="//stackedit.io">stackedit&lt;/a>的对&lt;em>Markdown&lt;/em>做了很多扩展，功能很强大，有自动目录、流程图、时序图等等，然后可以浏览器直接开很方便。但实际上这些功能写出的东西虽然不错，但是放到比如&lt;a href="//github.com">github&lt;/a>上的时候，&lt;a href="//github.com">github&lt;/a>不支持。目前大多数平台对&lt;em>Mardown&lt;/em>的扩展都只是到了和&lt;a href="//github.com">github&lt;/a>差不多的地步，没有到&lt;a href="//stackedit.io">stackedit&lt;/a>的程度。这也导致同样写得东西，复制到&lt;a href="//github.com">github&lt;/a>或者其他的平台的时候还得过一遍样式，比较麻烦。而且这些扩展的功能也用得不太多。另外&lt;a href="//stackedit.io">stackedit&lt;/a>时不时被墙然后访问很不稳定也是挺麻烦的一件事儿。&lt;/p>
&lt;p>再来说这个&lt;a href="//gitbook.com">gitbook&lt;/a>，看中他是觉得它做了一个可持续集成的功能。就是&lt;a href="//github.com">github&lt;/a> &lt;em>push&lt;/em>完以后可以通知&lt;a href="//gitbook.com">gitbook&lt;/a>然后让&lt;a href="//gitbook.com">gitbook&lt;/a>自动构建文档内容。这点和比如&lt;a href="https://jenkins-ci.org/">jenkins&lt;/a>和&lt;a href="https://travis-ci.org/">travis&lt;/a>等等的CI系统很像。然后支持构建成pdf、epub（开源电子书格式）、mobi（kindle电子书格式）和在线书籍。然后版式也挺漂亮，还支持模板，引用等等，感觉确实蛮适合出版发行的。虽然目前为止&lt;em>Markdown&lt;/em>的功能丰富程度比起Latex还差不少，但是上手难度也比Latex低不少。还是非常有潜力的，而且&lt;a href="//gitbook.com">gitbook&lt;/a>支持用javascript写得插件，以后变数也可以很多。&lt;/p>
&lt;p>所以我决定也尝尝鲜，首先是吧blog里的文章记录转移过来，然后后面的开源项目的wiki或者文档也用这玩意构建。因为我用&lt;em>Markdown&lt;/em>写博文的时候本来就备份了一份在&lt;a href="//github.com">github&lt;/a>，所以有现成的仓库，然后把目录结构和配置调整成&lt;a href="//gitbook.com">gitbook&lt;/a>所支持的就可以了。话说好像已经很多国内的文档和开源书籍用这个生成了。&lt;/p></description></item><item><title>给客户端写得LRU缓存</title><link>//owent.net/2016/1206.html</link><pubDate>Mon, 04 Jan 2016 20:23:18 +0000</pubDate><guid>//owent.net/2016/1206.html</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>由于我们的客户端的元素和资源比较多，cocos框架的各种库质量参差不齐，导致了有些地方加载速度实在很慢。并且没有一个统一的内存管理机制导致了整个内存占用不太好控制。&lt;/p></description></item><item><title>针对Java JIT的优化(转表工具:xresloader)</title><link>//owent.net/2015/1198.html</link><pubDate>Wed, 02 Sep 2015 20:20:16 +0000</pubDate><guid>//owent.net/2015/1198.html</guid><description>&lt;p>之前做了一个转Excel表到lua/二进制/json/xml的工具-&lt;strong>&lt;a href="https://github.com/xresloader/xresloader">xresloader&lt;/a>&lt;/strong>。目的一方面是方便策划。另一方面是统一客户端和服务器的转表模式，并且要灵活适应环境变化。&lt;/p>
&lt;p>最初做的时候考虑到既要方便Windows下策划和前端使用，又要方便后台部署在服务器上使用，甚至要集成在一些自动化的系统里。所以必须要跨平台。&lt;/p></description></item><item><title>libcopp更新 (merge boost 1.59 context)</title><link>//owent.net/2015/1194.html</link><pubDate>Mon, 17 Aug 2015 11:43:45 +0000</pubDate><guid>//owent.net/2015/1194.html</guid><description>&lt;h1 id="libcopp更新-merge-boost-159-context">libcopp更新 (merge boost 1.59 context)&lt;/h1>
&lt;p>之前由于兴趣写了一个&lt;a href="https://www.owent.net/2014/1000.html">协程框架&lt;/a>，目前这个框架已经投入项目中使用。&lt;/p>
&lt;p>这个框架的上下文部分是使用了&lt;a href="http://www.boost.org/doc/libs/1_59_0/libs/context">boost.context&lt;/a>，但是从开始写&lt;a href="https://github.com/owent/libcopp">libcopp&lt;/a>到现在，boost.context也更新了几个版本。而之前几次merge基本都是简单地跟进了&lt;em>make_fcontext&lt;/em>和&lt;em>jump_fcontext&lt;/em>两个函数，这次就再稍微翻了一遍其他部分的代码。&lt;/p>
&lt;h2 id="boostcontext的变化">boost.context的变化&lt;/h2>
&lt;p>首先是它在非windows栈分配的时候，增加了valgrind的适配。不过boost.context里的不同平台的栈缓冲区其实结构差不多，但是boost的实现里给复制粘贴了很多遍，所以我就干脆把这些地方合并啦。减少了一些重复代码。&lt;/p></description></item><item><title>小记最近踩得两个C++坑</title><link>//owent.net/2015/1189.html</link><pubDate>Sat, 25 Jul 2015 14:53:44 +0000</pubDate><guid>//owent.net/2015/1189.html</guid><description>&lt;h1 id="小记最近踩得两个c坑">小记最近踩得两个C++坑&lt;/h1>
&lt;p>记一下最近踩得两个C++独有的暗坑，其中一个和ABI相关。第二个坑其实之前研究过，但是没有实例，这次算是碰到了个典型的实例。&lt;/p>
&lt;h2 id="坑一常量引用失效">坑一：常量引用失效&lt;/h2>
&lt;p>在项目中碰到的实例的大致流程是:&lt;/p></description></item><item><title>Redis全异步(HA)Driver设计稿</title><link>//owent.net/2015/1182.html</link><pubDate>Sat, 04 Jul 2015 22:24:46 +0000</pubDate><guid>//owent.net/2015/1182.html</guid><description>&lt;h1 id="redis全异步高可用driver设计稿">Redis全异步高可用Driver设计稿&lt;/h1>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>现在Redis的集群功能已经Release。但是并没有一个官方直接提供的高可用性的API可以使用。有的只有解决方案，Sentinel和Cluster。所以有必要自己设计一套高可用的Driver层以供业务使用。&lt;/p></description></item><item><title>Vim常用命令</title><link>//owent.net/2015/1170.html</link><pubDate>Fri, 08 May 2015 11:21:17 +0000</pubDate><guid>//owent.net/2015/1170.html</guid><description>&lt;p>之前有搜集过一些常用的命令脚本，其中有vim的部分。但是vim内置的很多功能那些个命令显然是不够的，而且那些记录的很多也不常用，于是想到专门开一个页面记录vim常用的命令集。&lt;/p></description></item><item><title>关于firewalld和systemd的一些命令速记</title><link>//owent.net/2015/1160.html</link><pubDate>Thu, 23 Apr 2015 15:55:44 +0000</pubDate><guid>//owent.net/2015/1160.html</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>CentOS 7 已经用firewalld替换掉了iptables并用systemd来管理启动服务（之前是chkconfig）。而且下一个Ubuntu的长期支持版也要这么干了。&lt;/p></description></item><item><title>Jenkins(hudson)插件记录</title><link>//owent.net/2015/1157.html</link><pubDate>Tue, 21 Apr 2015 11:22:59 +0000</pubDate><guid>//owent.net/2015/1157.html</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>搭建自动化构建（jenkins）的过程中碰到了挺多问题，需要装各种插件解决。为了方便下次部署，这里先记录一下用到的插件及用途&lt;/p>
&lt;h2 id="jenkins插件">Jenkins插件&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="http://wiki.jenkins-ci.org/display/JENKINS/Ant+Plugin">Ant Plugin&lt;/a> java打包工具&lt;/li>
&lt;li>&lt;a href="https://wiki.jenkins-ci.org/display/JENKINS/Authorize+Project+plugin">Authorize Project&lt;/a> 项目权限管理&lt;/li>
&lt;li>&lt;a href="http://wiki.jenkins-ci.org/display/JENKINS/Clang+Scan-Build+Plugin">Clang Scan-Build Plugin&lt;/a> clang静态分析（尚未使用）&lt;/li>
&lt;li>&lt;a href="http://wiki.jenkins-ci.org/display/JENKINS/Cppcheck+Plugin">Cppcheck Plug-in&lt;/a> cppcheck静态代码分析&lt;/li>
&lt;li>&lt;a href="http://wiki.jenkins-ci.org/display/JENKINS/Credentials+Plugin">Credentials Plugin&lt;/a> 登入凭据管理&lt;/li>
&lt;li>&lt;a href="http://wiki.jenkins-ci.org/display/JENKINS/Dashboard+View">Dashboard View&lt;/a> 总览&lt;/li>
&lt;li>&lt;a href="http://wiki.jenkins-ci.org/display/JENKINS/Disk+Usage+Plugin">disk-usage plugin&lt;/a> 磁盘使用量统计&lt;/li>
&lt;li>&lt;a href="http://wiki.jenkins-ci.org/display/JENKINS/Doxygen+Plugin">Doxygen Plug-in&lt;/a> doxygen插件（没使用成功，我还是自己命令行生成的）&lt;/li>
&lt;li>&lt;a href="http://wiki.jenkins-ci.org/display/JENKINS/Email-ext+plugin">Email Extension Plugin&lt;/a> 定制化邮件&lt;/li>
&lt;li>&lt;a href="https://wiki.jenkins-ci.org/display/JENKINS/Embeddable+Build+Status+Plugin">embeddable-build-status&lt;/a> 提供接口嵌入构建状态到外部系统&lt;/li>
&lt;li>&lt;a href="https://wiki.jenkins-ci.org/display/JENKINS/EnvInject+Plugin">Environment Injector Plugin&lt;/a> 把参数化构建的参数导入到环境变量&lt;/li>
&lt;li>&lt;a href="http://wiki.jenkins-ci.org/display/JENKINS/Git+Client+Plugin">GIT client plugin&lt;/a> 和&lt;a href="http://wiki.jenkins-ci.org/display/JENKINS/Git+Plugin">GIT plugin&lt;/a>&lt;/li>
&lt;li>Github和Gitlab集成插件&lt;/li>
&lt;li>Gravatar插件&lt;/li>
&lt;li>&lt;a href="http://wiki.jenkins-ci.org/display/JENKINS/Matrix+Authorization+Strategy+Plugin">Matrix Authorization Strategy Plugin&lt;/a>和&lt;a href="https://wiki.jenkins-ci.org/display/JENKINS/Matrix+Project+Plugin">Matrix Project Plugin&lt;/a> 项目矩阵授权策略&lt;/li>
&lt;li>&lt;a href="http://wiki.jenkins-ci.org/display/JENKINS/Maven+Project+Plugin">Maven Integration plugin&lt;/a> 更高级的java构建工具&lt;/li>
&lt;li>openid和OpenID4Java API&lt;/li>
&lt;li>Publish Over SSH&lt;/li>
&lt;li>Release Plugin&lt;/li>
&lt;li>&lt;a href="http://wiki.jenkins-ci.org/display/JENKINS/Slave+Setup+Plugin">Slave SetupPlugin&lt;/a> 、&lt;a href="http://wiki.jenkins-ci.org/display/JENKINS/slave-status">slave-status&lt;/a>、&lt;a href="http://wiki.jenkins-ci.org/display/JENKINS/SSH+Slaves+plugin">SSH Slaves plugin&lt;/a>、&lt;a href="http://wiki.jenkins-ci.org/display/JENKINS/Windows+Slaves+Plugin">Windows Slaves Plugin&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://wiki.jenkins-ci.org/display/JENKINS/SSH+Agent+Plugin">SSH Agent Plugin&lt;/a>、&lt;a href="http://wiki.jenkins-ci.org/display/JENKINS/SSH+Credentials+Plugin">SSH Credentials Plugin&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://wiki.jenkins-ci.org/x/CwDgAQ">Static Analysis Utilities&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://wiki.jenkins-ci.org/display/JENKINS/Xcode+Plugin">Xcode integration&lt;/a> 用于集成xcode工程文件
上面没有链接的插件属于我没有主动去使用（自动开启或者装了没用过的）的。没写注解的是反正一看就知道什么意思。&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>Written with &lt;a href="https://stackedit.io/">StackEdit&lt;/a>.&lt;/p></description></item><item><title>我们的Lua类绑定机制</title><link>//owent.net/2015/1153.html</link><pubDate>Wed, 15 Apr 2015 16:16:39 +0000</pubDate><guid>//owent.net/2015/1153.html</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>最近一个人搞后台，框架底层+逻辑功能茫茫多，扛得比较辛苦，一直没抽出空来写点东西。&lt;/p>
&lt;p>空闲的时间，完善了&lt;a href="https://www.owent.net/2015/1149.html">LLVM+Clang+libc++和libc++abi的编译脚本&lt;/a>。不得不说clang的编译脚本质量比gcc差不是一点点。为了在centos下尽可能编译出更多的功能和llvm的子项目，要各种改各种试才终于自举通过，并且这种情况编出来的二进制大得夸张。不过总算是告一段落。&lt;/p>
&lt;p>因为项目需要，买了本&lt;a href="http://www.duokan.com/book/53962">《Redis的设计与实现》&lt;/a>的电子版，顺便给这本书的作者贡献了一丢丢的Redis文档的翻译。这本书通篇贴代码，有点看blog的感觉，写得还是很简单易懂的。（不过谁告诉我为毛我花了30大洋买完不到半个月就变成10块了，坑爹么不是。T_T）&lt;/p>
&lt;p>另外还零零散散地看了些&lt;a href="http://book.douban.com/subject/3652388/">《程序员的自我修养-链接、装载与库》&lt;/a> 这本书&lt;a href="http://blog.codingnow.com">云风&lt;/a>之前推荐过。并且在我看得这些里国人写得书里，这确实是一本值得推荐，并且不可多得的佳作。&lt;/p></description></item><item><title>LLVM+Clang+Libcxx+Libcxxabi（3.6）工具链编译（完成自举编译）</title><link>//owent.net/2015/1149.html</link><pubDate>Wed, 08 Apr 2015 17:41:02 +0000</pubDate><guid>//owent.net/2015/1149.html</guid><description>&lt;p>LLVM和Clang工具链的生成配置文件写得比较搓，所以略微麻烦，另外这个脚本没有经过多环境测试，不保证在其他Linux发行版里正常使用。&lt;/p>
&lt;h3 id="change">CHANGE&lt;/h3>
&lt;h4 id="相对于上一个版本linux-编译安装-llvm--clang-35的变化">相对于上一个版本&lt;a href="../3.5">Linux 编译安装 LLVM + Clang 3.5&lt;/a>的变化：&lt;/h4>
&lt;ol>
&lt;li>这个版本llvm的源码修复了一个会导致开启exception功能之后的编译bug，所以编译脚本不再会修改llvm的源代码&lt;/li>
&lt;li>编译过程改成了两次编译&lt;/li>
&lt;li>编译过程完全使用cmake。&lt;/li>
&lt;li>&lt;strong>终于自举编译成功啦&lt;/strong>，第二次自举编译完成后，不再依赖libstdc++，转而依赖编译出来的libc++和libc++abi,但是仍然会依赖libgcc_s.so&lt;/li>
&lt;li>多线程编译的时候时不时会出现奇怪的失败，所以默认改成单线程编译&lt;/li>
&lt;li>修复编译完成后的提示输出&lt;/li>
&lt;/ol>
&lt;h3 id="notice">NOTICE&lt;/h3>
&lt;p>由于生成动态库会出现一些问题，所以目前都是采用llvm默认的静态链接的方式。但是静态链接生成的文件比较大，并且链接的东西很多，有可能会出现链接超时的错误。
这时候可以通过手动cd到编译目录，执行 make &amp;amp;&amp;amp; make install 即可&lt;/p></description></item><item><title>Android NDK undefined reference to ___tls_get_addr 错误</title><link>//owent.net/2015/1140.html</link><pubDate>Fri, 06 Feb 2015 20:27:16 +0000</pubDate><guid>//owent.net/2015/1140.html</guid><description>&lt;p>本来看到Android的ndk都开始用gcc4.8和gcc4.9了，而且gcc4.8.1开始支持全部的c++11的特性，我就很happy地用上了。结果出现这么个错误。&lt;/p></description></item><item><title>tolua++内存释放坑</title><link>//owent.net/2015/1133.html</link><pubDate>Thu, 08 Jan 2015 22:03:42 +0000</pubDate><guid>//owent.net/2015/1133.html</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>本来想参考下tolua++的对象生命周期维护方式。一不小心发现了一个坑。&lt;/p>
&lt;h2 id="代码追踪">代码追踪&lt;/h2>
&lt;p>我这里用得是tolua++ 1.0.93版本。&lt;/p>
&lt;p>tolua++在new一个类的时候，会把类指针作为userdata传入lua，建立metatable并通过&lt;strong>tolua_classevents&lt;/strong>函数给metatable注册魔术方法。&lt;/p></description></item><item><title>Lua性能分析</title><link>//owent.net/2014/1128.html</link><pubDate>Fri, 12 Dec 2014 16:14:11 +0000</pubDate><guid>//owent.net/2014/1128.html</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>Lua性能分析本来有一些现成的工具，比如LuaProfile，不幸的是这货不支持luajit，另外LuaStudio虽然挺好用但是是收费的。
比较不爽，刚好Lua本身提供钩子功能，用来写调试工具和性能分析工具都比较简单，索性就自己写一个。&lt;/p></description></item><item><title>集成Qt Webkit 到cocos2d-x</title><link>//owent.net/2014/1120.html</link><pubDate>Tue, 02 Dec 2014 15:00:55 +0000</pubDate><guid>//owent.net/2014/1120.html</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>近期倒腾下客户端，想搞个cocos2d的工具。
之前的那个集成到Win32工具下的调试辅助工具是直接用的windows api。拓展起来巨麻烦。而且Windows默认的字符集是宽字符集，和cocos2d与lua交互起来得到utf-8之间转来转去，十分麻烦。所以干脆花点时间一口气搞完这货。&lt;/p></description></item><item><title>Gitlab环境搭建小计</title><link>//owent.net/2014/1110.html</link><pubDate>Mon, 20 Oct 2014 11:13:43 +0000</pubDate><guid>//owent.net/2014/1110.html</guid><description>&lt;p>最近给公司搭建Gitlab作源代码管理工具
满满都是坑呐。&lt;/p>
&lt;p>Gitlab 开源仓库软件包官方地址: &lt;a href="https://about.gitlab.com/">https://about.gitlab.com/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://about.gitlab.com/downloads/">https://about.gitlab.com/downloads/&lt;/a> 这里有各个Linux分支的安装包，下面的说明笔记齐全，直接使用比较简单。&lt;/p></description></item><item><title>近期研究VPN的一些记录(OpenVPN,pptp,l2tp)</title><link>//owent.net/2014/1105.html</link><pubDate>Sun, 28 Sep 2014 20:36:46 +0000</pubDate><guid>//owent.net/2014/1105.html</guid><description>&lt;p>近期由于一些需要（特别是上Google），研究了下在VPS上搭建VPN服务器的方法。其中遇到一些坑，顺带记下来以备下次使用。&lt;/p>
&lt;p>其实在有VPS的情况下，还有另外一种替代方案。那就是在路由器上直接ssh隧道+sock5代理+使用&lt;a href="http://www.harding.motd.ca/autossh/">autossh&lt;/a>自动重连+使用&lt;a href="http://www.pps.univ-paris-diderot.fr/~jch/software/polipo/">polipo&lt;/a>作HTTP代理+&lt;a href="https://calomel.org/proxy_auto_config.html">PAC文件&lt;/a>自动代理切换。实现，最终我在家里就是这么搞得，而且这样对网络结构没有其他影响。&lt;/p></description></item><item><title>LLVM + Clang + Libcxx + Libcxxabi 工具链编译</title><link>//owent.net/2014/1101.html</link><pubDate>Fri, 12 Sep 2014 19:07:03 +0000</pubDate><guid>//owent.net/2014/1101.html</guid><description>&lt;p>LLVM和Clang工具链的生成配置文件写得比较搓，所以略微麻烦，另外这个脚本没有经过多环境测试，不保证在其他Linux发行版里正常使用。&lt;/p>
&lt;p>&lt;strong>如果第一次执行出现安装失败，可以再执行一次。llvm的安装脚本问题多多&lt;/strong>&lt;/p></description></item><item><title>[libiniloader] Project</title><link>//owent.net/2014/1081.html</link><pubDate>Mon, 14 Jul 2014 19:28:49 +0000</pubDate><guid>//owent.net/2014/1081.html</guid><description>&lt;h2 id="ini-配置读取库发布">INI 配置读取库发布&lt;/h2>
&lt;p>Github地址: &lt;a href="https://github.com/owent/libiniloader">https://github.com/owent/libiniloader&lt;/a>&lt;/p>
&lt;p>OSChina镜像: &lt;a href="http://git.oschina.net/owent/libiniloader">http://git.oschina.net/owent/libiniloader&lt;/a>&lt;/p>
&lt;p>项目中经常会碰到需要读取配置的情况，而用ini配置最大的优势就是简单易懂。
但是现在很多的配置读取库都过于庞大了，比如Boost.PropertyTree，功能很强大，但是基本不会用到里面所有的东西。
另外微软的INI读取，功能不是很强不说，还限制在Windows上，更重要的是API设计得实在不优雅。
于是libiniloader就诞生啦。&lt;/p></description></item><item><title>[WP Code Highlight.js] Project</title><link>//owent.net/2014/1066.html</link><pubDate>Thu, 12 Jun 2014 20:39:11 +0000</pubDate><guid>//owent.net/2014/1066.html</guid><description>&lt;h2 id="project-information">Project Information&lt;/h2>
&lt;h4 id="project-name">Project Name:&lt;/h4>
&lt;p>&lt;strong>WP Code Highlight.js&lt;/strong>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/p>
&lt;h4 id="github-home">Github Home:&lt;/h4>
&lt;p>&lt;a href="https://github.com/owent/WP-Code-Highlight.js">https://github.com/owent/WP-Code-Highlight.js&lt;/a>&lt;/p>
&lt;h4 id="plugin-home">Plugin Home:&lt;/h4>
&lt;p>&lt;a href="http://wordpress.org/plugins/wp-code-highlightjs/">http://wordpress.org/plugins/wp-code-highlightjs/&lt;/a>&lt;/p>
&lt;h4 id="description">Description:&lt;/h4>
&lt;p>This is a plugin of &lt;em>&lt;a href="http://wordpress.org">Wordpress&lt;/a>&lt;/em> using &lt;strong>Highlight.js&lt;/strong>&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> to make codes on posts, articles or any web pages more beautiful and easier to read.&lt;/p>
&lt;p>This plugin allow you to load &lt;a href="http://highlightjs.org/">Highlight.js&lt;/a> from local web server or some of public CDN we collected.&lt;/p>
&lt;p>To make you easier to migrate from &lt;a href="http://alexgorbatchev.com/SyntaxHighlighter/">SyntaxHilighter&lt;/a> and &lt;a href="https://code.google.com/p/google-code-prettify/">Google Prettify&lt;/a> to &lt;a href="http://highlightjs.org/">Highlight.js&lt;/a>, this plugin will provide some compatible mode so that you need not to change any code on your old web pages. They will be converted automaticly.&lt;/p></description></item><item><title>基于Chrome插件的开发工具链</title><link>//owent.net/2014/1054.html</link><pubDate>Tue, 06 May 2014 21:51:58 +0000</pubDate><guid>//owent.net/2014/1054.html</guid><description>&lt;p>在项目开发过程中，时不时会碰上需要使用一些工具来做一些自动操作或者附加功能。特别是有一些外部组件只会提供Web工具，或者如果产品会发布在Web上的时候，在线上的产品中加调试指令显然是不安全的（前段时间刚好有携程线上服务器暴露的调试接口，导致用户信息泄露的事故）。这时候我们就可以借助Chrome来制作一些特别的小工具。 使用Chrome来自作工具有几个好处：其一是对熟悉Web开发的人而言，它用得全是Javascript(当然你也可以用Go语言)和HTML，没有太多额外的学习成本，而且现在的Chrome对HTML5标准支持得也比较好，基本的功能都可以实现；其二是不需要花多少时间在UI方面（作为一个后台开发表示The easier the better）；其三是在需要的时候，还能开发为App，直接运行（另外还有一个项目叫&lt;a href="https://github.com/rogerwang/node-webkit/">Nodejs-webkit&lt;/a>，提供了打包成不依赖Chrome本地应用的功能，而且底层用了nodejs，提供了更加强大的系统资源访问的功能)。总而言之，作为开发工具而言已经绰绰有余了。&lt;/p></description></item><item><title>Linux 编译安装 GCC 4.9</title><link>//owent.net/2014/1038.html</link><pubDate>Wed, 23 Apr 2014 14:37:46 +0000</pubDate><guid>//owent.net/2014/1038.html</guid><description>&lt;p>详情及变更请参照: &lt;a href="https://github.com/owent/OWenT-s-Utils/tree/master/Bash%26Shell/GCC%20Installer/gcc-4.9">Linux 编译安装 GCC 4.9&lt;/a>&lt;/p>
&lt;p>GCC4.9发布啦，本脚本在之前4.8的基础上做了稍许改进，更新
PS：4.9.0 开始支持C++1y特性
GCC 4.9 的大致变更如下，因为我只用C/C++所以更关注**通用性高的C和C++**的部分啦：&lt;/p></description></item><item><title>捣鼓一个协程库</title><link>//owent.net/2014/1000.html</link><pubDate>Wed, 05 Mar 2014 21:52:49 +0000</pubDate><guid>//owent.net/2014/1000.html</guid><description>&lt;p>今年准备安安心心写一个协程库。一方面是觉得协程挺有意思，另一方面也是因为C/C++在这方面没有一个非常权威的解决方案。
按照我自己风格还是喜欢C++，所以协程库定名为 libcopp 。
源码托管在 github: &lt;a href="https://github.com/owent/libcopp">https://github.com/owent/libcopp&lt;/a>
镜像托管 &lt;a href="http://git.oschina.net/owent/distinctionpp">http://git.oschina.net/owent/distinctionpp&lt;/a>&lt;/p></description></item><item><title>ARM 交叉编译环境搭建</title><link>//owent.net/2013/738.html</link><pubDate>Thu, 11 Apr 2013 17:55:04 +0000</pubDate><guid>//owent.net/2013/738.html</guid><description>&lt;p>最近研究了一下ARM的交叉编译环境搭建，太麻烦了必须作一下记录啊。
前两个方法比较简单一点，关键是淫家Google帮你弄好了大部分功能&lt;/p>
&lt;h2 id="方案一利用android-ndk--jni">方案一：（利用Android ndk + jni）&lt;/h2>
&lt;p>使用Android NDK的第一步当然是下载Android NDK啦。
&lt;a href="http://developer.android.com/tools/sdk/ndk/index.html">http://developer.android.com/tools/sdk/ndk/index.html&lt;/a>
使用jni的话，还必须下载相应的Android SDK
&lt;a href="http://developer.android.com/sdk/index.html">http://developer.android.com/sdk/index.html&lt;/a>
下载完后可以使用 $ANDROID_SDK_ROOT/sdk/tools/android update sdk –no-ui 来更新SDK包
附注：ANDROID_SDK_ROOT指代Android SDK根目录，NDK_ROOT指代Android NDK根目录。下同。
为了方便可以把$ANDROID_SDK_ROOT/sdk/tools:$ANDROID_SDK_ROOT/sdk/platform-tools:$NDK_ROOT 加到环境变量PATH里去
另外,Android 如果要命令行编译，需要ant和ant扩展，需要安装 Android 依赖的32位库
大致上是 glibc.i686 libzip.i686 libzip-devel.i686 libstdc++.i686 ant ant-* jdk
其中 libc.i686 libzip.i686 libzip-devel.i686 libstdc++.i686 ant ant-* 可以用 yum install或apt-get install 安装
jdk最好是官网下一个rpm包安装 rpm -ivh *.rpm&lt;/p></description></item><item><title>Boost.Spirit 初体验</title><link>//owent.net/2012/674.html</link><pubDate>Thu, 08 Nov 2012 18:57:34 +0000</pubDate><guid>//owent.net/2012/674.html</guid><description>&lt;p>使用代码生成代码是一件十分美妙的事情，于是有了各种代码生成器。但是生成代码，意味着要有对生成规则的分析和处理。
Boost.Spirit 就是这么一个语法分析工具，它实现了对&lt;strong>上下文无关文法的LL分析&lt;/strong>。支持&lt;strong>EBNF(扩展巴科斯范式)&lt;/strong>。
Boost.Spirit 的使用真的是把模板嵌套用到了极致。确实这么做造成了非常强的扩展性，生成的代码也非常高效，但是嵌套的太复杂了，对于初学者而言真心难看懂。
你能想象在学习阶段一个不是太明白的错误导致编译器报出的几十层模板嵌套错误信息的感受吗？而且，这么复杂的模板嵌套还直接导致了编译速度的巨慢无比。
其实在之前，我已经使用过Spirit的Classic版本，即1.X版本，但是过多的复制操作让我觉得当时用得很低效，还好分析的内容并不复杂所以没。体现出来
这回就来研究下功能更强劲的2.X 版本。&lt;/p></description></item><item><title>AC自动机</title><link>//owent.net/2012/652.html</link><pubDate>Tue, 28 Aug 2012 20:10:27 +0000</pubDate><guid>//owent.net/2012/652.html</guid><description>&lt;p>某个课程的作业，促使我来看看这玩意。&lt;/p>
&lt;p>整个程序的算法思想是看别人的ACM的blog看懂的，感觉确实和KMP很像。但是代码呢就比较工程化一点。顺便回忆了一把ACM的感觉。&lt;/p></description></item><item><title>C++ 标准过渡期</title><link>//owent.net/2012/643.html</link><pubDate>Thu, 23 Aug 2012 06:05:20 +0000</pubDate><guid>//owent.net/2012/643.html</guid><description>&lt;p>C++11的新标准已经出台，各个编译器已经开始陆续支持。
主流编译器支持程度见(VC++, gcc, clang, intel c++等)：&lt;a href="http://en.cppreference.com/w/cpp/compiler_support">http://en.cppreference.com/w/cpp/compiler_support&lt;/a>&lt;/p>
&lt;p>但是要让C++11应用与生产环境还需时日，所以就在这里记录一下在过渡时期可能用到的一些重要功能&lt;/p></description></item><item><title>C++ 新特性学习（七） — 右值引用</title><link>//owent.net/2012/603.html</link><pubDate>Thu, 31 May 2012 04:50:21 +0000</pubDate><guid>//owent.net/2012/603.html</guid><description>&lt;p>C++在效率上有个硬伤。我们知道C#和Java对于类传递都是以引用的方式，而C++默认都是传值。在传值过程中就经常会进行复制构造，这完全没必要而且浪费CPU，为了解决这种问题，于是乎C++11 增加了一个新的非常数引用（reference）类型，称为右值引用（R-value reference）。我就专门看了一下关于右值引用的东西。
右值引用在GCC 4.3之后开始支持，VS 2010（VC 10.0）已经支持，再前一点的VC版本没试过所以不知道。
右值引用的申明标记为T &amp;amp;&amp;amp;，主要用于处理临时变量，比如函数返回的变量（暂时想不出其他例子，忽略返回值优化吧，(命名)返回值优化参见http://efnetcpp.org/wiki/Return_value_optimization，再说返回值优化能力有限是吧，比要求如单返回语句、不能使用异常等等），避免复制构造。同时在析构的时候就不会析构这个临时变量，从而提升效率。
上代码：&lt;/p></description></item><item><title>Linux编译安装GCC 4.7</title><link>//owent.net/2012/584.html</link><pubDate>Sat, 07 Apr 2012 10:25:18 +0000</pubDate><guid>//owent.net/2012/584.html</guid><description>&lt;h1 id="linux编译安装gcc-47">Linux编译安装GCC 4.7&lt;/h1>
&lt;p>详见: &lt;a href="https://www.owent.net/2012/584.html">Linux编译安装GCC 4.7&lt;/a>&lt;/p>
&lt;h4 id="准备环境及依赖项">准备环境及依赖项&lt;/h4>
&lt;ol>
&lt;li>支持 ISO C90 的编译器&lt;/li>
&lt;li>用于创建Ada编译器的GNAT&lt;/li>
&lt;li>支持POSIX的shell或GNU bash&lt;/li>
&lt;li>POSIX或SVR4的 awk工具&lt;/li>
&lt;li>GNU binutils&lt;/li>
&lt;li>gzip 版本1.2.4及以上 （可由GNU镜像列表 &lt;a href="http://www.gnu.org/prep/ftp.html">http://www.gnu.org/prep/ftp.html&lt;/a> 或自动选择最佳镜像 &lt;a href="http://ftpmirror.gnu.org">http://ftpmirror.gnu.org&lt;/a> 下载 ）&lt;/li>
&lt;li>bzip2 版本 1.0.2及以上 （此处可下载 &lt;a href="http://www.bzip.org/">http://www.bzip.org/&lt;/a>）&lt;/li>
&lt;li>GNU make 工具 版本3.80及以上 （可由GNU镜像列表 &lt;a href="http://www.gnu.org/prep/ftp.html">http://www.gnu.org/prep/ftp.html&lt;/a> 或自动选择最佳镜像 &lt;a href="http://ftpmirror.gnu.org">http://ftpmirror.gnu.org&lt;/a> 下载 ）&lt;/li>
&lt;li>GNU tar工具 版本1.14及以上 （可由GNU镜像列表 &lt;a href="http://www.gnu.org/prep/ftp.html">http://www.gnu.org/prep/ftp.html&lt;/a> 或自动选择最佳镜像 &lt;a href="http://ftpmirror.gnu.org">http://ftpmirror.gnu.org&lt;/a> 下载 ）&lt;/li>
&lt;li>perl 版本5.6.1及以上 （此处可下载 &lt;a href="http://www.perl.org/">http://www.perl.org/&lt;/a>）&lt;/li>
&lt;li>jar或zip和unzip工具 （此处可下载 &lt;a href="http://www.info-zip.org">http://www.info-zip.org&lt;/a>)&lt;/li>
&lt;li>gmp库 版本4.3.2及以上 （可由GNU镜像列表 &lt;a href="http://www.gnu.org/prep/ftp.html">http://www.gnu.org/prep/ftp.html&lt;/a> 或自动选择最佳镜像 &lt;a href="http://ftpmirror.gnu.org">http://ftpmirror.gnu.org&lt;/a> 下载 ）&lt;/li>
&lt;li>mpfr库 版本2.4.2及以上 （可由GNU镜像列表 &lt;a href="http://www.gnu.org/prep/ftp.html">http://www.gnu.org/prep/ftp.html&lt;/a> 或自动选择最佳镜像 &lt;a href="http://ftpmirror.gnu.org">http://ftpmirror.gnu.org&lt;/a> 下载 ）&lt;/li>
&lt;li>mpc库 版本0.8.1及以上 （可由GNU镜像列表 &lt;a href="http://www.gnu.org/prep/ftp.html">http://www.gnu.org/prep/ftp.html&lt;/a> 或自动选择最佳镜像 &lt;a href="http://ftpmirror.gnu.org">http://ftpmirror.gnu.org&lt;/a> 下载 ）&lt;/li>
&lt;li>ppl库 版本0.11及以上 （此处可下载 &lt;a href="http://www.cs.unipr.it/ppl/Download/">http://www.cs.unipr.it/ppl/Download/&lt;/a>）&lt;/li>
&lt;li>isl 版本 0.10 （可由GNU镜像列表 &lt;a href="http://www.gnu.org/prep/ftp.html">http://www.gnu.org/prep/ftp.html&lt;/a> 或自动选择最佳镜像 &lt;a href="http://ftpmirror.gnu.org">http://ftpmirror.gnu.org&lt;/a> 中gcc目录中的infrastructure目录下载 ）&lt;/li>
&lt;li>cloog-ppl 版本0.15 或cloog 版本0.16(注意不能使用更高版本) （此处可下载 &lt;a href="http://cloog.org/">http://cloog.org/&lt;/a> ）&lt;/li>
&lt;/ol>
&lt;h6 id="我编译的环境">我编译的环境&lt;/h6>
&lt;p>&lt;strong>系统&lt;/strong>：&lt;/p></description></item><item><title>JSON显示库 -- showJson （Javascript）</title><link>//owent.net/2012/573.html</link><pubDate>Sun, 01 Apr 2012 06:17:48 +0000</pubDate><guid>//owent.net/2012/573.html</guid><description>&lt;p>现在的web的js开发很方便啊，但是碰到iframe里的东西还是不方便看到变量的内容，所以就写了这么个看json内容的玩意，还可以当控制台输出用。&lt;/p></description></item><item><title>JQuery扩展插件--提示信息</title><link>//owent.net/2010/128.html</link><pubDate>Fri, 19 Nov 2010 15:20:12 +0000</pubDate><guid>//owent.net/2010/128.html</guid><description>&lt;p>学校做项目顺便写的，还是有点用的。&lt;/p>
&lt;pre>&lt;code class="language-js">/***
 * JQuery扩展插件--提示信息
 *
 * 本函数用于创建提示信息
 *
 * Example
 * &amp;lt;code&amp;gt;
 * var t = $.noticeMessage(msg, a, b);
 * &amp;lt;/code&amp;gt;
 *
 *
 * function noticeMessage([msg, a,b])
 * @Param {
 * msg: 信息内容(默认: Notice Message!)
 * a: 配置选项({expire: 过期时间（默认5秒）, time: 过渡时间, from: {起始CSS样式}, to:{最终CSS样式}})
 * b: 回调函数
 * }
 * @Return {jQuery(msgDiv): 产生的信息DOM组件的jQuery容器}
 *
 *
 * Example:
 * &amp;lt;code&amp;gt;
 * var t = $.noticeMessage(&amp;quot;Hello World!&amp;quot;);
 * &amp;lt;/code&amp;gt;
 *
 *
 * @Author OWenT
 * @Version 1.0
 * @Link http://www.owent.net
 */
jQuery.extend({
 noticeMessage: function (msg, a, b) {
 msg = msg || &amp;quot;Notice Message!&amp;quot;;
 var option = { &amp;quot;expire&amp;quot;: 5000, &amp;quot;time&amp;quot;: 500,
 &amp;quot;from&amp;quot;: { &amp;quot;background-color&amp;quot;: &amp;quot;LightGreen&amp;quot;, &amp;quot;opacity&amp;quot;: &amp;quot;0&amp;quot;, &amp;quot;position&amp;quot;: &amp;quot;fixed&amp;quot;, &amp;quot;bottom&amp;quot;: &amp;quot;0px&amp;quot;, &amp;quot;z-index&amp;quot;: &amp;quot;1000&amp;quot;,
 &amp;quot;font-size&amp;quot;: &amp;quot;24px&amp;quot;, &amp;quot;color&amp;quot;: &amp;quot;DarkGreen&amp;quot;, &amp;quot;padding&amp;quot;: &amp;quot;3px&amp;quot;, &amp;quot;font-weight&amp;quot;: &amp;quot;bold&amp;quot;
 },
 &amp;quot;to&amp;quot;: { &amp;quot;opacity&amp;quot;: &amp;quot;1&amp;quot;, &amp;quot;bottom&amp;quot;: &amp;quot;+5px&amp;quot; }
 };
 var callback = function () { };
 if (a &amp;amp;&amp;amp; jQuery.isFunction(a))
 callback = a;
 else {
 a = a || {};
 jQuery.extend(option, a);
 callback = b || function () { };
 }

 var msgDiv = document.createElement(&amp;quot;div&amp;quot;);

 jQuery(msgDiv).css(option.from).html(msg);
 jQuery(document.body).append(msgDiv);
 jQuery(msgDiv).stop().animate(option.to, option.time, callback);
 if (option.expire &amp;gt; 0) {
 setTimeout(function () {
 if (msgDiv) {
 jQuery(msgDiv).stop().animate({ &amp;quot;opacity&amp;quot;: &amp;quot;0&amp;quot;, &amp;quot;bottom&amp;quot;: &amp;quot;-5px&amp;quot; }, option.time,
 function () { callback(); jQuery(this).remove(); });
 }
 }, option.expire);
 }
 return jQuery(msgDiv);
 }
});
&lt;/code>&lt;/pre>
&lt;p>写在最后补充一下，这个动机基本没什么用了&lt;/p></description></item><item><title>解析网站字符串型参数 Javascript QueryString 操作 TQueryString类</title><link>//owent.net/2010/104.html</link><pubDate>Mon, 01 Nov 2010 02:15:09 +0000</pubDate><guid>//owent.net/2010/104.html</guid><description>&lt;p>这是学校USRP项目需要而写的一个类，但是既然写出来了，以后也可能用到，就共享出来吧。&lt;/p>
&lt;p>这个类用于解析网页URL的QueryString参数，或者也可以当做操作一些其他设置的类库。&lt;/p></description></item></channel></rss>